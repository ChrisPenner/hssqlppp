all the source apart from the library code goes in this folder. There
is a mix of current code, and a large amount of old broken code that
is in the slow process of being tidied up.

= catalogReader/

code to read a catalog from a postgresql database

= chaos/

semi working source of the chaos project, the engine for a
game. Written in plpgsql with syntax extensions, this will become the
example of a serious code base that hssqlppp is used on - demonstrates
use of extensions in a real-ish project, plus provides a good target
for the parser and typechecker. (Chaos was also the original
motivation for writing hssqlppp!)

The last time this text was updated, the chaos source parsed and
converted to real SQL and loaded into postgres succesfully. It has
been a long time since it passed the type checker, but it did at one
point. Getting it typechecking again is a goal for 0.5.0 or a version
soon after that.

The makefile contains targets for working with the chaos sql.

= devel-util/

this contains some utilities which are probably only useful for
developing hssqlppp or the extras

There is a small utility to create makefile rules for haskell exes
(GenerateRules.lhs), and a utility which uses the CatalogReader module
to embed a copy of the catalog information from a default template1
catalog from postgresql. This is to make the dependency of hssqlppp on
postgresql optional.

= docutil/

Tools to build the website, plus the remains of some old code to
produce additional docs.

Contains a wrapper around pandoc to use illuminate for highlighting
and to support markdown in comments in source files 'DocTool', and
also a really hacky thing to produce rough documentation for sql
source with extensions, augmented with hssqlppp typechecking,
including a kind of before and after to easily compare the sql source
you have written and the transformed source which is fed to postgresql
(for understanding sql extensions).


= examples/

These are the example programs used in the website documentation for
hssqlppp. Would like to automatically keep these source files, the
output from running them, and the documentation in sync, but it is
manual at the moment.

= extensions/

These are the semi current examples of syntax extensions to
sql, mostly developed for the chaos project.

= h7c/

Building on the chaos idea, trying to make a library for working with
projects with SQL which use hssqlppp as part of the development/build
process. The main use will be to run the hssqlppp typechecker on
source to catch many errors more quickly than loading into postgres
and running automated tests, and also to support sql syntax
extensions. Possibly also to add things like lint/fxcop like checking.

= tests/

The automated tests for hssqlppp

= tosort

old rotted code and docs, most is superseded by other code above. The
wrappers folder contains the old typesafe haskell wrappers for
parameterized statements, which is on the list to be resurrected.

