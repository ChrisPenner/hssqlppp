
= Current TODO list

TODOs in rough order that they are intended to be done

stage 1: do some stuff patchily to try to get a bunch of common sql
   partially type-checking (focus is on getting the result types of
   most select statements)

todos for this stage:
union, except, intersect
creates - just enough to fill in the scope so references to these type
   check
support for domains implicitly casting to base types in function
   lookup, result set resolution
simple typing of aggregate args and return types
Pretty printer for types
aliases in selects from functions - when the function returns a setof
   single type instead of composite, then the single return attribute
   takes the alias name as it's attribute name e.g. select x from
   gen_series() as x
coalesce, what other special functions are there?
exists, case exp when value - support these cos they're pretty common
type check selects against pg hidden fields (e.g. oid in catalogs).

stage 2:
make this useful by working on the showtypesdb function:
instead of interspersing the types with the pretty printed statements,
   insert or overwrite the type comments in the original source so we
   preserve formatting and other comments.
use the type pretty printer to make the type comments more readable
want to also output types of parts of statements, e.g. the select in a
   for statement or insert, etc.. Will probably have to add explicit
   annotation field to most of the ast nodes to hold the type of every
   node (this can also be used to store more accurate source
   positioning, amongst other things)
With this in place, the code actually has some use for real code, in
   that we can use it to easily view the types of views, etc. inline
   in the real sql source code

stage 3:

run through and finish or note missing bits for select expressions:
group by, having
order by
limit, offset
combineselect
joinon expression
natural and using fields check
natural xor join expression in joins
some missing expression bits:
exists
inpredicate
windowfn
scalarsubquery
rowctor
casts

stage 4:
review and choose from this list:
* do null inference
* some selective fixups here and there to the typing (e.g. type
   checking constraints in create tables)
* selectively add some missing syntax, to cover the most glaring holes
* schema qualification
* type check statements inside create function
* something else from the todo for milestone 0.1 below
* something else

================================================================================

rough milestones for release 0.1:
in addition to all the stage 3 items above,

add support for nearly all syntax for parsing and type checking,
   instead of doing piecemeal bits, so go through the pg manual part
   II, support almost everything, add comprehensive simple tests, go
   through the sql reference section also. This is the time to
   document more precisely what isn't supported so there is a clear
   reference for this
do ? placeholders, and do typesafe haskell wrapper generation using this
figure out what to do about tricky operator precedence parsing, etc.
ability to type check all of chaos sql
example for generating sql code from haskell using the ast
get database loader and typesafe access generators good enough to use
   in chaos
example usage of each of these
look at the error message formatting, particularly try to fix the
   parser errors so they make more sense
add annotation field to most ast nodes, store type and source
   positioning in this field, fix parser to add lots of accurate
   positioning information when parsing.


================================================================================

some syntax todo, not organised:

------------
add support for following sql syntax (+ type checking)
alter table, common variations
create index
create rule
create trigger
+ drops for all creates
+ maybe alters?
ctes
loop, exit, labels
easy ones: transactions, savepoints, listen
prepare, execute + using
some more:
create or replace
alter table
transactions: begin, checkpoint, commit, end, rollback
cursors: declare, open, fetch, move, close, where current of
copy - parse properly
create database
create index
create rule
create trigger + plpgsql support
grant,revoke
listen, notify, unlisten
prepare, execute
savepoint, release savepoint, rollback to savepoint
set, reset
set constraints
set role
set transaction

plpgsql

blocks which aren't at the top level of a function
% types
strict on intos
not null for var defs
exception
execute using
get diagnostics
return query execute
raise missing bits
out params
elsif
loop
exit
labels
reverse, by in for
for in execute

expressions:
process string escapes, support dollar quoting and other quoting more
   robustly in the pretty printer
full user operator support (?)
fix expression parser properly to handle things like between - see
   grammar in pg source for info on how to do this
[:] array slices
aggregate: all and distinct
multi dimensional arrays: selectors and subscripting
missing keyword operators
datetime extract
time zone
subquery operators: any, some, all
in general, parsing operators is wrong, the lexer needs to be able to
   lex sequences of symbols into single/multiple operators correctly,
   what happens at the moment is a kludge, also, general operator
   parsing will change how operators are represented in the ast

================================================================================

some other random ideas:

write a replacement psql shell, which can expose parse trees, type
   checks, lint checks, and doesn't use a one line at a time style
   interface (i.e. works more like writing and executing lisp in
   emacs, not like bash).

chain scope lookups instead of unioning them since unioning is too
   slow - or maybe use maps/sets, but need to quickly scan whole lists
   e.g. for function lookup, which can't really use any sort of key
   based lookup, where the key the function lookup uses is the same as the
   key the map/set uses.

incorporate pg regression test sql into parsing and type checking
   tests

write a show for parsec errors which formats the lex tokens and
   expected lists properly (was broken when moved to the separate
   lexer)

add haddock docs to public api

write some example programs with plenty of comments - will this mainly
   be used as a library or as a utility though?

redo cabal file to add compile time options: exes, pg support, tests
 or split into separate packages?

make a subfolder hierarchy/put code in a well named modules

work on error reporting, add tests for malformed sql

add token location info to ast nodes, modify for type checking, etc
   support.

want to report multiple parse errors, perhaps can bodge this because
   of the property that ';' can only appear inside a string or
   comment, or otherwise at the end of a statement, so add some code
   to jump to the next end of statement looking ';' and continue to
   parse to end of file in an attempt to catch at least some further
   syntax errors

improve tests:
identify each bit of syntax and make sure there is a test for it
add some bigger tests: lots of sql statements, big functions
look for possible corner cases and add tests

get property checker working again - one problem is that the pretty
   printer will reject some asts (which the parser cannot
   produce), and the parser will probably reject some invalid sql that
   the pretty printer will happily produce from some asts.

plpgsql on 'roids:
write libraries in haskell, and then write syntax extensions for
   plpgsql using the extension mechanism to access these libs from
   extended plpgsql e.g. ui lib written in haskell, accessed by syntax
   extensions in plpgsql then can write the database and ui all in the
   same source code in the same language, with first class support for
   properly typed relation valued expressions, avoiding multiple
   languages and mapping/'impedance mismatch' between database types
   and types in the language you write the ui in. A bit like Access
   but with a non numpty dbms.
