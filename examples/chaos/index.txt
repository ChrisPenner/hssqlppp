Chaos 2010
==========

Inspired by an old Spectrum game called
[Chaos](http://en.wikipedia.org/wiki/Chaos_(video_game)).

The idea is to keep all the data in the database, and use constraints,
transactions and stored procedures to keep things consistent and
enforce the rules. Another goal is to have the source read like a
rules reference as much as possible.

The transformed versions are an attempt to show the sql as it goes
into the database after being processed with the extension system. The
transformation system works fine - the original sources here are
transformed into normal sql, loaded into a database which then passes
all the tests for the project.

The transformations are effected by the function in this file:
[ChaosExtensions](website/pandoc_source/examples/Database/HsSqlPpp/Examples/Extensions/ChaosExtensions.lhs.html)
which in turn also uses most of the other extensions in this folder:
[Extensions](website/pandoc_source/examples/Database/HsSqlPpp/Examples/Extensions/)

The presentation here is slightly flakey in places. It attempts to
take the final sql post transform, and merge in the original sql
source statement by statement so you can see what's happening in the
transform process, and it also shows some limited annotations from
type checking.

The files are listed in order.

some boilerplate
----------------

* [Metadata](chaos/server/Metadata.sql.html) - [Transformed
  Metadata](chaos/server/Metadata.sql.tr.html)

read only data
--------------

These define all the constant data which doesn't change either during
a game or from one game to the next. These are the piece prototypes,
and the spells.

* [PiecePrototypes](chaos/server/PiecePrototypes.sql.html) -
  [Transformed
  PiecePrototypes](chaos/server/PiecePrototypes.sql.tr.html)
* [Spells](chaos/server/Spells.sql.html) - [Transformed Spells](chaos/server/Spells.sql.tr.html)

Game data
---------

This is the data which describes a individual game. The game data
includes the turn sequence stuff also.

* [GlobalData](chaos/server/GlobalData.sql.html) - [Transformed
  GlobalData](chaos/server/GlobalData.sql.tr.html)
* [Wizards](chaos/server/Wizards.sql.html) - [Transformed
  Wizards](chaos/server/Wizards.sql.tr.html)
* [Pieces](chaos/server/Pieces.sql.html) - [Transformed
  Pieces](chaos/server/Pieces.sql.tr.html)

turn sequence
-------------

This desribes what point in the game we're at. The turn sequence is
slightly involved. Roughly. each wizard chooses a spell in turn, then
each casts the spell in turn, then each wizard moves all his pieces in
turn.

* [TurnSequence](chaos/server/TurnSequence.sql.html) - [Transformed
  TurnSequence](chaos/server/TurnSequence.sql.tr.html)

actions
-------

All the updates to the database use stored procedures (called actions
in the code). Some are the turn sequence module, the rest are here.

Code to help with testing actions:

* [TestSupport](chaos/server/actions/TestSupport.sql.html) -
  [Transformed
  TestSupport](chaos/server/actions/TestSupport.sql.tr.html)

In addition to all the constraints, all the actions have precondition
checks, which also double as guidance to the ui to what actions are
possible to call at a given time.

* [SquaresValid](chaos/server/actions/SquaresValid.sql.html) - [Transformed
  SquaresValid](chaos/server/actions/SquaresValid.sql.tr.html)

Next phase:

* [NextPhase](chaos/server/actions/NextPhase.sql.html) - [Transformed
  NextPhase](chaos/server/actions/NextPhase.sql.tr.html)

Actions for each phase:

* [SpellChoice](chaos/server/actions/SpellChoice.sql.html) - [Transformed
  SpellChoice](chaos/server/actions/SpellChoice.sql.tr.html)
* [SpellCast](chaos/server/actions/SpellCast.sql.html) - [Transformed
  SpellCast](chaos/server/actions/SpellCast.sql.tr.html)
* [MovePhase](chaos/server/actions/MovePhase.sql.html) - [Transformed
  MovePhase](chaos/server/actions/MovePhase.sql.tr.html)
* [Autonomous](chaos/server/actions/Autonomous.sql.html) - [Transformed
  Autonomous](chaos/server/actions/Autonomous.sql.tr.html)

Some helpers for adding, changing and removing pieces:

* [PieceChanges](chaos/server/actions/PieceChanges.sql.html) - [Transformed
  PieceChanges](chaos/server/actions/PieceChanges.sql.tr.html)

A (partial) log of what actions have been run. Bit of a poor man's
temporal data.

* [History](chaos/server/actions/History.sql.html) - [Transformed
  History](chaos/server/actions/History.sql.tr.html)

new game
--------

The code to setup/reset the database for a new game:

* [NewGame](chaos/server/NewGame.sql.html) - [Transformed
  NewGame](chaos/server/NewGame.sql.tr.html)
* [TestBoards](chaos/server/TestBoards.sql.html) - [Transformed
  TestBoards](chaos/server/TestBoards.sql.tr.html)

ai
--

The code to implement the ai for the computer controlled wizards (in
sql? Call the men in white coats).

* [AI](chaos/server/AI.sql.html) - [Transformed
  AI](chaos/server/AI.sql.tr.html)



client support
--------------

the rough original plan was to store the ui state in the database as
well, but I don't think this is working too well. Maybe a system where
the relevant tables and functions are autogenerated from the ui
descriptions in Haskell? Anyway - this is the old cruft pre
removal. There is quite a lot of important ui logic in here still.

lists the sprites, this is the stuff that works quite well since we
use foreign keys to tighten things up:

* [Sprites](chaos/client/Sprites.sql.html) - [Transformed
  Sprites](chaos/client/Sprites.sql.tr.html)

additional ui only information for each wizard, e.g. sprite, colour

* [WizardDisplayInfo](chaos/client/WizardDisplayInfo.sql.html) -
  [Transformed
  WizardDisplayInfo](chaos/client/WizardDisplayInfo.sql.tr.html)

A load of really half baked views and table to support a dodgy effects
system, this is the most bizarre bit and will definitely mostly be
going soon:

* [BoardWidget](chaos/client/BoardWidget.sql.html) - [Transformed
  BoardWidget](chaos/client/BoardWidget.sql.tr.html)

Actually, this is pretty half baked too, an attempt to pack a load of
information about the spells available to a wizard on screen:

* [SpellBookWidget](chaos/client/SpellBookWidget.sql.html) -
  [Transformed
  SpellBookWidget](chaos/client/SpellBookWidget.sql.tr.html)

Save the state of the new game widget in the database, this is prime
candidate material for auto generated database structure:

* [NewGameWidget](chaos/client/NewGameWidget.sql.html) - [Transformed
  NewGameWidget](chaos/client/NewGameWidget.sql.tr.html)

supplement the server actions with a few ui specific bits and
pieces. In particular, all the mapping from keys to actions is handled
in this code. Probably this is all or mostly going to move to Haskell

* [ClientActions](chaos/client/ClientActions.sql.html) - [Transformed
  ClientActions](chaos/client/ClientActions.sql.tr.html)

wrapper around the new game action in the server code which also sets
up the client supporting data, e.g. the wizard display info:

* [ClientNewGame](chaos/client/ClientNewGame.sql.html) - [Transformed
  ClientNewGame](chaos/client/ClientNewGame.sql.tr.html)

= usage

To load the sql straight into postgresql, create a database called
chaos. You might need to add plpgsql manually.

Then, to load the sql in, use something like:

~~~~~{.sh}
time ghc -XDeriveDataTypeable -DPOSTGRES -cpp -pgmPcpphs -optP--cpp -idevel:src:examples/chaos:examples/extensions/:examples/util/:tests/ --make examples/chaos/Chaos2010.lhs && time examples/chaos/Chaos2010 reset
~~~~~

Using -Odph on my machine changes the runtime for the reset from ~7.5
seconds to ~5 seconds.

To output the transformed sql to a file and load using psql, sometimes
easier to work out sql errors:

~~~~~{.sh}
time ghc -XDeriveDataTypeable -DPOSTGRES -cpp -pgmPcpphs -optP--cpp -idevel:src:examples/chaos:examples/extensions/:examples/util/:tests/ --make examples/chaos/Chaos2010.lhs && time examples/chaos/Chaos2010 reset && time examples/chaos/Chaos2010 sql > chaos1.sql && time examples/chaos/Chaos2010 clear && time psql chaos -q --set ON_ERROR_STOP=on --file=chaos1.sql
~~~~~


* [Chaos2010.lhs](Chaos2010.lhs.html)
* [Database/HsSqlPpp/Chaos/ChaosExtensions.lhs](Database/HsSqlPpp/Chaos/ChaosExtensions.lhs.html)
* [Database/HsSqlPpp/Chaos/ChaosFiles.lhs](Database/HsSqlPpp/Chaos/ChaosFiles.lhs.html)
* [sql/chaos/client/BoardWidget.sql](sql/chaos/client/BoardWidget.sql.html)
* [sql/chaos/client/ClientActions.sql](sql/chaos/client/ClientActions.sql.html)
* [sql/chaos/client/ClientNewGame.sql](sql/chaos/client/ClientNewGame.sql.html)
* [sql/chaos/client/NewGameWidget.sql](sql/chaos/client/NewGameWidget.sql.html)
* [sql/chaos/client/SpellBookWidget.sql](sql/chaos/client/SpellBookWidget.sql.html)
* [sql/chaos/client/Sprites.sql](sql/chaos/client/Sprites.sql.html)
* [sql/chaos/client/WizardDisplayInfo.sql](sql/chaos/client/WizardDisplayInfo.sql.html)
* [sql/chaos/server/AI.sql](sql/chaos/server/AI.sql.html)
* [sql/chaos/server/GlobalData.sql](sql/chaos/server/GlobalData.sql.html)
* [sql/chaos/server/Metadata.sql](sql/chaos/server/Metadata.sql.html)
* [sql/chaos/server/NewGame.sql](sql/chaos/server/NewGame.sql.html)
* [sql/chaos/server/PiecePrototypes.sql](sql/chaos/server/PiecePrototypes.sql.html)
* [sql/chaos/server/Pieces.sql](sql/chaos/server/Pieces.sql.html)
* [sql/chaos/server/Spells.sql](sql/chaos/server/Spells.sql.html)
* [sql/chaos/server/TestBoards.sql](sql/chaos/server/TestBoards.sql.html)
* [sql/chaos/server/TurnSequence.sql](sql/chaos/server/TurnSequence.sql.html)
* [sql/chaos/server/Wizards.sql](sql/chaos/server/Wizards.sql.html)
* [sql/chaos/server/actions/Autonomous.sql](sql/chaos/server/actions/Autonomous.sql.html)
* [sql/chaos/server/actions/History.sql](sql/chaos/server/actions/History.sql.html)
* [sql/chaos/server/actions/MovePhase.sql](sql/chaos/server/actions/MovePhase.sql.html)
* [sql/chaos/server/actions/NextPhase.sql](sql/chaos/server/actions/NextPhase.sql.html)
* [sql/chaos/server/actions/PieceChanges.sql](sql/chaos/server/actions/PieceChanges.sql.html)
* [sql/chaos/server/actions/SpellCast.sql](sql/chaos/server/actions/SpellCast.sql.html)
* [sql/chaos/server/actions/SpellChoice.sql](sql/chaos/server/actions/SpellChoice.sql.html)
* [sql/chaos/server/actions/SquaresValid.sql](sql/chaos/server/actions/SquaresValid.sql.html)
* [sql/chaos/server/actions/TestSupport.sql](sql/chaos/server/actions/TestSupport.sql.html)
