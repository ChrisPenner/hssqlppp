Examples
========

All this code is currently available in the cabal source package, to get use

    cabal update
    cabal unpack hssqlppp

HsSqlSystem
-----------

[HsSqlSystem](pandoc_source/HsSqlSystem.lhs.html) - an executable that
has a bunch of functions, source contains documentation and examples
for the commands. E.g.:

* [Parse command](pandoc_source/HsSqlSystem.lhs.html#parse) -
  parse some SQL, display AST.
* [TypeCheck command](pandoc_source/HsSqlSystem.lhs.html#typecheck) -
  parse some SQL, type check, and display type errors in Emacs format.
* [PPCatalog command](pandoc_source/HsSqlSystem.lhs.html#ppcatalog) -
  parse some SQL, type check, display catalog.

Two of the libraries used by HsSqlSystem:

* [DatabaseLoader](pandoc_source/Database/HsSqlPpp/Examples/DatabaseLoader.lhs.html),
  code to parse some SQL, optionally run a transform function on the
  AST, then load the result into the database.
* [AnnotateSource](pandoc_source/Database/HsSqlPpp/Examples/AnnotateSource.lhs.html),
  load some SQL, type check, and interpolate some type information in
  comments back into the source code.

Typesafe database access
------------------------

Needs some tidying:

* [Generate SQL source
  code](pandoc_source/Database/HsSqlPpp/Examples/WrapperGen.lhs.html)
* [Template Haskell
  tuples](pandoc_source/Database/HsSqlPpp/Examples/DBAccess2.lhs.html),
  uses Template Haskell to do the same thing as previous code but
  possibly nicer to use.
* [Template Haskell
  HList](pandoc_source/Database/HsSqlPpp/Examples/DBAccess3.lhs.html),
  like the previous version, but returns the tables as lists of
  HLists.

SQL Extensions
--------------

Some examples to write extensions to plpgsql using ast
transforms. (Being able to do this was the original motivation for
writing HsSqlPpp.)

[CreateVarSimple](pandoc_source/Database/HsSqlPpp/Examples/Extensions/CreateVarSimple.lhs.html).
This is a simple demo with lots of comments.

[CreateVar](pandoc_source/Database/HsSqlPpp/Examples/Extensions/CreateVar.lhs.html)

Coming soon:
* modules
* multirow, multitable constraint expressions
* readonly tables
* notify triggers
* transition constraints
