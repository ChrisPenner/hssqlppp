HsSqlPpp
========

A parser, quasiquoter, pretty printer, and type checker for SQL
written in Haskell. Supports PostgreSQL SQL and PL/pgSQL syntax. BSD
licensed.

This documentation is currently for the unreleased development
version, to be 0.3.0, which isn't on HackageDB.

Status
======

Pre-alpha. Support for parsing SQL is patchy, but not too bad.

Support for type-checking is also patchy. A rough idea of how far
along it is: can get catalog information by parsing and type checking
ddl source, or by reading a database, and can then type check
parameterized crud statements and generate type-safe haskell
wrappers. This already works well on a smallish database project with
maybe 40 tables and a lot of views and functions.

See these extracts from the test files for examples of the kind of SQL
which parses and type checks:

* [Parsing examples](ParserTests.html)
* [Type-checking examples](TypeCheckTests.html)
* [Quasiquotation examples](QuasiQuoteTests.html)

Some other limitations are that the design of the AST node types is
pretty basic, not much work has been done on correctly rejecting
invalid SQL (although it does pretty well despite this), and not much
thought has been put into error messages and error reporting yet
(although you can definitely use it to catch lots of type checking
issues).

Only limited parts of the ast have antiquotation support for the
quasiquoter, if you need some that aren't there, let me know.

Installation
============

This project is currently developed on GHC 6.12, but the latest
release still works on 6.10.

A bit of adventure for non Haskell programmers: if you don't already
have Haskell installed, you can get it here:
[http://hackage.haskell.org/platform/](http://hackage.haskell.org/platform/)

You will also need PostgreSQL installed. HBDC-postgresql (which is
installed by cabal below) depends on the development libraries/headers
for PostgreSQL.

Then use

~~~~~{.sh}
cabal update
cabal install hssqlppp
~~~~~

to install the library.

Also comes with a optional executable which can run the automated
tests, run some commands such as parsing or type checking, and is also
used to generate some of the source files and the documentation. (See
[HsSqlSystem](pandoc_source/examples/HsSqlSystem.lhs.html) for what
commands it supports.)

You can use

~~~~~{.sh}
cabal install hssqlppp -fexecutable
HsSqlSystem -?
~~~~~

to install the exe along with the library, or

~~~~~{.sh}
cabal unpack hssqlppp
cd hssqlppp-x.x.x
ghc --make -threaded -XDeriveDataTypeable -iexamples:src examples/HsSqlSystem.lhs
examples/HsSqlSystem -?
~~~~~

to compile and run without installing it.

Documentation
=============

The documentation you're reading is a work in progress.

[Haddock](haddock/index.html)

[Example code](examples.html)

The [htmlized source for the library and
examples](pandoc_source/index.html) has lots of comments, but is very
unpolished.

You can build a local copy of this documentation using by getting the
executable mentioned above, and running

~~~~~{.sh}
HsSqlSystem makewebsite
~~~~~

Development info
================

Get latest development version:

~~~~~{.sh}
bzr branch lp:~jakewheat/hssqlppp/trunk
~~~~~

(This version is often a mess and sometimes broken).

Uses Parsec for parsing, HDBC for database access, and UUAGC to assist
the type checking (UUAGC is needed if you edit the .ag files).

Comes with a small test suite, which you can run by installing the
executable (see above), and then:

~~~~~{.sh}
HsSqlSystem test
~~~~~

Useful links
============

Homepage: [http://community.haskell.org/%7EJakeWheat/hssqlppp/index.html](http://community.haskell.org/%7EJakeWheat/hssqlppp/index.html)

Hackage: [http://hackage.haskell.org/package/hssqlppp](http://hackage.haskell.org/package/hssqlppp)

Repository: [http://launchpad.net/hssqlppp](http://launchpad.net/hssqlppp)

Contact
=======

Let me know if you're using/ interested in using the library, if you
have any problems, bug reports, or suggestions, etc.. All
contributions, comments and criticism welcome:

jakewheatmail@gmail.com
