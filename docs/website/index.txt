HsSqlPpp
========

A parser, quasiquoter, pretty printer, and type checker for SQL
written in Haskell. Supports PostgreSQL SQL and PL/pgSQL syntax. BSD
licensed.

*This documentation is currently for the unreleased development
version, to be 0.3.0, which isn't on HackageDB. You can download it
using:*

~~~~~{.sh}
bzr branch lp:~jakewheat/hssqlppp/trunk
~~~~~

*None of the cabal commands anywhere in this documentation will be
 correct until 0.3.0 is uploaded to hackage.*

This documentation is a work in progress.

Use
===

Possible uses of this library include:

* parsing sql as part of another library
* lint checking sql code
* type-checker can help with development: e.g. change the name of a
  view, type-check, and you can see which functions you need to update
  with the new name
* generating sql code from scratch
* transforming sql code using quasiquoting
* viewing the catalog produced by some sql code
* helping with typesafe database access from haskell
* generating documentation for sql

Some of these are partially written already - this isn't a finished
product.

Status
======

Pre-alpha. Support for parsing SQL is patchy, but not too bad. Here is
an extract from the parsing tests which gives load of examples of what
kind of SQL can currently be parsed:

* [Parsing examples](ParserTests.html)

Support for type-checking is also patchy. Most of the effort so far
has been put into producing catalog information out, and type checking
parameterised crud statements. These two aspects work quite well,
although there is a fair bit missing from the catalog information
currently. The type checker skips over type check failures and as yet
unsupported sql quite well.

I find it pretty useful when I change or remove a function, table or
view, the type checker will recheck the function bodies much better
than loading into postgres does.

Extract from the type checking tests:

* [Type-checking examples](TypeCheckTests.html)

Currently limited support for quasiquoting, here are the examples:

* [Quasiquotation examples](QuasiQuoteTests.html)

The [example database for a game, Chaos
2010](source/examples/chaos/index.txt.html) is an example of a
smallish database which is parsed, transformed, then loaded into the
database successfully. The extensions which it uses to transform the
SQL use quite a lot of quasiquoting.

Some other limitations are that the design of the AST node types is
pretty basic, not much work has been done on correctly rejecting
invalid SQL (although it does pretty well despite this), and not much
thought has been put into the error messages/ error reporting yet
(although you can definitely use it to catch lots of type checking
issues, it mostly gives you something you can understand with accurate
source positions).

Installation
============

This project is currently developed on GHC 6.12.1.

There are cabal flags:

* postgres: for omitting HDBC-postgresql - this allows you to
  install the library without having postgresql, useful is you just
  want an SQL parser
* quasiquotes: for omitting SQL quasi quoting support - this removes
  the dependency on template-haskell (you cannot currently have hdbc
  without quasiquotes although this would be easy to fix if useful)
* binaries: to compile the test, development and example binaries -
  these require the two other flags plus they bring in a massive
  amount of dependencies

The defaults are postgres and quasiquotes on, and binaries off. The
binaries take a long time to build, and are just for developing
hssqlppp, and examples.

Use

~~~~~{.sh}
cabal install hssqlppp
~~~~~

to install the library with the defaults, or e.g.

~~~~~{.sh}
cabal install hssqlppp -f-postgres -f-quasiquotes
~~~~~

for minimal dependency version, or

~~~~~{.sh}
cabal install hssqlppp -fbinaries
~~~~~

for the binaries. The binaries are:

* [HsSqlPppUtil](source/examples/util/HsSqlPppUtil.lhs.html) - command line access to some of the parsing and
  typechecking routines (use to check how well some sql is supported?)
* [Tests](source/tests/Tests.lhs.html) - the automated test suite
* [Chaos2010](source/examples/chaos/Chaos2010.lhs.html) - loader for
  the example database, which reads a bunch of sql files, transforms
  them, then loads them into PostgreSQL

And two not very interesting ones:

* [MakeWebsite](source/devel/MakeWebsite.lhs.html) - build the website from source
* [MakeAntiNodes](source/devel/MakeAntiNodes.lhs.html) - generate a helper ast

You can compile and run the binaries without installing in your path using something like:

~~~~~{.sh}
cabal unpack hssqlppp
cd hssqlppp-0.3.0 # change version if needed
cabal configure -fbinaries
cabal build
~~~~~

Documentation
=============

* [Haddock](haddock/index.html)

See the [htmlized source for the library, tests, and examples](source.txt.html); has lots of
comments but is quite rough at the moment.

Homepage: [http://community.haskell.org/%7EJakeWheat/hssqlppp/index.html](http://community.haskell.org/%7EJakeWheat/hssqlppp/index.html)

Hackage: [http://hackage.haskell.org/package/hssqlppp](http://hackage.haskell.org/package/hssqlppp)

Repository: [http://launchpad.net/hssqlppp](http://launchpad.net/hssqlppp)

Future Plans
============

Provisional for 0.4.0:

* add support for parsing most postgresql syntax
* add comprehensive set of splices for quasi-quoting
* add a fair bit to the catalog
* fix the local bindings code, and get the type checking into decent
  shape
* add slightly more integrated support for custom syntax
* report function which can be run on a big bit of sql - so you can
  easily find out how well your sql is supported by hssqlppp

Contact
=======

Let me know if you're using/ interested in using the library, if you
have any problems, bug reports, or suggestions, etc.. All
contributions, comments and criticism welcome:

jakewheatmail@gmail.com
