{-
Copyright 2009 Jake Wheat

This file contains the code for typechecking create table statements
(and also create table as statements). It's pretty limited at the
moment, the bits that work are:

gathers enough information to add the table attributes types to the
catalog

typechecks row check constraints properly, but table check constraints
and all other constraints are not checked at all.

doesn't check for duplicate attribute names. doesn't check if the
types are valid for a table (e.g. disallow setof types)

We produce a valid environment update if the types of the attributes
check ok, any errors in the constraints aren't leaked.

-}

SEM Statement
    | CreateTable
        loc.tpe = dependsOnTpe @loc.attrTypes $ Right $ Pseudo Void
        loc.envUpdates = dependsOn @loc.attrTypes []
                           [EnvCreateTable @name @atts.attrs []]

        loc.attrTypes = map snd @atts.attrs

        loc.statementInfo = []
        loc.backTree = CreateTable @ann
                                   @name
                                   @atts.annotatedTree
                                   @cons.annotatedTree

SEM Statement
    | CreateTableAs
        loc.tpe =
            dependsOnTpe [@loc.selType] $ do
              @loc.attrs
              Right @loc.selType
        loc.envUpdates =
            either (const []) (\as -> [EnvCreateTable @name as []]) $ do
              ats <- @loc.attrs
              return $ dependsOn (tpeToT @loc.tpe :
                                  (map snd ats)) [] ats

        loc.selType = getTypeAnnotation @expr.annotatedTree
        loc.attrs = unwrapComposite @loc.selType

        loc.backTree = CreateTableAs @ann @name @expr.annotatedTree
        loc.statementInfo = []

{-
attribute name and type gathering
-}

ATTR AttributeDef [||attrName : String
                     namedType : Type]

SEM AttributeDef
    | AttributeDef
        lhs.attrName = @name
        lhs.namedType = @typ.namedType

ATTR AttributeDefList [||attrs : {[(String, Type)]}]

SEM AttributeDefList
    | Cons lhs.attrs = (@hd.attrName, @hd.namedType) : @tl.attrs
    | Nil lhs.attrs = []

{-
row check constraint:
inject the column name and type into the column constraints
-}

SEM AttributeDef
    | AttributeDef
        cons.lib =
            case updateBindings @lhs.lib
                     [LibStackIDs [("", [(@name, @typ.namedType)])]] of
              Left x -> error $ show x
              Right e -> e


