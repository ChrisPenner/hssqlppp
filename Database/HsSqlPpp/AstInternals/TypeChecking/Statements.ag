{-
Copyright 2009 Jake Wheat

This file contains the general code for statements and statement
lists, and includes the ag files for various flavours of statement.

The attributes and sem statements in this file are for chaining the
env updates as we progress through a statement list, and for producing
the resultant env after we've checked a whole ast, this can be used
e.g. to type check multiple files in a row which depend on eachother.

-}

-- env updates syn attr is used by each statement to report
-- what changes it makes to the catalog, we use this to update
-- the env to feed into the next statement

ATTR Statement [||envUpdates : {[EnvironmentUpdate]}]


ATTR StatementList [envUpdates : {[EnvironmentUpdate]}||]


--producedenv is used to pass the final updated env out
ATTR StatementList Root [|| producedEnv : Environment]


SEM StatementList
    | Cons Nil
        --newenv is the environment passed into the head statement
        --updated with any catalog changes that that statement has made
        loc.newEnv = fromRight @lhs.env $ updateEnvironment @lhs.env @lhs.envUpdates
    | Cons
        hd.env = @loc.newEnv
        tl.env = @loc.newEnv
        --produced env is used to chain the final updated environment from the last
        --element of the list and pass it back up the list so in can be pushed up
        -- to the root element and sent out from there
        lhs.producedEnv = @tl.producedEnv
        --this is probably a bit inefficient: it creates a new environment from scratch
        --on each statement instead of chaining on the last updated env
        tl.envUpdates = @hd.envUpdates
    | Nil
        lhs.producedEnv = @loc.newEnv

SEM Statement
    | SelectStatement Insert Update Delete CreateView CreateDomain
      CreateFunction CreateType CreateTable Return Assignment ForSelectStatement
        lhs.annotatedTree = annTypesAndErrors @loc.backTree
                              (tpeToT @loc.tpe)
                              (getErrors @loc.tpe)
                              $ Just (map StatementInfoA @loc.statementInfo ++
                                      [EnvUpdates @loc.envUpdates])
        lhs.envUpdates = @loc.envUpdates


SEM Root
    | Root statements.envUpdates = []

SEM Statement
    | CaseStatement ContinueStatement Copy CopyData DropFunction
      DropSomething Execute ExecuteInto ForIntegerStatement
      If NullStatement Perform Raise ReturnNext ReturnQuery Truncate
      WhileStatement
        lhs.envUpdates = []

SEM ExpressionListStatementListPair
    | Tuple
        x2.envUpdates = []
SEM ExpressionStatementListPair
    | Tuple
        x2.envUpdates = []
SEM FnBody
    | PlpgsqlFnBody SqlFnBody
        sts.envUpdates = []
SEM Statement
    | CaseStatement If
        els.envUpdates = []
SEM Statement
    | ForIntegerStatement ForSelectStatement WhileStatement
        sts.envUpdates = []



INCLUDE "TypeChecking/SelectStatement.ag"
INCLUDE "TypeChecking/Dml.ag"
INCLUDE "TypeChecking/CreateTable.ag"
INCLUDE "TypeChecking/MiscCreates.ag"
INCLUDE "TypeChecking/CreateFunction.ag"
INCLUDE "TypeChecking/Plpgsql.ag"

