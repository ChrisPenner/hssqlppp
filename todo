= fix existing features



== next release

add extension tests back in
review test source manually and add in fixme comments to track
 - lots of stuff already commented out
get most/all of the query/dml stuff working again inc. fixup
  identifiers for with

parameterized queries get tests working again

typesafe haskell wrappers

devel tools?

== next + 2

finish off existing typechecking fixes

typechecking fixup, refactoring? -> tests working again
chaos typecheck ok

syntax refactor? - follow sql standard better, split sql and plpgsql
  statements, get rid of separate astanti?

chaos: get parsing, typechecking again, add simple ui which allows ai
  battles + the crazy transformed sql docs
  later on: use custom syntax plugins, generate documentation

doctool + website working again?

compiler tool:
  typecheck sql
  transform sql -> output or load or just typecheck
  load into pg
  display catalog?


= new features
custom syntax plugins for parser
docgen for sql codebase
catalog work - better checking, more items in catalog
fuller parsing: work through pg manual
better quasi quotes
consider adding explicit parens to ast?

fix expression parsing and custom operators: stage one is to do a hack
which supplies the parser with the operator details at run time


reconsider parse tree and ast
good documentation and plenty of examples, fix up website + nav
big reorganisation of tests - split into multiple files
review and fix api + names
report generator
better automated testing of extras: chaos sql, example programs/code
build system for syntax extended sql projects
nullability inference in type checker
rewrite typeconversion.lhs

report generator:
the idea is to have the following for experimentation, evaluate how
   well hssqlppp supports some existing sql, support while developing
   sql (possibly with syntax extensions), and generating
   documentation:
take source sql:
standard postgresql sql in text files
sql taken from postgresql dump from live db
syntax extended sql in text files
do some or all of the following:
parse and type check - report problems
parse, pretty print, reparse and check
generate documentation, catalog
load into postgresql and double check catalog from typechecker
load and dump postgresql, reparse and typecheck for changes

============

future:
profiling, maybe switch parsing library
definitely fix operator parsing - one approach is to adjust parse tree
   after parsing to take into account custom operators and precedence
heavily cross linked docs + diagrams
materialized view extension
temporal data extension
generalised inclusions syntax
order independent ddl source
show used catalog, work with module extension as well
better annotation approach
lint tool
modules extension
