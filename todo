= fix existing features

== for next release:

add qq back in as flag on main library
add cabal file to build tests

parameterized queries, typesafe haskell access example
postgresql utils -> separate hackage package?

developer docs: overhaul overview of files plus review the other docs

== near future:

typechecking fixup, refactoring -> tests working again + chaos

chaos: get parsing, typechecking again, add simple ui which allows ai
  battles + the crazy transformed sql docs
  later on: use custom syntax plugins, generate documentation

doctool + website


= new features
custom syntax plugins for parser
docgen for sql codebase
catalog work - better checking, more items in catalog
fuller parsing: work through pg manual
better quasi quotes

fix expression parsing and custom operators: stage one is to do a hack
which supplies the parser with the operator details

chaos: get it parsing, typechecking, use new custom syntax stuff
       use typesafe haskell wrapper
       catalog documentation
       add simple ui which just allows ai battles

reconsider parse tree and ast
good documentation and plenty of examples, fix up website + nav
big reorganisation of tests - split into multiple files
review and fix api + names
report generator
better automated testing of extras: chaos sql, example programs/code
build system for syntax extended sql projects
nullability inference in type checker
rewrite typeconversion.lhs

report generator:
the idea is to have the following for experimentation, evaluate how
   well hssqlppp supports some existing sql, support while developing
   sql (possibly with syntax extensions), and generating
   documentation:
take source sql:
standard postgresql sql in text files
sql taken from postgresql dump from live db
syntax extended sql in text files
do some or all of the following:
parse and type check - report problems
parse, pretty print, reparse and check
generate documentation, catalog
load into postgresql and double check catalog from typechecker
load and dump postgresql, reparse and typecheck for changes

============

future:
profiling, maybe switch parsing library
definitely fix operator parsing - one approach is to adjust parse tree
   after parsing to take into account custom operators and precedence
heavily cross linked docs + diagrams
materialized view extension
temporal data extension
generalised inclusions syntax
order independent ddl source
show used catalog, work with module extension as well
better annotation approach
lint tool
modules extension
