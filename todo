next release:
review docs
  readme
  examples in website index
review files quickly - check comments?
hlint
haddock review
check on another machine

update overview of source code

todo items:
add qq back in as flag
create separate package with examples, tests, postgresql utils, etc.
fuller parsing: work through pg manual
better quasi quotes
doctool + website
typechecking:
  big refactor
  get typechecking tests working again
catalog work: new items, better checking
custom syntax thing
documentation generator with catalog
fix expression parsing and custom operators: stage one is to do a hack
which supplies the parser with the operator details
parameterized statements, typesafe haskell access


chaos: get it parsing, typechecking, use new custom syntax stuff
       use typesafe haskell wrapper
       catalog documentation
       add simple ui which just allows ai battles





targets for future:
fix expression parsing issues?
support most postgresql syntax
reconsider parse tree and ast
production quality parsing and type checking for selects, dml,
   parameterized statements
good documentation and plenty of examples, fix up website + nav
big reorganisation of tests - split into multiple files
review and fix api + names
report generator
better automated testing of extras: chaos sql, example programs/code
reorganised source files, all under src/
super simple build and run tests
simple syntax extensions support: parser plus conversions
more extensive quasi quoting
typesafe haskell wrappers for parameterized statements
build system for syntax extended sql projects
extend the catalog a lot
nullability inference in type checker
rewrite typeconversion.lhs

report generator:
the idea is to have the following for experimentation, evaluate how
   well hssqlppp supports some existing sql, support while developing
   sql (possibly with syntax extensions), and generating
   documentation:
take source sql:
standard postgresql sql in text files
sql taken from postgresql dump from live db
syntax extended sql in text files
do some or all of the following:
parse and type check - report problems
parse, pretty print, reparse and check
generate documentation, catalog
load into postgresql and double check catalog from typechecker
load and dump postgresql, reparse and typecheck for changes

============

future:
profiling, maybe switch parsing library
definitely fix operator parsing - one approach is to adjust parse tree
   after parsing to take into account custom operators and precedence
integrate with haskelldb?
heavily cross linked docs + diagrams
materialized view extension
temporal data extension
generalised inclusions
order independent ddl source
show used catalog, work with module extension as well
better annotation approach
lint tool
modules extension
