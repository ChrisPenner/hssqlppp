Summary: A parser, pretty printer, and type checker for PostGreSQL SQL
and PL/pgSQL. BSD licensed.

The current aims of the project is to provide a parser and type
checker for a substantial portion of PostGreSQL SQL and PL/pgSQL.

Status: it successfully parses and accurately pretty prints the three
moderate sized SQL files from another project of mine, but there are
lots of missing bits. Coverage of SQL is reasonable, see below for
more details on what is supported and unsupported.

It also has the beginnings of a type checker, which currently can type
check a large subset of expressions and selects that the parser can
parse, but is in an early state.

There is a command line wrapper, HsSqlSystem.lhs, which provides some
utility functions to access some of the library code.

It comes with a small test suite.

The bits of SQL that are unlikely to be supported include stuff which
falls above a certain threshold when considering the following factors
together:
* difficult to support
* rarely used
* having better ways of achieving the same effect
* brain damaged area of SQL.

I hope to put together something more precise when the code has
progressed to an appropriate point.

There is not much documentation at the moment. See the 'usage' file
for what you can do right now with it. Most of the source files have
plenty of comments, hopefully they can provide some illumination.

It comes with a Cabal file, so you can compile it by unzipping and
using cabal configure && cabal build in the usual way. It doesn't put
any modules in a proper module hierarchy yet. The main requirement
which you might not meet is it needs Parsec 3, I think it should work
on all GHC 6.10.x and possibly also GHC 6.8.x.

See the file development for some notes on how to work with the source
(there are a couple of generated Haskell files, but these generated
files are also included in the zip file so you can build and try out
the code without regenerating them).

The main dependencies of this project are: Parsec, HUnit, HDBC and
UUAGC.

================================================================================

Homepage

The project is hosted on Launchpad
http://launchpad.net/hssqlppp/

You can get the latest code using Bazaar:
bzr branch lp:~jakewheat/hssqlppp/trunk

Contact

Let me know if you're using/ interesting in using the library, if you
have any problems or suggestions, etc.. All contributions, comments
and criticism welcome.

jakewheatmail@gmail.com

================================================================================

= Syntax supported/ not supported:

== Parsing

Partially supports:
select statements (selectlists (*, qualified, aliased, expressions)
       distinct, basic window functions,
       from (with explicit joins - natural, inner, cross, left, right,
       full outer, on and using), aliases, from functions
       where, group by, having, order by, limit, offset
       except, intersect, union

expressions: subselects, in, row ctors, strings + dollar strings,
             integers, case, exists, boolean literals, null, arrays
             and subscripting (slightly limited), function calls,
             identifiers, cast(x as y), between (quite limited),
             substring(x from a for b)

also partially supports:
insert (with multiple values and select support), update, delete (all
three with returning)
create table, type, view, domain
all constraint types
drop function, table, domain, type, view
sort of skips copy statements instead of erroring
create function for sql and plpgsql functions

plpgsql statements:
        select into
        null
        continue
        perform
        execute
        assignment
        if
        return, return next, return query
        raise
        for (select and integer variants)
        while
        case statement

Many things are missing at the moment, in particular
  selects: cte, implicit joins
  joins in updates (delete from, update using)
  alter statements
  create and drop apart from table, view, domain, type, function
  transaction commands
  triggers and trigger functions
  loop statement
  error trapping
  cursors
This is a non-exhaustive list.

Expression support is patchy, should work pretty well for a lot of
simple stuff though. There is a strong possibility that for some
complex selects and expressions, the implicit precedence (that is,
bits without enclosing parenthesis) may parse in the wrong
direction. Please let me know if you encounter such an error.

== Type checking

Type checking supports a good subset of expressions and select
statements that the parser parses (and nothing else). Development work
is currently focused in this area, first to support most select
statements, then insert, update and delete, and finally other DML and
DDL.

== Try it and see approach

See the usage file where there are instructions on how to parse files,
and type check them to see how well the code supports your SQL source.

= Other current downsides:

The AST node types aren't well designed, in particular they contain
almost no location information, and no other annotations. Still
thinking about the best way to code this up.

Not much work has been done on correctly rejecting invalid SQL and not
much thought has been put into error messages and error reporting yet.

No thought has been given in respects to supporting other SQL dialects.

Future plans:

* use this system to develop a Lint-type checker for PL/pgSQL;

* support type checking simple SQL statements that you'd embed in
  Haskell code, including with ? placeholders, to support generating
  type safe wrappers (this placeholder version may be developed
  separately and designed to work on more than just PostGreSQL);

* possibly a lightweight code generation/ simple macro support to help
  with developing more robust PL/pgSQL code.
