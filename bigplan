targets for 0.5.0:

try to complete all basic typechecking for queryexpr and scalarexpr
add good enough typechecking for dml

expr typechecking todo:
list all the nodes under queryexpr which aren't typechecking yet:
scalar expr:
liftapp
queryexpr:
withqueryexpr
combineQueryExpr
values
funtrefs


not sure what else?

get parameterized query typechecking working well enough to use
maybe a good target is to get the tests for chaos working with
hssqlppp
parameterized queries? Another target is to get actual chaos game
working again
perhaps instead of having chaos embedded in the hssqlppp source code,
keep it all in separate project




don't work on ddl, plpgsql until this is sorted

possible targets for ddl, plpgsql is getting chaos typechecking again,
not sure if will target this for 0.5.0

have slidden on rewriting catalog and typeconversion, want to revist
these and rewrite properly, not sure whether to target this for 0.5.0,
but should probably be done at same time as getting chaos typechecking
again



tree sketch of target set of ag files

|-- Ddl
|   |-- CreateFunction.ag
|   |-- CreateTable.ag
|   |-- Drops.ag
|   |-- MiscCreates.ag
|   `-- Triggers.ag
|-- Dml
|   |-- Delete.ag
|   |-- Insert.ag
|   `-- Update.ag
|-- IDEnv.lhs
|-- Misc.ag
|-- ParameterizedStatements.ag
|-- Plpgsql
|   |-- Block.ag
|   `-- Plpgsql.ag
|-- QueryExprs
|   |-- QueryStatement.ag
|   |-- SelectLists.ag
|   `-- TableRefs.ag
|-- ScalarExprs.ag
|-- Statements.ag
maybe statements.ag is something like: ddlstatements, plpgsqlstatements?



provide some more hacking examples and support in the code:
add a new ctor to existing node
add a new kind of node
include simple instructions to fail gracefully at typechecking, so new
  syntax plus parsing and pretty printing can be easily added
review parsing code and try to make it clearer for the confusing bits,
  also the lexer


docs: write a preprocessor for the .hs produced from the .ag
want to add the LANGUAGE directives
and also add the haddock docs which get stripped out
and also convert some of the data type definitions to use record syntax
want to do this automatically, not sure how can parse the original ag
  though?

have explicit list of data types in astinternal that want to do this for
start with annotation as example:
find the complete definition of annotation in astinternal.hs
want to replace part of this, would like to avoid killing other
comments in astinternal.hs
find the original definition of annotation in the ag files
a) parse out the haddock string for each field
b) parse out the field name and type for each field
replace the def in astinternal with the replacement:
include haddock strings
use record syntax for data def

what to do this for:
ctor with lots of components in the ast -> particularly queryexpr
annotation is really poor without docs
