immediate work notes:

lots of improvements independent to the new typechecking have been
made deadline: 1st jan 2012, if the new typechecking isn't ready for
release 0.5.0, then backport the other fixes to master and release
that with the old typechecking
update: definitely don't want to do that, work hard to get crud +
parameterized statements typechecking reasonably well, then will do
release with some typechecking regressions in ddl, but no parsing
regressions

Urgency: want to get tpch typechecking again asap:
handle full trefaliases
onexpr trickiness
implicit casts
parameterized queries should be easy at this point
finish of tpch and check using

then dml
then ddl and plpgsql


tree sketch of target set of ag files

|-- Ddl
|   |-- CreateFunction.ag
|   |-- CreateTable.ag
|   |-- Drops.ag
|   |-- MiscCreates.ag
|   `-- Triggers.ag
|-- Dml
|   |-- Delete.ag
|   |-- Insert.ag
|   `-- Update.ag
|-- IDEnv.lhs
|-- Misc.ag
|-- ParameterizedStatements.ag
|-- Plpgsql
|   |-- Block.ag
|   `-- Plpgsql.ag
|-- QueryExprs
|   |-- QueryStatement.ag
|   |-- SelectLists.ag
|   `-- TableRefs.ag
|-- ScalarExprs.ag
|-- Statements.ag
maybe statements.ag is something like: ddlstatements, plpgsqlstatements?


get to stage where chaos can successfully type check

will be a lot more functional that current system at this point -
i.e. will check and flag a lot more things

fix syntax: split out plpgsql statements from regular
(so not going to split crud from ddl).

typeconversion needs a rewrite from scratch

--------------------

proper notes:

The big plan for sorting out a lot of the code.

The motivation is: how can the code be rewritten so that it isn't
embarrassingly bad (hopefully this is about code quality and not
ego...)

Rough overview:

overhaul the typechecking of identifiers

fix all the typechecking/ identifier/ catalog stuff so that it uses
names (not planning on respecting case sensitivity or schema
qualifications yet though).

work through and rewrite the test code, it's all a massive unreadable
unplanned mess. Want to make the tests much more orthogonal so each
test is more unit-y. (And when the syntax is updated, it doesn't
trigger mass rewriting all over the tests.)

get the chaos sql typechecking to the previous standard (back in
version 0.0.5 or something), clean up the use of h7c, and get the
documentation for this generating properly again

other possible ideas for next release:

typesafe wrapper, use for chaos tests, get chaos actually running also

provide some more hacking examples and support in the code:
add a new ctor to existing node
add a new kind of node
include simple instructions to fail gracefully at typechecking, so new
  syntax plus parsing and pretty printing can be easily added
review parsing code and try to make it clearer for the confusing bits,
  also the lexer



Details


The big ugly bit that is bothering me at the moment is the
fixupidentifiers/ typechecking. There are limitations to the current
approach, plus it's a bit weird.

The IDEnv code used for the fixup identifiers shows the way
forward. This will be extended to support types and typechecking in
the same style. Then the separate fixup identifiers pass can be
eliminated. The basic concept is that the IDEnv is a cut down tree
structure (an abstract ast?) which mirrors how the current environment
has been constructed, and then this can be queried to get the type/
qualifier/ star expansion out, and flag ambiguities, etc.

The only tree rewrite that fixup identifiers does that will stay in
the new system is expanding * in select lists and this will not be
optional when typechecking. The new typechecker will rewrite the * in
select lists when typechecking the select list.

The other rewrites will be optional during typechecking:

Adding full aliases to trefs where possible, and to subqueries - so
you get the column names as well as the 'table' name for the subquery.

Adding the qualifiers to identifier references explicitly.

does something wrong to handle * in aggregate calls, use a better fix
which doesn't rewrite the star

adds explicit aliases to select items in a select list
e.g. 'count(*)' is rewritten to 'count(*) as count'

Most of these are mainly useful for code which wants to
query/transform the ast.


docs: write a preprocessor for the .hs produced from the .ag
want to add the LANGUAGE directives
and also add the haddock docs which get stripped out
and also convert some of the data type definitions to use record syntax
want to do this automatically, not sure how can parse the original ag
  though?

start with annotation as example:
have explicit list of data types in astinternal that want to do this for
find the complete definition of annotation in astinternal.hs
want to replace part of this, would like to avoid killing other
comments in astinternal.hs
find the original definition of annotation in the ag files
a) parse out the haddock string for each field
b) parse out the field name and type for each field
replace the def in astinternal with the replacement:
include haddock strings
use record notation

what to do this for:
ctor with lots of components in the ast -> particularly queryexpr
annotation is really poor without docs
