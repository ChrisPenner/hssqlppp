Here are some limited notes on working on the source of hssqlppp:

Get the source
==============

Please use the code from git to develop with, one way to get it is to
run:

~~~~~
git clone https://github.com/JakeWheat/hssqlppp.git
~~~~~

Build the library
=================

Once you have the source, you can build the library using cabal

~~~~~
cabal configure && cabal build
~~~~~

Rebuild the generated files for the syntax
==========================================

If you edit the ag files, you need to rebuild AstInternal.hs. First
make sure you have uuagc installed (later versions of uuagc do not
work with the code in hssqlppp):

~~~~~
cabal install uuagc-0.9.39.1
~~~~~

Then use the makefile:

~~~~~
make src/Database/HsSqlPpp/Internals/AstInternal.hs
~~~~~

The makefile hasn't been heavily tested yet. If you have any problems
with unrecognised modules, the complete list of packages referenced is
in the Makefile (it may be missing build tools, such as cpphs, this
hasn't been checked yet).

To just rebuild the library in the usual way after editing the ag
files use:

~~~~~
make src/Database/HsSqlPpp/Internals/AstInternal.hs
cabal build
~~~~~

There is one further generated file, DefaultTemplate1Catalog.lhs. You
don't usually need to regenerate this, but this is how you do it:

~~~~~
make regenDefaultTemplate1Catalog
~~~~~

Build and run the tests
=======================

You can build and run the tests using the makefile:

~~~~~
make tests
~~~~~

or to just build the tests, then run manually:

~~~~~
make src-extra/tests/Tests
src-extra/tests/Tests
~~~~~

This also rebuilds from the ag files if needed. When working on the
source, this is usually the only compile command you need.

Background reading
==================

The main things used in hssqlppp are: parsec, uuagc, generics,
quasiquoting, pretty printing.

Parsec is used for parsing:
Here is a tutorial for parsec which is outdated but isn't too bad for
getting started: <http://legacy.cs.uu.nl/daan/parsec.html>

Chapter in Real World Haskell on parsec:
<http://book.realworldhaskell.org/read/using-parsec.html>

UUAGC is used to assist the typechecking. It is also used to define
the ast data types:
<http://www.cs.uu.nl/wiki/bin/view/HUT/AttributeGrammarSystem>

A tutorial, not that easy to follow:
<http://www.cs.uu.nl/wiki/bin/view/HUT/AttributeGrammarManual>

Pretty printing:
<http://hackage.haskell.org/package/pretty>

Generics:
Just uses a bit of this at the moment, mostly uses uniplate:
<http://community.haskell.org/~ndm/uniplate/>

Quasiquotation:
<http://www.haskell.org/haskellwiki/Quasiquotation>

The automated tests use test-framework and HUnit.

Source overview
===============

A good place to start is with the syntax, which is in uuagc format in
the file src/Database/HsSqlPpp/Internals/AstInternal.ag. The main
parsing code might also be interesting:
src/Database/HsSqlPpp/Parsing/ParserInternal.lhs. There is also a
separate lexer: src/Database/HsSqlPpp/Parsing/Lexing.lhs. Both use
parsec. There is no particular reason behind this design, maybe
something else for the lexer, or a different parser library would work
better.

To get stuck into the typechecking, a good place to start is the
scalar expression typechecking code, which is in
src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag. There is
no separation in the code between the syntax and semantics.

Other interesting files are:
src/Database/HsSqlPpp/Internals/Catalog/CatalogInternals.lhs, which
handles the catalog datatype and implements a fair bit of the type
checking support, and src/Database/HsSqlPpp/Internals/IDEnv.lhs which
contains most of the rest of the type checking support, works with the
identifiers in the env which aren't part of the catalog.

There are a few index.txt files in the source which give a little info
on what is in the various folders.

A short guide on [adding Syntax](adding_syntax.txt.html).
