Here are some limited notes on working on the source of hssqlppp:

Get the source
==============

Please use the code from git to develop with, one way to get it is to
run:

~~~~~
git clone https://github.com/JakeWheat/hssqlppp.git
~~~~~

Build the library
=================

Once you have the source, you can build the library using cabal

~~~~~
cabal configure && cabal build
~~~~~

Rebuild the generated files for the syntax
==========================================

If you edit the ag files, use the makefile

~~~~~
make src/Database/HsSqlPpp/Internals/AstAnti.hs
~~~~~

The makefile doesn't work that well at the moment.

There is one further generated file, DefaultTemplate1Catalog.lhs. You
don't usually need to regenerate this, but you can in the following
way (you will need Postgres installed and HDBC-Postgres).

~~~~~
make regenDefaultTemplate1Catalog
~~~~~

Build and run the tests
=======================

You can build and run the tests using the makefile:

~~~~~
make tests
~~~~~

or to just build the tests, then run manually:

~~~~~
make src-extra/tests/Tests
src-extra/tests/Tests
~~~~~

There is also a cabal file, which shows the package dependencies:
first install the hssqlppp library using cabal, then use:

~~~~~
cd src-extra/tests
cabal configure && cabal build
dist/build/Tests/Tests
~~~~~

Background reading
==================

The main components used in hssqlppp are: parsec, uuagc, generics,
quasiquoting, pretty printing.

Parsec is used for parsing:
Here is a outdated tutorial for parsec which isn't too bad for getting
started: <http://legacy.cs.uu.nl/daan/parsec.html>

Chapter in Real World Haskell on parsec:
<http://book.realworldhaskell.org/read/using-parsec.html>

UUAGC is used to assist the typechecking. It is also used to define
the ast data types:
<http://www.cs.uu.nl/wiki/bin/view/HUT/AttributeGrammarSystem>

A tutorial, not that easy to follow:
<http://www.cs.uu.nl/wiki/bin/view/HUT/AttributeGrammarManual>

Pretty printing:
<http://hackage.haskell.org/package/pretty>

Generics:
Just uses a bit of this at the moment, mostly uses uniplate:
<http://community.haskell.org/~ndm/uniplate/>

Quasiquotation:
<http://www.haskell.org/haskellwiki/Quasiquotation>

The automated tests use test-framework and HUnit.

Source overview
===============

weird bits:

* uuagc
* astanti
* lexing/parsing split (uses parsec to lex, then parsec again to
  parse)
* typechecker: fixupidentifiers

TODO: make this less cryptic

A short guide on [adding Syntax](adding_syntax.txt.html).
