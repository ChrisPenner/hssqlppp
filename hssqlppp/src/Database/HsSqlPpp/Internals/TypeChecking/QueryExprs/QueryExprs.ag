
{-
basic query expression type checking:

take the environment produced by the tref
feed it into the selectlist

take the type produced in the select list and pass it up

-}



include "TypeChecking/QueryExprs/TableRefs.ag"
include "TypeChecking/QueryExprs/SelectLists.ag"

attr QueryExpr
  syn upType :: {Maybe [(Text,Type)]}

--support for correlated subqueries
attr QueryExpr
  inh outerDownEnv :: {Maybe Environment}
sem Statement
  | QueryStatement ex.outerDownEnv = Nothing
sem TableRef
  | SubTref sel.outerDownEnv = Nothing
sem WithQuery
  | WithQuery ex.outerDownEnv = Nothing
sem InList
  | InQueryExpr sel.outerDownEnv = Nothing

sem WithQuery
  | WithQuery ann.tpe = Left []

sem QueryExpr
    | Select
        selSelectList.downEnv = @selTref.upEnv
        selGroupBy.downEnv = @selTref.upEnv
        selHaving.downEnv = @selTref.upEnv
{-
typechecking order by:
order by can reference all the identifiers that the select list can
additionally, can reference the output columns by name or index

the punchline is that you can reference an output column by name, but
not as part of an expression:

'order by a' orders by an output column named a or if there isn't one,
a tref column named a. if you write 'order by a + 1', and there is an
output column named a and a tref column named a, then it uses the tref
column

so which a you refer to depends on the syntactic context even through
the environment is the same in both cases.

Going to punt on trying to typecheck that.

-}
        selOrderBy.downEnv = orderByEnvironment @selSelectList.upEnv @selTref.upEnv
        -- wrap the names and types in a composite which
        -- fits with the annotation type
        loc.tpe = maybe (Left []) (Right . CompositeType) @selSelectList.upType
        -- pass the fieldnames and types up in the uptype attribute without
        -- wrapping since everything that wants to use it will have to
        -- unwrap it straight after, so the tpe and the uptype aren't the same
        -- but are equivalent
        lhs.upType = @selSelectList.upType
        -- correlated subquery support - combine the identifiers
        -- coming from outside the query expr
        selWhere.downEnv = maybe @selTref.upEnv
                            (\e -> createCorrelatedSubqueryEnvironment e @selTref.upEnv)
                            @lhs.outerDownEnv

sem QueryExpr
    | Select CombineQueryExpr Values WithQueryExpr
        loc.tpe :: {Either [TypeError] Type}

-- temp

sem QueryExpr
    | Values WithQueryExpr
        loc.tpe = Left []
    | CombineQueryExpr
        loc.tpe =
          do
          a <- maybe (Left []) Right @cqQe0.upType
          b <- maybe (Left []) Right @cqQe1.upType
          -- todo: run resolve resultset type on each column and put in implicit cast info
          when (map snd a /= map snd b) $ Left [IncompatibleUnionTypes (CompositeType a) (CompositeType b)]
          return $ CompositeType a
          -- todo: don't wrap then unwrap composite type
        lhs.upType = either (const Nothing) (\(CompositeType ts) -> Just ts) @loc.tpe

attr MaybeBoolExpr ScalarExprDirectionPairList ScalarExprDirectionPair
     JoinExpr InList
  inh downEnv :: Environment

sem InList
    | InList InQueryExpr
        loc.tpe = Left []

sem JoinExpr
    | JoinOn JoinUsing
        loc.tpe = Left []
