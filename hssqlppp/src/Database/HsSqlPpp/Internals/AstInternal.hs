

{-# LANGUAGE TupleSections,ScopedTypeVariables,DeriveDataTypeable,OverloadedStrings #-}
-- UUAGC 0.9.39.1 (hssqlppp/src/Database/HsSqlPpp/Internals/AstInterna)
module Database.HsSqlPpp.Internals.AstInternal(
    --from the ag files:
    --ast nodes
    Statement (..)
   ,QueryExpr (..)
   ,WithQueryList
   ,WithQuery(..)
   ,FnBody (..)
   ,SetClause (..)
   ,SetClauseList
   ,TableRef (..)
   ,JoinExpr (..)
   ,JoinType (..)
   ,JoinHint (..)
   ,SelectList (..)
   ,SelectItem (..)
   ,CopyFromSource (..)
   ,CopyToSource(..)
   ,CopyOption(..)
   ,AttributeDef (..)
   ,RowConstraint (..)
   ,AlterTableAction(..)
   ,Constraint (..)
   ,TypeAttributeDef (..)
   ,ParamDef (..)
   ,VarDef (..)
   ,RaiseType (..)
   ,CombineType (..)
   ,Volatility (..)
   ,Language (..)
   ,TypeName (..)
   ,DropType (..)
   ,Cascade (..)
   ,Direction (..)
   ,Distinct (..)
   ,Natural (..)
   ,IfExists (..)
   ,Replace(..)
   ,RestartIdentity (..)
   ,ScalarExpr (..)
   ,Name(..)
   ,nameComponents
   ,NameComponent(..)
   ,ncStr
   ,IntervalField(..)
   ,ExtractField(..)
   ,FrameClause(..)
   ,InList (..)
   ,LiftFlavour(..)
   ,TriggerWhen(..)
   ,TriggerEvent(..)
   ,TriggerFire(..)
   ,StatementList
   ,ScalarExprListStatementListPairList
   ,ScalarExprListStatementListPair
   ,ScalarExprList
   ,ParamDefList
   ,AttributeDefList
   ,ConstraintList
   ,TypeAttributeDefList
   ,TypeNameList
   ,NameTypeNameListPair
   ,NameTypeNameListPairList
   ,ScalarExprStatementListPairList
   --,SetClauseList
   ,CaseScalarExprListScalarExprPairList
   ,MaybeScalarExpr
   ,TableRefList
   ,ScalarExprListList
   ,SelectItemList
   ,OnExpr
   ,RowConstraintList
   ,VarDefList
   ,ScalarExprStatementListPair
   ,CaseScalarExprListScalarExprPair
   ,ScalarExprDirectionPair
   ,ScalarExprDirectionPairList
   ,MaybeBoolExpr
   ,MaybeSelectList
   ,SetValue(..)
   ,AlterTableActionList
   ,NameComponentList
   ,MaybeNameComponentList
   -- typechecking
   ,typeCheckStatements
   ,typeCheckParameterizedStatement
   ,typeCheckScalarExpr
   ,typeCheckQueryExpr
   ,TypeCheckingFlags(..)
   ,defaultTypeCheckingFlags
   ,addExplicitCasts
   -- annotation
   ,Annotation(..)
   ,TypeExtra(..)
   ,SourcePosition
   ,ParameterizedStatementType
   ,getAnnotation
   ,updateAnnotation
   ,emptyAnnotation
   ,makeSelect
   ,canonicalizeTypeNames
) where

import Data.Maybe
import Data.Either
import Data.List
import Control.Applicative
import Data.Data
import Data.Char
import Control.Monad.State
import Control.Arrow

import Data.Generics
import Data.Generics.Uniplate.Data
import Debug.Trace
import Text.Groom


import Database.HsSqlPpp.Internals.TypesInternal

import Database.HsSqlPpp.Internals.TypeChecking.TypeConversion
import Database.HsSqlPpp.Internals.TypeChecking.Environment
import Database.HsSqlPpp.Internals.Catalog.CatalogInternal
import Database.HsSqlPpp.Utils.Utils
import Database.HsSqlPpp.SqlDialect
import Data.Text (Text)
import qualified Data.Text as T
import qualified Data.Text.Lazy as LT



{-# LINE 355 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

nameComponents :: Name -> [NameComponent]
nameComponents (Name _ is) = is
-- todo: don't use error
nameComponents (AntiName _) = error "tried to get namecomponents of antiname"
{-# LINE 143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}



data LiftFlavour = LiftAny | LiftAll
                   deriving (Show,Eq,Typeable,Data)

data Direction = Asc | Desc
                 deriving (Show,Eq,Typeable,Data)

-- todo: rename Dupes to all?
data Distinct = Distinct | All
                deriving (Show,Eq,Typeable,Data)

-- maybe should improve this, since you can have at least union
-- distinct and union all just like select distinct and select all

data CombineType = Except | Union | Intersect | UnionAll
                   deriving (Show,Eq,Typeable,Data)

data IntervalField = IntervalYear
                   | IntervalMonth
                   | IntervalDay
                   | IntervalHour
                   | IntervalMinute
                   | IntervalSecond
                   | IntervalYearToMonth
                   | IntervalDayToHour
                   | IntervalDayToMinute
                   | IntervalDayToSecond
                   | IntervalHourToMinute
                   | IntervalHourToSecond
                   | IntervalMinuteToSecond
                     deriving (Show,Eq,Typeable,Data)

data ExtractField = ExtractCentury
                  | ExtractDay
                  | ExtractDecade
                  | ExtractDow
                  | ExtractDoy
                  | ExtractEpoch
                  | ExtractHour
                  | ExtractIsodow
                  | ExtractIsoyear
                  | ExtractMicroseconds
                  | ExtractMillennium
                  | ExtractMilliseconds
                  | ExtractMinute
                  | ExtractMonth
                  | ExtractQuarter
                  | ExtractSecond
                  | ExtractTimezone
                  | ExtractTimezoneHour
                  | ExtractTimezoneMinute
                  | ExtractWeek
                  | ExtractYear
                    deriving (Show,Eq,Typeable,Data)

-- todo: this needs fixing, it is currently based on limited frame options
data FrameClause = FrameUnboundedPreceding
                 | FrameUnboundedFull
                 | FrameRowsUnboundedPreceding
                   deriving (Show,Eq,Typeable,Data)
{-# LINE 208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data JoinType = Inner | LeftOuter| RightOuter | FullOuter | Cross
                deriving (Show,Eq,Typeable,Data)
data JoinHint = Loop | Hash | Merge
                deriving (Show,Eq,Typeable,Data)
data Natural = Natural | Unnatural
               deriving (Show,Eq,Typeable,Data)
{-# LINE 218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 535 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

-- | 'default' valued select, use for creating select values
--
-- > makeSelect :: QueryExpr
-- > makeSelect = Select
-- >              {ann = emptyAnnotation
-- >              ,selDistinct = All
-- >              ,selSelectList = (SelectList emptyAnnotation [])
-- >              ,selTref = []
-- >              ,selWhere = Nothing
-- >              ,selGroupBy = []
-- >              ,selHaving = Nothing
-- >              ,selOrderBy = []
-- >              ,selLimit = Nothing
-- >              ,selOffset = Nothing}
--
-- On its own, it isn't valid syntax: to use it you have to replace
-- the select list at minimum
--
-- use something like this
--
-- > s = makeSelect {selSelectList = sl [se $ i "a"]
-- >                ,selTref = [tref "t"]}
-- >     where
-- >         a = emptyAnnotation
-- >         sl = SelectList a
-- >         se = SelExp a
-- >         i = Identifier a
-- >         tref t = Tref a (Name a [Nmc t])

makeSelect :: QueryExpr
makeSelect = Select
             {ann = emptyAnnotation
             ,selDistinct = All
             ,selSelectList = (SelectList emptyAnnotation [])
             ,selTref = []
             ,selWhere = Nothing
             ,selGroupBy = []
             ,selHaving = Nothing
             ,selOrderBy = []
             ,selLimit = Nothing
             ,selOffset = Nothing}
{-# LINE 263 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 810 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data CopyFromSource = CopyFilename String
                    | Stdin
                      deriving (Show,Eq,Typeable,Data)
data CopyToSource = CopyTable Name [NameComponent]
                  | CopyQuery QueryExpr
                    deriving (Show,Eq,Typeable,Data)
data CopyOption = CopyFormat String
                | CopyDelimiter String
                  deriving (Show,Eq,Typeable,Data)

{-# LINE 277 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data SetValue
    = SetStr Annotation String
    | SetId Annotation String
    | SetNum Annotation Double
      deriving (Show,Eq,Typeable,Data)


data TriggerWhen = TriggerBefore | TriggerAfter
                   deriving (Show,Eq,Typeable,Data)
data TriggerEvent = TInsert| TUpdate | TDelete | AntiTriggerEvent String
                    deriving (Show,Eq,Typeable,Data)
data TriggerFire = EachRow | EachStatement
                   deriving (Show,Eq,Typeable,Data)

data DropType = Table
              | Domain
              | View
              | Type
              | Database
                deriving (Show,Eq,Typeable,Data)

data Cascade = Cascade | Restrict
               deriving (Show,Eq,Typeable,Data)



data IfExists = Require | IfExists
                deriving (Show,Eq,Typeable,Data)


data RestartIdentity = RestartIdentity | ContinueIdentity
                       deriving (Show,Eq,Typeable,Data)
{-# LINE 313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data Replace = Replace | NoReplace
               deriving (Show,Eq,Typeable,Data)

data Volatility = Volatile | Stable | Immutable
                  deriving (Show,Eq,Typeable,Data)

-- todo: fix the fn body to support to support other languages
-- just as as string for now
-- probably change Language to be a string also

data Language = Sql | Plpgsql
                deriving (Show,Eq,Typeable,Data)
{-# LINE 329 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data RaiseType = RNotice | RException | RError
                 deriving (Show,Eq,Typeable,Data)

{-# LINE 336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1058 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}


-- | run canonicalizeTypeName on all the TypeName nodes in an ast
canonicalizeTypeNames :: Data a => a -> a
canonicalizeTypeNames =
   (transformBi $ \x ->
       case x of
         ScalarType s -> ScalarType $ canonicalizeTypeName s
         x' -> x')
   . (transformBi $ \x ->
       case x of
         SimpleTypeName a tn -> SimpleTypeName a (c tn)
         PrecTypeName a tn i -> PrecTypeName a (c tn) i
         Prec2TypeName a tn i i1 -> Prec2TypeName a (c tn) i i1
         x' -> x')
   where
     c (Name a [Nmc nc]) = Name a [Nmc $ T.unpack $ canonicalizeTypeName $ T.pack nc]
     c z = z

{-# LINE 358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 14 "hssqlppp/src/Database/HsSqlPpp/Internals/Annotation.ag" #-}

-- | Represents a source file position, usually set by the parser.
type SourcePosition = (FilePath,Int,Int)

-- | Statement type is used for getting type information for a
-- parameterized statement. The first part is the args that the
-- parameterized statement needs, and the second is the names and types
-- of the output columns. No way to signal that a statement returns
-- exactly one row at the moment
type ParameterizedStatementType = ([Type],[(String,Type)])

-- | Quick fix to add precision and nullable information to the
-- annotation types. This approach should be revisited, maybe this
-- information should be in the Type type?
data TypeExtra = TypeExtra {teType :: Type
                           ,tePrecision :: Maybe Int
                           ,teScale :: Maybe Int
                           ,teNullable :: Bool}
               deriving (Eq,Show,Typeable,Data)
mkTypeExtra :: Type -> TypeExtra
mkTypeExtra t = TypeExtra t Nothing Nothing True

{-# LINE 383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 57 "hssqlppp/src/Database/HsSqlPpp/Internals/Annotation.ag" #-}


--some simple wrappers around uniplate for internal use. I'm not sure
--which of these are actually used

-- | An annotation value with no information.
emptyAnnotation :: Annotation
emptyAnnotation = Annotation Nothing Nothing [] Nothing []

-- | get the annotation for the root element of the tree passed
getAnnotation :: Data a => a -> Annotation
getAnnotation = head . childrenBi

--don't know how to do this one with uniplate

-- | Update the first annotation in a tree using the function supplied
updateAnnotation :: Data a => (Annotation -> Annotation) -> a -> a
updateAnnotation f = gmapT (mkT f)

{-# LINE 405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 3 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}


-- | some options when typechecking
data TypeCheckingFlags =
    TypeCheckingFlags
    { -- | add qualifiers to unqualified ids where possible
     tcfAddQualifiers :: Bool
     -- | add full aliases to every tableref and subselect
    ,tcfAddFullTablerefAliases :: Bool
     -- | add explicit aliases to all select items
    ,tcfAddSelectItemAliases :: Bool
     -- | expand stars in select lists to explicit list columns
    ,tcfExpandStars :: Bool
    ,tcfDialect :: SQLSyntaxDialect}
    deriving (Show,Eq)


-- | reasonable defaults for type checking, doesn't add anything
-- optional
defaultTypeCheckingFlags :: TypeCheckingFlags
defaultTypeCheckingFlags =
    TypeCheckingFlags
    {tcfAddQualifiers = False
    ,tcfAddFullTablerefAliases = False
    ,tcfAddSelectItemAliases = False
    ,tcfExpandStars = False
    ,tcfDialect = PostgreSQLDialect}

-- | Typechecks the ast, and returns the updated catalog (which
-- includes changes from any ddl statements in the ast).
typeCheckStatements :: TypeCheckingFlags -> Catalog -> [Statement] -> (Catalog,[Statement])
typeCheckStatements f cat sts =
    let t = sem_Root (Root sts)
        ta = wrap_Root t Inh_Root {cat_Inh_Root = cat
                                  ,flags_Inh_Root = f
                                  {-,lib_Inh_Root = emptyBindings
                                  ,idenv_Inh_Root = emptyIDEnv "tcs"-}}
        tl = annotatedTree_Syn_Root ta
        cat1 = cat --producedCat_Syn_Root ta
    in case tl of
         Root r -> (cat1,fixTree r)
-- | Typecheck a query expr
typeCheckQueryExpr :: TypeCheckingFlags -> Catalog -> QueryExpr -> QueryExpr
typeCheckQueryExpr f cat qe =
   let (_,[QueryStatement _ qe']) = typeCheckStatements f cat [QueryStatement emptyAnnotation qe]
   in qe'

-- | Not working yet. Typechecks a statement possibly containing ?
-- placeholders. These are annotated with the 'inferred type', and the
-- stType annotation on the return value can be used to get this info
-- easily. Returns Left if the statement is not a query,insert,update or delete
-- statement
typeCheckParameterizedStatement :: TypeCheckingFlags -> Catalog -> Statement -> Either String Statement
typeCheckParameterizedStatement f cat st =
    case st of
      QueryStatement _ _ -> tc
      Insert _ _ _ _ _ -> tc
      Update _ _ _ _ _ _ -> tc
      Delete _ _ _ _ _ -> tc
      _ -> Left "requires select, update, insert or delete statement"
    where
      tc = let tl = typeCheckStatements f cat [st]
           in case tl of
                (_,[st1]) -> Right st1
                _ -> error "impossible happened in typeCheckPS!"


-- | type check a scalar expr
typeCheckScalarExpr :: TypeCheckingFlags -> Catalog -> ScalarExpr -> ScalarExpr
typeCheckScalarExpr f cat ex =
    let t = sem_ScalarExprRoot (ScalarExprRoot ex)
        rt = (annotatedTree_Syn_ScalarExprRoot
              (wrap_ScalarExprRoot t Inh_ScalarExprRoot {cat_Inh_ScalarExprRoot = cat
                                                        ,flags_Inh_ScalarExprRoot = f
                                                        {-,lib_Inh_ScalarExprRoot = emptyBindings
                                                        ,idenv_Inh_ScalarExprRoot = emptyIDEnv "t
cse"-}}))
    in case rt of
         ScalarExprRoot e -> fixTree e

{-# LINE 488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}


-- | run on a typechecked tree. Finds all the places where an implicit
-- cast has been used in the typechecking and inserts an explicit cast
addExplicitCasts :: Data a => a -> a
addExplicitCasts = transformBi removeDoubleCasts . transformBi addCast
  where
    addCast :: ScalarExpr -> ScalarExpr
    addCast e = fromMaybe e $ do
                  t <- anImplicitCast (getAnnotation e)
                  n <- nameOfType $ teType t
                  return $ Cast emptyAnnotation e n
    -- addCast isn't very smart, so remove any unneeded casts
    -- that it has inserted. Only do this when have two
    -- nested casts which cast to the same type, so this
    -- shouldn't cause problems with sane sql
    removeDoubleCasts :: ScalarExpr -> ScalarExpr
    removeDoubleCasts e = case e of
      (Cast a (Cast _ e' t1) t)
         | resetAnnotations t1 == resetAnnotations t -> Cast a e' t
      e' -> e'
    resetAnnotations = transformBi (const emptyAnnotation)

nameOfType :: Type -> Maybe TypeName
nameOfType (ScalarType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType (DomainType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType (EnumType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType (NamedCompositeType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType _ = Nothing

-- hack for various fixups
fixTree :: Data a => a -> a
fixTree = fixMssqlDates

{-


fix up datediff,datepart for sql server: set the type for the first
argument to type in if it is in the acceptable list

todo: make this approach more generic

plan:
add a new type called pseudo enum

add functions like datepart to the normal catalog to be looked up in
the normal way. type them using the pseudo enum for the identifiers which aren't really identifiers, just symbols

fix the environment passed to these identifiers during type checking
to look up the correct set of possible values so there are no bogus
type errors introduced which then need to be fixed layer

store the list of different pseudo enum collections and the possible
values for each somewhere (in the catalog?) and link functions like
datepart to the correct lists


-}

fixMssqlDates :: Data a => a -> a
fixMssqlDates = transformBi $ \x -> case x of
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a,b]
    | map toLower fn == "datediff"
    , map toLower tnn `elem` ["hour"] ->
      App aa nm [Identifier (nai ai) tn,a,b]
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a]
    | map toLower fn == "datepart"
    , map toLower tnn `elem` ["day","month","year","hour",
      	  	      	      "yyyy","mm","dd","dy","ww","hh","mi","ss","ms"] ->
      App aa nm [Identifier (nai ai) tn,a]
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a,b]
    | map toLower fn == "dateadd"
    , map toLower tnn `elem` ["day","month","year"] ->
      App aa nm [Identifier (nai ai) tn,a,b]
  x' -> x'
  where
      nai ai = ai {anType = Just $ mkTypeExtra typeInt
                  ,anErrs = []}

<<<<<<< HEAD
{-# LINE 569 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
{-# LINE 558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon

{-# LINE 223 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}

tcAppLike :: SQLSyntaxDialect -> Catalog -> Name -> [Maybe Type] -> Either [TypeError] ([Type],Type)

tcAppLike d cat anm@(Name _ [Nmc dd]) [_,a0,a1]
    | map toLower dd == "datediff" = do
  -- dodgy hack for datediff
  tys <- mapM (maybe (Left []) Right) [a0,a1]
  let Name _ ns = anm
  (ats,rt) <- matchApp d cat ns (typeInt:tys)
  return (ats,rt)
tcAppLike d cat anm@(Name _ [Nmc dd]) [_,a0]
    | map toLower dd == "datepart" = do
  tys <- mapM (maybe (Left []) Right) [a0]
  let Name _ ns = anm
  (ats,rt) <- matchApp d cat ns (typeInt:tys)
  return (ats,rt)
tcAppLike d cat anm@(Name _ [Nmc dd]) [_,a0,a1]
    | map toLower dd == "dateadd" = do
  tys <- mapM (maybe (Left []) Right) [a0,a1]
  let Name _ ns = anm
  (ats,rt) <- matchApp d cat ns (typeInt:tys)
  return (ats,rt)


tcAppLike d cat anm args = do
  -- get the types of the arguments
  -- then lookup in TypeConversion.matchApp
  tys <- mapM (maybe (Left []) Right) args
  let Name _ ns = anm
  (ats,rt) <- matchApp d cat ns tys
  return (ats,rt)

<<<<<<< HEAD
{-# LINE 604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
{-# LINE 593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon

{-# LINE 193 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}


-- | thet name to choose for a column in a select list which doesn't
-- have an explicit name - these are postgresql's rules
columnName :: ScalarExpr -> NameComponent
columnName (Identifier _ i) = last $ nameComponents i
columnName (App _ (Name _ ncs) _) = last ncs
columnName (Cast _ _ (SimpleTypeName _ (Name _ ncs))) = last ncs
columnName (WindowApp _ (App _ (Name _ ncs) _) _ _ _) = last ncs
columnName (AggregateApp _ _ (App _ (Name _ ncs) _) _) = last ncs
columnName _ = QNmc "?column?"
<<<<<<< HEAD
{-# LINE 618 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
{-# LINE 607 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
-- AlterTableAction --------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative AddConstraint:
         child ann            : Annotation 
         child con            : Constraint 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterColumnDefault:
         child ann            : Annotation 
         child nm             : {NameComponent}
         child def            : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterTableAction  = AddConstraint (Annotation ) (Constraint ) 
                       | AlterColumnDefault (Annotation ) (NameComponent) (ScalarExpr ) 
                       deriving ( Data,Eq,Show,Typeable)
-- cata
sem_AlterTableAction :: AlterTableAction  ->
                        T_AlterTableAction 
sem_AlterTableAction (AddConstraint _ann _con )  =
    (sem_AlterTableAction_AddConstraint (sem_Annotation _ann ) (sem_Constraint _con ) )
sem_AlterTableAction (AlterColumnDefault _ann _nm _def )  =
    (sem_AlterTableAction_AlterColumnDefault (sem_Annotation _ann ) _nm (sem_ScalarExpr _def ) )
-- semantic domain
type T_AlterTableAction  = Catalog ->
                           TypeCheckingFlags ->
                           (Maybe Type) ->
                           ( AlterTableAction ,AlterTableAction )
data Inh_AlterTableAction  = Inh_AlterTableAction {cat_Inh_AlterTableAction :: Catalog,flags_Inh_AlterTableAction :: TypeCheckingFlags,imCast_Inh_AlterTableAction :: (Maybe Type)}
data Syn_AlterTableAction  = Syn_AlterTableAction {annotatedTree_Syn_AlterTableAction :: AlterTableAction ,originalTree_Syn_AlterTableAction :: AlterTableAction }
wrap_AlterTableAction :: T_AlterTableAction  ->
                         Inh_AlterTableAction  ->
                         Syn_AlterTableAction 
wrap_AlterTableAction sem (Inh_AlterTableAction _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_AlterTableAction _lhsOannotatedTree _lhsOoriginalTree ))
sem_AlterTableAction_AddConstraint :: T_Annotation  ->
                                      T_Constraint  ->
                                      T_AlterTableAction 
sem_AlterTableAction_AddConstraint ann_ con_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterTableAction 
              _lhsOoriginalTree :: AlterTableAction 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _conOcat :: Catalog
              _conOflags :: TypeCheckingFlags
              _conOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _conIannotatedTree :: Constraint 
              _conIoriginalTree :: Constraint 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddConstraint _annIannotatedTree _conIannotatedTree
<<<<<<< HEAD
                   {-# LINE 691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddConstraint _annIoriginalTree _conIoriginalTree
<<<<<<< HEAD
                   {-# LINE 697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: AlterTableAction.AddConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _conOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _conOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _conOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _conIannotatedTree,_conIoriginalTree) =
                  con_ _conOcat _conOflags _conOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_AlterTableAction_AlterColumnDefault :: T_Annotation  ->
                                           NameComponent ->
                                           T_ScalarExpr  ->
                                           T_AlterTableAction 
sem_AlterTableAction_AlterColumnDefault ann_ nm_ def_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterTableAction 
              _lhsOoriginalTree :: AlterTableAction 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _defOcat :: Catalog
              _defOdownEnv :: Environment
              _defOexpectedType :: (Maybe Type)
              _defOflags :: TypeCheckingFlags
              _defOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _defIannotatedTree :: ScalarExpr 
              _defIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _defIoriginalTree :: ScalarExpr 
              _defIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterColumnDefault _annIannotatedTree nm_ _defIannotatedTree
<<<<<<< HEAD
                   {-# LINE 787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterColumnDefault _annIoriginalTree nm_ _defIoriginalTree
<<<<<<< HEAD
                   {-# LINE 793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: AlterTableAction.AlterColumnDefault.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _defOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 824 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _defOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: AlterTableAction.AlterColumnDefault.def.downEnv"
<<<<<<< HEAD
                   {-# LINE 841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 830 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _defOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: AlterTableAction.AlterColumnDefault.def.expectedType"
<<<<<<< HEAD
                   {-# LINE 847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 836 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _defOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _defOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _defIannotatedTree,_defIcolExprs,_defIoriginalTree,_defIupType) =
                  def_ _defOcat _defOdownEnv _defOexpectedType _defOflags _defOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterTableActionList ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : AlterTableAction 
         child tl             : AlterTableActionList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type AlterTableActionList  = [AlterTableAction ]
-- cata
sem_AlterTableActionList :: AlterTableActionList  ->
                            T_AlterTableActionList 
sem_AlterTableActionList list  =
    (Prelude.foldr sem_AlterTableActionList_Cons sem_AlterTableActionList_Nil (Prelude.map sem_AlterTableAction list) )
-- semantic domain
type T_AlterTableActionList  = Catalog ->
                               TypeCheckingFlags ->
                               (Maybe Type) ->
                               ( AlterTableActionList ,AlterTableActionList )
data Inh_AlterTableActionList  = Inh_AlterTableActionList {cat_Inh_AlterTableActionList :: Catalog,flags_Inh_AlterTableActionList :: TypeCheckingFlags,imCast_Inh_AlterTableActionList :: (Maybe Type)}
data Syn_AlterTableActionList  = Syn_AlterTableActionList {annotatedTree_Syn_AlterTableActionList :: AlterTableActionList ,originalTree_Syn_AlterTableActionList :: AlterTableActionList }
wrap_AlterTableActionList :: T_AlterTableActionList  ->
                             Inh_AlterTableActionList  ->
                             Syn_AlterTableActionList 
wrap_AlterTableActionList sem (Inh_AlterTableActionList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_AlterTableActionList _lhsOannotatedTree _lhsOoriginalTree ))
sem_AlterTableActionList_Cons :: T_AlterTableAction  ->
                                 T_AlterTableActionList  ->
                                 T_AlterTableActionList 
sem_AlterTableActionList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterTableActionList 
              _lhsOoriginalTree :: AlterTableActionList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: AlterTableAction 
              _hdIoriginalTree :: AlterTableAction 
              _tlIannotatedTree :: AlterTableActionList 
              _tlIoriginalTree :: AlterTableActionList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 936 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 937 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_AlterTableActionList_Nil :: T_AlterTableActionList 
sem_AlterTableActionList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterTableActionList 
              _lhsOoriginalTree :: AlterTableActionList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 1002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 1008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 1014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 1020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- Annotation --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
         tpe                  : Either [TypeError] Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Annotation:
         child anSrc          : {Maybe SourcePosition}
         child anType         : {Maybe TypeExtra}
         child anErrs         : {[TypeError]}
         child anImplicitCast : {Maybe TypeExtra}
         child anCatUpd       : {[CatalogUpdate]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}

-- | Annotation type - one of these is attached to most of the
-- data types used in the ast.
-- the fields in order are:
data Annotation = Annotation {
                             -- | source position for this node
                             anSrc :: ( Maybe SourcePosition)
                             -- | type of the node, 'Nothing' if the tree hasn't been typechecked or if a type error prevents determining the type
                             ,anType :: ( Maybe TypeExtra)
                             -- | any type errors
                             ,anErrs :: ( [TypeError])
                             -- | if an implicit cast is needed between this node an its parent, this the target type of cast. If no implicit cast is needed, this is Nothing
                             ,anImplicitCast :: ( Maybe TypeExtra)
                             -- | any catalog updates that a statement produces, used only for ddl Statements
                             ,anCatUpd :: ( [CatalogUpdate])

    } deriving (Eq,Show,Data,Typeable)

-- cata
sem_Annotation :: Annotation  ->
                  T_Annotation 
sem_Annotation (Annotation _anSrc _anType _anErrs _anImplicitCast _anCatUpd )  =
    (sem_Annotation_Annotation _anSrc _anType _anErrs _anImplicitCast _anCatUpd )
-- semantic domain
type T_Annotation  = Catalog ->
                     TypeCheckingFlags ->
                     (Maybe Type) ->
                     (Either [TypeError] Type) ->
                     ( Annotation ,Annotation )
data Inh_Annotation  = Inh_Annotation {cat_Inh_Annotation :: Catalog,flags_Inh_Annotation :: TypeCheckingFlags,imCast_Inh_Annotation :: (Maybe Type),tpe_Inh_Annotation :: (Either [TypeError] Type)}
data Syn_Annotation  = Syn_Annotation {annotatedTree_Syn_Annotation :: Annotation ,originalTree_Syn_Annotation :: Annotation }
wrap_Annotation :: T_Annotation  ->
                   Inh_Annotation  ->
                   Syn_Annotation 
wrap_Annotation sem (Inh_Annotation _lhsIcat _lhsIflags _lhsIimCast _lhsItpe )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast _lhsItpe 
     in  (Syn_Annotation _lhsOannotatedTree _lhsOoriginalTree ))
sem_Annotation_Annotation :: (Maybe SourcePosition) ->
                             (Maybe TypeExtra) ->
                             ([TypeError]) ->
                             (Maybe TypeExtra) ->
                             ([CatalogUpdate]) ->
                             T_Annotation 
sem_Annotation_Annotation anSrc_ anType_ anErrs_ anImplicitCast_ anCatUpd_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsItpe ->
         (let _lhsOannotatedTree :: Annotation 
              _lhsOoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag"(line 116, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   let t = either (const Nothing) Just _lhsItpe
                       es = either id (const []) _lhsItpe
<<<<<<< HEAD
                   in Annotation anSrc_ (mkTypeExtra <$> t) es
                                 (mkTypeExtra <$> _lhsIimCast) anCatUpd_
                   {-# LINE 1086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   in Annotation anSrc_ t es _lhsIimCast anCatUpd_
                   {-# LINE 1074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Annotation anSrc_ anType_ anErrs_ anImplicitCast_ anCatUpd_
<<<<<<< HEAD
                   {-# LINE 1092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Annotation anSrc_ anType_ anErrs_ anImplicitCast_ anCatUpd_
<<<<<<< HEAD
                   {-# LINE 1098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 1104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AttributeDef ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative AttributeDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         child def            : MaybeScalarExpr 
         child cons           : RowConstraintList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AttributeDef  = AttributeDef (Annotation ) (NameComponent) (TypeName ) (MaybeScalarExpr ) (RowConstraintList ) 
                   deriving ( Data,Eq,Show,Typeable)
-- cata
sem_AttributeDef :: AttributeDef  ->
                    T_AttributeDef 
sem_AttributeDef (AttributeDef _ann _name _typ _def _cons )  =
    (sem_AttributeDef_AttributeDef (sem_Annotation _ann ) _name (sem_TypeName _typ ) (sem_MaybeScalarExpr _def ) (sem_RowConstraintList _cons ) )
-- semantic domain
type T_AttributeDef  = Catalog ->
                       TypeCheckingFlags ->
                       (Maybe Type) ->
                       ( AttributeDef ,AttributeDef )
data Inh_AttributeDef  = Inh_AttributeDef {cat_Inh_AttributeDef :: Catalog,flags_Inh_AttributeDef :: TypeCheckingFlags,imCast_Inh_AttributeDef :: (Maybe Type)}
data Syn_AttributeDef  = Syn_AttributeDef {annotatedTree_Syn_AttributeDef :: AttributeDef ,originalTree_Syn_AttributeDef :: AttributeDef }
wrap_AttributeDef :: T_AttributeDef  ->
                     Inh_AttributeDef  ->
                     Syn_AttributeDef 
wrap_AttributeDef sem (Inh_AttributeDef _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_AttributeDef _lhsOannotatedTree _lhsOoriginalTree ))
sem_AttributeDef_AttributeDef :: T_Annotation  ->
                                 NameComponent ->
                                 T_TypeName  ->
                                 T_MaybeScalarExpr  ->
                                 T_RowConstraintList  ->
                                 T_AttributeDef 
sem_AttributeDef_AttributeDef ann_ name_ typ_ def_ cons_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AttributeDef 
              _lhsOoriginalTree :: AttributeDef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe Type)
              _defOcat :: Catalog
              _defOdownEnv :: Environment
              _defOexpectedType :: (Maybe Type)
              _defOflags :: TypeCheckingFlags
              _defOimCast :: (Maybe Type)
              _consOcat :: Catalog
              _consOflags :: TypeCheckingFlags
              _consOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _typIannotatedTree :: TypeName 
              _typInamedType :: (Maybe Type)
              _typIoriginalTree :: TypeName 
              _defIannotatedTree :: MaybeScalarExpr 
              _defIoriginalTree :: MaybeScalarExpr 
              _defIupType :: (Maybe Type)
              _consIannotatedTree :: RowConstraintList 
              _consIoriginalTree :: RowConstraintList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AttributeDef _annIannotatedTree name_ _typIannotatedTree _defIannotatedTree _consIannotatedTree
<<<<<<< HEAD
                   {-# LINE 1189 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AttributeDef _annIoriginalTree name_ _typIoriginalTree _defIoriginalTree _consIoriginalTree
<<<<<<< HEAD
                   {-# LINE 1195 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1183 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 1201 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1189 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 1207 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1195 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1213 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1201 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1207 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1213 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: AttributeDef.AttributeDef.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 1231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _defOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _defOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: AttributeDef.AttributeDef.def.downEnv"
<<<<<<< HEAD
                   {-# LINE 1261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _defOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: AttributeDef.AttributeDef.def.expectedType"
<<<<<<< HEAD
                   {-# LINE 1267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _defOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _defOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _consOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _consOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _consOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast 
              ( _defIannotatedTree,_defIoriginalTree,_defIupType) =
                  def_ _defOcat _defOdownEnv _defOexpectedType _defOflags _defOimCast 
              ( _consIannotatedTree,_consIoriginalTree) =
                  cons_ _consOcat _consOflags _consOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AttributeDefList --------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : AttributeDef 
         child tl             : AttributeDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type AttributeDefList  = [AttributeDef ]
-- cata
sem_AttributeDefList :: AttributeDefList  ->
                        T_AttributeDefList 
sem_AttributeDefList list  =
    (Prelude.foldr sem_AttributeDefList_Cons sem_AttributeDefList_Nil (Prelude.map sem_AttributeDef list) )
-- semantic domain
type T_AttributeDefList  = Catalog ->
                           TypeCheckingFlags ->
                           (Maybe Type) ->
                           ( AttributeDefList ,AttributeDefList )
data Inh_AttributeDefList  = Inh_AttributeDefList {cat_Inh_AttributeDefList :: Catalog,flags_Inh_AttributeDefList :: TypeCheckingFlags,imCast_Inh_AttributeDefList :: (Maybe Type)}
data Syn_AttributeDefList  = Syn_AttributeDefList {annotatedTree_Syn_AttributeDefList :: AttributeDefList ,originalTree_Syn_AttributeDefList :: AttributeDefList }
wrap_AttributeDefList :: T_AttributeDefList  ->
                         Inh_AttributeDefList  ->
                         Syn_AttributeDefList 
wrap_AttributeDefList sem (Inh_AttributeDefList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_AttributeDefList _lhsOannotatedTree _lhsOoriginalTree ))
sem_AttributeDefList_Cons :: T_AttributeDef  ->
                             T_AttributeDefList  ->
                             T_AttributeDefList 
sem_AttributeDefList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AttributeDefList 
              _lhsOoriginalTree :: AttributeDefList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: AttributeDef 
              _hdIoriginalTree :: AttributeDef 
              _tlIannotatedTree :: AttributeDefList 
              _tlIoriginalTree :: AttributeDefList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 1372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 1378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 1384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 1390 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1390 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_AttributeDefList_Nil :: T_AttributeDefList 
sem_AttributeDefList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AttributeDefList 
              _lhsOoriginalTree :: AttributeDefList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 1444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 1450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 1456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 1462 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- CaseScalarExprListScalarExprPair ----------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
         thenExpectedType     : Maybe Type
         whenExpectedType     : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
         thenType             : Maybe Type
         upTypes              : [Maybe Type]
         whenTypes            : [Maybe Type]
   alternatives:
      alternative Tuple:
         child x1             : ScalarExprList 
         child x2             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type CaseScalarExprListScalarExprPair  = ( ScalarExprList ,ScalarExpr )
-- cata
sem_CaseScalarExprListScalarExprPair :: CaseScalarExprListScalarExprPair  ->
                                        T_CaseScalarExprListScalarExprPair 
sem_CaseScalarExprListScalarExprPair ( x1,x2)  =
    (sem_CaseScalarExprListScalarExprPair_Tuple (sem_ScalarExprList x1 ) (sem_ScalarExpr x2 ) )
-- semantic domain
type T_CaseScalarExprListScalarExprPair  = Catalog ->
                                           Environment ->
                                           TypeCheckingFlags ->
                                           (Maybe Type) ->
                                           (Maybe Type) ->
                                           (Maybe Type) ->
                                           ( CaseScalarExprListScalarExprPair ,CaseScalarExprListScalarExprPair ,(Maybe Type),([Maybe Type]),([Maybe Type]))
data Inh_CaseScalarExprListScalarExprPair  = Inh_CaseScalarExprListScalarExprPair {cat_Inh_CaseScalarExprListScalarExprPair :: Catalog,downEnv_Inh_CaseScalarExprListScalarExprPair :: Environment,flags_Inh_CaseScalarExprListScalarExprPair :: TypeCheckingFlags,imCast_Inh_CaseScalarExprListScalarExprPair :: (Maybe Type),thenExpectedType_Inh_CaseScalarExprListScalarExprPair :: (Maybe Type),whenExpectedType_Inh_CaseScalarExprListScalarExprPair :: (Maybe Type)}
data Syn_CaseScalarExprListScalarExprPair  = Syn_CaseScalarExprListScalarExprPair {annotatedTree_Syn_CaseScalarExprListScalarExprPair :: CaseScalarExprListScalarExprPair ,originalTree_Syn_CaseScalarExprListScalarExprPair :: CaseScalarExprListScalarExprPair ,thenType_Syn_CaseScalarExprListScalarExprPair :: (Maybe Type),upTypes_Syn_CaseScalarExprListScalarExprPair :: ([Maybe Type]),whenTypes_Syn_CaseScalarExprListScalarExprPair :: ([Maybe Type])}
wrap_CaseScalarExprListScalarExprPair :: T_CaseScalarExprListScalarExprPair  ->
                                         Inh_CaseScalarExprListScalarExprPair  ->
                                         Syn_CaseScalarExprListScalarExprPair 
wrap_CaseScalarExprListScalarExprPair sem (Inh_CaseScalarExprListScalarExprPair _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenType,_lhsOupTypes,_lhsOwhenTypes) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType 
     in  (Syn_CaseScalarExprListScalarExprPair _lhsOannotatedTree _lhsOoriginalTree _lhsOthenType _lhsOupTypes _lhsOwhenTypes ))
sem_CaseScalarExprListScalarExprPair_Tuple :: T_ScalarExprList  ->
                                              T_ScalarExpr  ->
                                              T_CaseScalarExprListScalarExprPair 
sem_CaseScalarExprListScalarExprPair_Tuple x1_ x2_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast
       _lhsIthenExpectedType
       _lhsIwhenExpectedType ->
         (let _lhsOwhenTypes :: ([Maybe Type])
              _lhsOthenType :: (Maybe Type)
              _x1OexpectedTypes :: ([Type])
              _x2OexpectedType :: (Maybe Type)
              _lhsOannotatedTree :: CaseScalarExprListScalarExprPair 
              _lhsOoriginalTree :: CaseScalarExprListScalarExprPair 
              _lhsOupTypes :: ([Maybe Type])
              _x1Ocat :: Catalog
              _x1OdownEnv :: Environment
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe Type)
              _x2Ocat :: Catalog
              _x2OdownEnv :: Environment
              _x2Oflags :: TypeCheckingFlags
              _x2OimCast :: (Maybe Type)
              _x1IannotatedTree :: ScalarExprList 
              _x1IoriginalTree :: ScalarExprList 
              _x1IupTypes :: ([Maybe Type])
              _x2IannotatedTree :: ScalarExpr 
              _x2IcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _x2IoriginalTree :: ScalarExpr 
              _x2IupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 284, column 13)
              _lhsOwhenTypes =
                  ({-# LINE 284 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _x1IupTypes
<<<<<<< HEAD
                   {-# LINE 1547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1535 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 285, column 13)
              _lhsOthenType =
                  ({-# LINE 285 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _x2IupType
<<<<<<< HEAD
                   {-# LINE 1553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1541 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 329, column 11)
              _x1OexpectedTypes =
                  ({-# LINE 329 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe [] repeat _lhsIwhenExpectedType
<<<<<<< HEAD
                   {-# LINE 1559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 330, column 11)
              _x2OexpectedType =
                  ({-# LINE 330 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIthenExpectedType
<<<<<<< HEAD
                   {-# LINE 1565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
<<<<<<< HEAD
                   {-# LINE 1571 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
<<<<<<< HEAD
                   {-# LINE 1577 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 1583 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1571 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 1589 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1577 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOupTypes =
                  ({-# LINE 289 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _x1IupTypes
<<<<<<< HEAD
                   {-# LINE 1595 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1583 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1601 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1589 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1OdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 1607 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1595 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1613 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1601 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1619 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1607 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1625 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1613 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2OdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 1631 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1619 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1637 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1625 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1643 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1631 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _x1IannotatedTree,_x1IoriginalTree,_x1IupTypes) =
                  x1_ _x1Ocat _x1OdownEnv _x1OexpectedTypes _x1Oflags _x1OimCast 
              ( _x2IannotatedTree,_x2IcolExprs,_x2IoriginalTree,_x2IupType) =
                  x2_ _x2Ocat _x2OdownEnv _x2OexpectedType _x2Oflags _x2OimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenType,_lhsOupTypes,_lhsOwhenTypes)))
-- CaseScalarExprListScalarExprPairList ------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
         thenExpectedType     : Maybe Type
         whenExpectedType     : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
         thenTypes            : [Maybe Type]
         upTypes              : [Maybe Type]
         whenTypes            : [[Maybe Type]]
   alternatives:
      alternative Cons:
         child hd             : CaseScalarExprListScalarExprPair 
         child tl             : CaseScalarExprListScalarExprPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type CaseScalarExprListScalarExprPairList  = [CaseScalarExprListScalarExprPair ]
-- cata
sem_CaseScalarExprListScalarExprPairList :: CaseScalarExprListScalarExprPairList  ->
                                            T_CaseScalarExprListScalarExprPairList 
sem_CaseScalarExprListScalarExprPairList list  =
    (Prelude.foldr sem_CaseScalarExprListScalarExprPairList_Cons sem_CaseScalarExprListScalarExprPairList_Nil (Prelude.map sem_CaseScalarExprListScalarExprPair list) )
-- semantic domain
type T_CaseScalarExprListScalarExprPairList  = Catalog ->
                                               Environment ->
                                               TypeCheckingFlags ->
                                               (Maybe Type) ->
                                               (Maybe Type) ->
                                               (Maybe Type) ->
                                               ( CaseScalarExprListScalarExprPairList ,CaseScalarExprListScalarExprPairList ,([Maybe Type]),([Maybe Type]),([[Maybe Type]]))
data Inh_CaseScalarExprListScalarExprPairList  = Inh_CaseScalarExprListScalarExprPairList {cat_Inh_CaseScalarExprListScalarExprPairList :: Catalog,downEnv_Inh_CaseScalarExprListScalarExprPairList :: Environment,flags_Inh_CaseScalarExprListScalarExprPairList :: TypeCheckingFlags,imCast_Inh_CaseScalarExprListScalarExprPairList :: (Maybe Type),thenExpectedType_Inh_CaseScalarExprListScalarExprPairList :: (Maybe Type),whenExpectedType_Inh_CaseScalarExprListScalarExprPairList :: (Maybe Type)}
data Syn_CaseScalarExprListScalarExprPairList  = Syn_CaseScalarExprListScalarExprPairList {annotatedTree_Syn_CaseScalarExprListScalarExprPairList :: CaseScalarExprListScalarExprPairList ,originalTree_Syn_CaseScalarExprListScalarExprPairList :: CaseScalarExprListScalarExprPairList ,thenTypes_Syn_CaseScalarExprListScalarExprPairList :: ([Maybe Type]),upTypes_Syn_CaseScalarExprListScalarExprPairList :: ([Maybe Type]),whenTypes_Syn_CaseScalarExprListScalarExprPairList :: ([[Maybe Type]])}
wrap_CaseScalarExprListScalarExprPairList :: T_CaseScalarExprListScalarExprPairList  ->
                                             Inh_CaseScalarExprListScalarExprPairList  ->
                                             Syn_CaseScalarExprListScalarExprPairList 
wrap_CaseScalarExprListScalarExprPairList sem (Inh_CaseScalarExprListScalarExprPairList _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenTypes,_lhsOupTypes,_lhsOwhenTypes) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType 
     in  (Syn_CaseScalarExprListScalarExprPairList _lhsOannotatedTree _lhsOoriginalTree _lhsOthenTypes _lhsOupTypes _lhsOwhenTypes ))
sem_CaseScalarExprListScalarExprPairList_Cons :: T_CaseScalarExprListScalarExprPair  ->
                                                 T_CaseScalarExprListScalarExprPairList  ->
                                                 T_CaseScalarExprListScalarExprPairList 
sem_CaseScalarExprListScalarExprPairList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast
       _lhsIthenExpectedType
       _lhsIwhenExpectedType ->
         (let _lhsOwhenTypes :: ([[Maybe Type]])
              _lhsOthenTypes :: ([Maybe Type])
              _lhsOannotatedTree :: CaseScalarExprListScalarExprPairList 
              _lhsOoriginalTree :: CaseScalarExprListScalarExprPairList 
              _lhsOupTypes :: ([Maybe Type])
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _hdOthenExpectedType :: (Maybe Type)
              _hdOwhenExpectedType :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _tlOthenExpectedType :: (Maybe Type)
              _tlOwhenExpectedType :: (Maybe Type)
              _hdIannotatedTree :: CaseScalarExprListScalarExprPair 
              _hdIoriginalTree :: CaseScalarExprListScalarExprPair 
              _hdIthenType :: (Maybe Type)
              _hdIupTypes :: ([Maybe Type])
              _hdIwhenTypes :: ([Maybe Type])
              _tlIannotatedTree :: CaseScalarExprListScalarExprPairList 
              _tlIoriginalTree :: CaseScalarExprListScalarExprPairList 
              _tlIthenTypes :: ([Maybe Type])
              _tlIupTypes :: ([Maybe Type])
              _tlIwhenTypes :: ([[Maybe Type]])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 274, column 10)
              _lhsOwhenTypes =
                  ({-# LINE 274 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _hdIwhenTypes : _tlIwhenTypes
<<<<<<< HEAD
                   {-# LINE 1741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 275, column 10)
              _lhsOthenTypes =
                  ({-# LINE 275 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _hdIthenType : _tlIthenTypes
<<<<<<< HEAD
                   {-# LINE 1747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 1753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 1759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 1765 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 1771 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOupTypes =
                  ({-# LINE 289 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tlIupTypes
<<<<<<< HEAD
                   {-# LINE 1777 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1765 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1783 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1771 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 288 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 1789 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1777 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1783 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1789 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOthenExpectedType =
                  ({-# LINE 325 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIthenExpectedType
<<<<<<< HEAD
                   {-# LINE 1807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOwhenExpectedType =
                  ({-# LINE 326 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIwhenExpectedType
<<<<<<< HEAD
                   {-# LINE 1813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 1819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 288 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 1825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 1831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 1837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOthenExpectedType =
                  ({-# LINE 325 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIthenExpectedType
<<<<<<< HEAD
                   {-# LINE 1843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOwhenExpectedType =
                  ({-# LINE 326 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIwhenExpectedType
<<<<<<< HEAD
                   {-# LINE 1849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree,_hdIthenType,_hdIupTypes,_hdIwhenTypes) =
                  hd_ _hdOcat _hdOdownEnv _hdOflags _hdOimCast _hdOthenExpectedType _hdOwhenExpectedType 
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIthenTypes,_tlIupTypes,_tlIwhenTypes) =
                  tl_ _tlOcat _tlOdownEnv _tlOflags _tlOimCast _tlOthenExpectedType _tlOwhenExpectedType 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenTypes,_lhsOupTypes,_lhsOwhenTypes)))
sem_CaseScalarExprListScalarExprPairList_Nil :: T_CaseScalarExprListScalarExprPairList 
sem_CaseScalarExprListScalarExprPairList_Nil  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast
       _lhsIthenExpectedType
       _lhsIwhenExpectedType ->
         (let _lhsOwhenTypes :: ([[Maybe Type]])
              _lhsOthenTypes :: ([Maybe Type])
              _lhsOannotatedTree :: CaseScalarExprListScalarExprPairList 
              _lhsOoriginalTree :: CaseScalarExprListScalarExprPairList 
              _lhsOupTypes :: ([Maybe Type])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 276, column 9)
              _lhsOwhenTypes =
                  ({-# LINE 276 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 1873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1861 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 277, column 9)
              _lhsOthenTypes =
                  ({-# LINE 277 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 1879 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 1885 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 1891 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1879 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 1897 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1885 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 1903 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1891 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOupTypes =
                  ({-# LINE 289 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: CaseScalarExprListScalarExprPairList.Nil.lhs.upTypes"
<<<<<<< HEAD
                   {-# LINE 1909 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 1897 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenTypes,_lhsOupTypes,_lhsOwhenTypes)))
-- Constraint --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative CheckConstraint:
         child ann            : Annotation 
         child name           : {String}
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative PrimaryKeyConstraint:
         child ann            : Annotation 
         child name           : {String}
         child x              : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ReferenceConstraint:
         child ann            : Annotation 
         child name           : {String}
         child atts           : {[NameComponent]}
         child table          : Name 
         child tableAtts      : {[NameComponent]}
         child onUpdate       : {Cascade}
         child onDelete       : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative UniqueConstraint:
         child ann            : Annotation 
         child name           : {String}
         child x              : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Constraint  = CheckConstraint (Annotation ) (String) (ScalarExpr ) 
                 | PrimaryKeyConstraint (Annotation ) (String) (([NameComponent])) 
                 | ReferenceConstraint (Annotation ) (String) (([NameComponent])) (Name ) (([NameComponent])) (Cascade) (Cascade) 
                 | UniqueConstraint (Annotation ) (String) (([NameComponent])) 
                 deriving ( Data,Eq,Show,Typeable)
-- cata
sem_Constraint :: Constraint  ->
                  T_Constraint 
sem_Constraint (CheckConstraint _ann _name _expr )  =
    (sem_Constraint_CheckConstraint (sem_Annotation _ann ) _name (sem_ScalarExpr _expr ) )
sem_Constraint (PrimaryKeyConstraint _ann _name _x )  =
    (sem_Constraint_PrimaryKeyConstraint (sem_Annotation _ann ) _name _x )
sem_Constraint (ReferenceConstraint _ann _name _atts _table _tableAtts _onUpdate _onDelete )  =
    (sem_Constraint_ReferenceConstraint (sem_Annotation _ann ) _name _atts (sem_Name _table ) _tableAtts _onUpdate _onDelete )
sem_Constraint (UniqueConstraint _ann _name _x )  =
    (sem_Constraint_UniqueConstraint (sem_Annotation _ann ) _name _x )
-- semantic domain
type T_Constraint  = Catalog ->
                     TypeCheckingFlags ->
                     (Maybe Type) ->
                     ( Constraint ,Constraint )
data Inh_Constraint  = Inh_Constraint {cat_Inh_Constraint :: Catalog,flags_Inh_Constraint :: TypeCheckingFlags,imCast_Inh_Constraint :: (Maybe Type)}
data Syn_Constraint  = Syn_Constraint {annotatedTree_Syn_Constraint :: Constraint ,originalTree_Syn_Constraint :: Constraint }
wrap_Constraint :: T_Constraint  ->
                   Inh_Constraint  ->
                   Syn_Constraint 
wrap_Constraint sem (Inh_Constraint _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_Constraint _lhsOannotatedTree _lhsOoriginalTree ))
sem_Constraint_CheckConstraint :: T_Annotation  ->
                                  String ->
                                  T_ScalarExpr  ->
                                  T_Constraint 
sem_Constraint_CheckConstraint ann_ name_ expr_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Constraint 
              _lhsOoriginalTree :: Constraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedType :: (Maybe Type)
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CheckConstraint _annIannotatedTree name_ _exprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 2014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CheckConstraint _annIoriginalTree name_ _exprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 2020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Constraint.CheckConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 2056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Constraint.CheckConstraint.expr.downEnv"
<<<<<<< HEAD
                   {-# LINE 2068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Constraint.CheckConstraint.expr.expectedType"
<<<<<<< HEAD
                   {-# LINE 2074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Constraint_PrimaryKeyConstraint :: T_Annotation  ->
                                       String ->
                                       ([NameComponent]) ->
                                       T_Constraint 
sem_Constraint_PrimaryKeyConstraint ann_ name_ x_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Constraint 
              _lhsOoriginalTree :: Constraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrimaryKeyConstraint _annIannotatedTree name_ x_
<<<<<<< HEAD
                   {-# LINE 2113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2101 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrimaryKeyConstraint _annIoriginalTree name_ x_
<<<<<<< HEAD
                   {-# LINE 2119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2107 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2149 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Constraint.PrimaryKeyConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 2155 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Constraint_ReferenceConstraint :: T_Annotation  ->
                                      String ->
                                      ([NameComponent]) ->
                                      T_Name  ->
                                      ([NameComponent]) ->
                                      Cascade ->
                                      Cascade ->
                                      T_Constraint 
sem_Constraint_ReferenceConstraint ann_ name_ atts_ table_ tableAtts_ onUpdate_ onDelete_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Constraint 
              _lhsOoriginalTree :: Constraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe Type)
              _tableOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tableIannotatedTree :: Name 
              _tableIoriginalTree :: Name 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReferenceConstraint _annIannotatedTree name_ atts_ _tableIannotatedTree tableAtts_ onUpdate_ onDelete_
<<<<<<< HEAD
                   {-# LINE 2190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReferenceConstraint _annIoriginalTree name_ atts_ _tableIoriginalTree tableAtts_ onUpdate_ onDelete_
<<<<<<< HEAD
                   {-# LINE 2196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Constraint.ReferenceConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 2232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2250 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _tableOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Constraint.ReferenceConstraint.table.tpe"
<<<<<<< HEAD
                   {-# LINE 2256 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Constraint_UniqueConstraint :: T_Annotation  ->
                                   String ->
                                   ([NameComponent]) ->
                                   T_Constraint 
sem_Constraint_UniqueConstraint ann_ name_ x_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Constraint 
              _lhsOoriginalTree :: Constraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   UniqueConstraint _annIannotatedTree name_ x_
<<<<<<< HEAD
                   {-# LINE 2283 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   UniqueConstraint _annIoriginalTree name_ x_
<<<<<<< HEAD
                   {-# LINE 2289 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2277 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2295 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2283 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2289 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2295 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Constraint.UniqueConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 2325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ConstraintList ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : Constraint 
         child tl             : ConstraintList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ConstraintList  = [Constraint ]
-- cata
sem_ConstraintList :: ConstraintList  ->
                      T_ConstraintList 
sem_ConstraintList list  =
    (Prelude.foldr sem_ConstraintList_Cons sem_ConstraintList_Nil (Prelude.map sem_Constraint list) )
-- semantic domain
type T_ConstraintList  = Catalog ->
                         TypeCheckingFlags ->
                         (Maybe Type) ->
                         ( ConstraintList ,ConstraintList )
data Inh_ConstraintList  = Inh_ConstraintList {cat_Inh_ConstraintList :: Catalog,flags_Inh_ConstraintList :: TypeCheckingFlags,imCast_Inh_ConstraintList :: (Maybe Type)}
data Syn_ConstraintList  = Syn_ConstraintList {annotatedTree_Syn_ConstraintList :: ConstraintList ,originalTree_Syn_ConstraintList :: ConstraintList }
wrap_ConstraintList :: T_ConstraintList  ->
                       Inh_ConstraintList  ->
                       Syn_ConstraintList 
wrap_ConstraintList sem (Inh_ConstraintList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_ConstraintList _lhsOannotatedTree _lhsOoriginalTree ))
sem_ConstraintList_Cons :: T_Constraint  ->
                           T_ConstraintList  ->
                           T_ConstraintList 
sem_ConstraintList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ConstraintList 
              _lhsOoriginalTree :: ConstraintList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: Constraint 
              _hdIoriginalTree :: Constraint 
              _tlIannotatedTree :: ConstraintList 
              _tlIoriginalTree :: ConstraintList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 2394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 2400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_ConstraintList_Nil :: T_ConstraintList 
sem_ConstraintList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ConstraintList 
              _lhsOoriginalTree :: ConstraintList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 2466 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2454 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 2472 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2460 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2478 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2466 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2472 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- FnBody ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative PlpgsqlFnBody:
         child ann            : Annotation 
         child blk            : Statement 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative SqlFnBody:
         child ann            : Annotation 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data FnBody  = PlpgsqlFnBody (Annotation ) (Statement ) 
             | SqlFnBody (Annotation ) (StatementList ) 
             deriving ( Data,Eq,Show,Typeable)
-- cata
sem_FnBody :: FnBody  ->
              T_FnBody 
sem_FnBody (PlpgsqlFnBody _ann _blk )  =
    (sem_FnBody_PlpgsqlFnBody (sem_Annotation _ann ) (sem_Statement _blk ) )
sem_FnBody (SqlFnBody _ann _sts )  =
    (sem_FnBody_SqlFnBody (sem_Annotation _ann ) (sem_StatementList _sts ) )
-- semantic domain
type T_FnBody  = Catalog ->
                 TypeCheckingFlags ->
                 (Maybe Type) ->
                 ( FnBody ,FnBody )
data Inh_FnBody  = Inh_FnBody {cat_Inh_FnBody :: Catalog,flags_Inh_FnBody :: TypeCheckingFlags,imCast_Inh_FnBody :: (Maybe Type)}
data Syn_FnBody  = Syn_FnBody {annotatedTree_Syn_FnBody :: FnBody ,originalTree_Syn_FnBody :: FnBody }
wrap_FnBody :: T_FnBody  ->
               Inh_FnBody  ->
               Syn_FnBody 
wrap_FnBody sem (Inh_FnBody _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_FnBody _lhsOannotatedTree _lhsOoriginalTree ))
sem_FnBody_PlpgsqlFnBody :: T_Annotation  ->
                            T_Statement  ->
                            T_FnBody 
sem_FnBody_PlpgsqlFnBody ann_ blk_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: FnBody 
              _lhsOoriginalTree :: FnBody 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _blkOcat :: Catalog
              _blkOflags :: TypeCheckingFlags
              _blkOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _blkIannotatedTree :: Statement 
              _blkIoriginalTree :: Statement 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PlpgsqlFnBody _annIannotatedTree _blkIannotatedTree
<<<<<<< HEAD
                   {-# LINE 2558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PlpgsqlFnBody _annIoriginalTree _blkIoriginalTree
<<<<<<< HEAD
                   {-# LINE 2564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: FnBody.PlpgsqlFnBody.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 2600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _blkOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _blkOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2612 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _blkOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2618 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _blkIannotatedTree,_blkIoriginalTree) =
                  blk_ _blkOcat _blkOflags _blkOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_FnBody_SqlFnBody :: T_Annotation  ->
                        T_StatementList  ->
                        T_FnBody 
sem_FnBody_SqlFnBody ann_ sts_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: FnBody 
              _lhsOoriginalTree :: FnBody 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _stsIannotatedTree :: StatementList 
              _stsIoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SqlFnBody _annIannotatedTree _stsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 2649 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2637 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SqlFnBody _annIoriginalTree _stsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 2655 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2643 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2661 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2649 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2667 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2655 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2673 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2661 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2667 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2673 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: FnBody.SqlFnBody.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 2691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- InList ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         expectedType         : Maybe Type
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         listType             : Either [TypeError] Type
         originalTree         : SELF 
   alternatives:
      alternative InList:
         child ann            : Annotation 
         child exprs          : ScalarExprList 
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative InQueryExpr:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
-}
data InList  = InList (Annotation ) (ScalarExprList ) 
             | InQueryExpr (Annotation ) (QueryExpr ) 
             deriving ( Data,Eq,Show,Typeable)
-- cata
sem_InList :: InList  ->
              T_InList 
sem_InList (InList _ann _exprs )  =
    (sem_InList_InList (sem_Annotation _ann ) (sem_ScalarExprList _exprs ) )
sem_InList (InQueryExpr _ann _sel )  =
    (sem_InList_InQueryExpr (sem_Annotation _ann ) (sem_QueryExpr _sel ) )
-- semantic domain
type T_InList  = Catalog ->
                 Environment ->
                 (Maybe Type) ->
                 TypeCheckingFlags ->
                 (Maybe Type) ->
                 ( InList ,(Either [TypeError] Type),InList )
data Inh_InList  = Inh_InList {cat_Inh_InList :: Catalog,downEnv_Inh_InList :: Environment,expectedType_Inh_InList :: (Maybe Type),flags_Inh_InList :: TypeCheckingFlags,imCast_Inh_InList :: (Maybe Type)}
data Syn_InList  = Syn_InList {annotatedTree_Syn_InList :: InList ,listType_Syn_InList :: (Either [TypeError] Type),originalTree_Syn_InList :: InList }
wrap_InList :: T_InList  ->
               Inh_InList  ->
               Syn_InList 
wrap_InList sem (Inh_InList _lhsIcat _lhsIdownEnv _lhsIexpectedType _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOlistType,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIexpectedType _lhsIflags _lhsIimCast 
     in  (Syn_InList _lhsOannotatedTree _lhsOlistType _lhsOoriginalTree ))
sem_InList_InList :: T_Annotation  ->
                     T_ScalarExprList  ->
                     T_InList 
sem_InList_InList ann_ exprs_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOlistType :: (Either [TypeError] Type)
              _exprsOexpectedTypes :: ([Type])
              _annOimCast :: (Maybe Type)
              _lhsOannotatedTree :: InList 
              _lhsOoriginalTree :: InList 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOtpe :: (Either [TypeError] Type)
              _exprsOcat :: Catalog
              _exprsOdownEnv :: Environment
              _exprsOflags :: TypeCheckingFlags
              _exprsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprsIannotatedTree :: ScalarExprList 
              _exprsIoriginalTree :: ScalarExprList 
              _exprsIupTypes :: ([Maybe Type])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 397, column 9)
              _lhsOlistType =
                  ({-# LINE 397 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   mapM (maybe (Left []) Right) _exprsIupTypes
                   >>= resolveResultSetType _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2789 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 399, column 9)
              _exprsOexpectedTypes =
                  ({-# LINE 399 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe [] repeat _lhsIexpectedType
<<<<<<< HEAD
                   {-# LINE 2807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 486, column 12)
              _annOimCast =
                  ({-# LINE 486 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 2813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 100, column 9)
              _tpe =
                  ({-# LINE 100 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 2819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InList _annIannotatedTree _exprsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 2825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InList _annIoriginalTree _exprsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 2831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2855 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 2861 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2855 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprsOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 2873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2861 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2879 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 2885 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprsIannotatedTree,_exprsIoriginalTree,_exprsIupTypes) =
                  exprs_ _exprsOcat _exprsOdownEnv _exprsOexpectedTypes _exprsOflags _exprsOimCast 
          in  ( _lhsOannotatedTree,_lhsOlistType,_lhsOoriginalTree)))
sem_InList_InQueryExpr :: T_Annotation  ->
                          T_QueryExpr  ->
                          T_InList 
sem_InList_InQueryExpr ann_ sel_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOlistType :: (Either [TypeError] Type)
              _annOimCast :: (Maybe Type)
              _selOouterDownEnv :: (Maybe Environment)
              _lhsOannotatedTree :: InList 
              _lhsOoriginalTree :: InList 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOtpe :: (Either [TypeError] Type)
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _selIannotatedTree :: QueryExpr 
              _selIoriginalTree :: QueryExpr 
              _selIupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 402, column 9)
              _lhsOlistType =
                  ({-# LINE 402 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   st <- maybe (Left []) Right (map snd <$> _selIupType)
                   case length st of
                             0 -> Left [InternalError
                                        "got subquery with no columns? in inselect"]
                             1 -> Right $ head st
                             _ -> Right $ AnonymousCompositeType st
<<<<<<< HEAD
                   {-# LINE 2927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2915 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 487, column 17)
              _annOimCast =
                  ({-# LINE 487 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 2933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2921 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 30, column 17)
              _selOouterDownEnv =
                  ({-# LINE 30 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 2939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 100, column 9)
              _tpe =
                  ({-# LINE 100 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 2945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InQueryExpr _annIannotatedTree _selIannotatedTree
<<<<<<< HEAD
                   {-# LINE 2951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InQueryExpr _annIoriginalTree _selIoriginalTree
<<<<<<< HEAD
                   {-# LINE 2957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 2963 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 2969 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2975 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2963 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2981 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2969 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 2987 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2975 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 2993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2981 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 2999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2987 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 3005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 2993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOcat _selOflags _selOimCast _selOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOlistType,_lhsOoriginalTree)))
-- JoinExpr ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative JoinOn:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative JoinUsing:
         child ann            : Annotation 
         child x              : {[NameComponent]}
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
-}
data JoinExpr  = JoinOn (Annotation ) (ScalarExpr ) 
               | JoinUsing (Annotation ) (([NameComponent])) 
               deriving ( Data,Eq,Show,Typeable)
-- cata
sem_JoinExpr :: JoinExpr  ->
                T_JoinExpr 
sem_JoinExpr (JoinOn _ann _expr )  =
    (sem_JoinExpr_JoinOn (sem_Annotation _ann ) (sem_ScalarExpr _expr ) )
sem_JoinExpr (JoinUsing _ann _x )  =
    (sem_JoinExpr_JoinUsing (sem_Annotation _ann ) _x )
-- semantic domain
type T_JoinExpr  = Catalog ->
                   Environment ->
                   TypeCheckingFlags ->
                   (Maybe Type) ->
                   ( JoinExpr ,JoinExpr )
data Inh_JoinExpr  = Inh_JoinExpr {cat_Inh_JoinExpr :: Catalog,downEnv_Inh_JoinExpr :: Environment,flags_Inh_JoinExpr :: TypeCheckingFlags,imCast_Inh_JoinExpr :: (Maybe Type)}
data Syn_JoinExpr  = Syn_JoinExpr {annotatedTree_Syn_JoinExpr :: JoinExpr ,originalTree_Syn_JoinExpr :: JoinExpr }
wrap_JoinExpr :: T_JoinExpr  ->
                 Inh_JoinExpr  ->
                 Syn_JoinExpr 
wrap_JoinExpr sem (Inh_JoinExpr _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast 
     in  (Syn_JoinExpr _lhsOannotatedTree _lhsOoriginalTree ))
sem_JoinExpr_JoinOn :: T_Annotation  ->
                       T_ScalarExpr  ->
                       T_JoinExpr 
sem_JoinExpr_JoinOn ann_ expr_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _exprOexpectedType :: (Maybe Type)
              _lhsOannotatedTree :: JoinExpr 
              _lhsOoriginalTree :: JoinExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 453, column 12)
              _exprOexpectedType =
                  ({-# LINE 453 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just typeBool
<<<<<<< HEAD
                   {-# LINE 3092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 104, column 9)
              _tpe =
                  ({-# LINE 104 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 3098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinOn _annIannotatedTree _exprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 3104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinOn _annIoriginalTree _exprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 3110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 3128 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 3134 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 3140 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3128 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 3146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3134 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 3152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3140 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 3158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 3164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 3170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_JoinExpr_JoinUsing :: T_Annotation  ->
                          ([NameComponent]) ->
                          T_JoinExpr 
sem_JoinExpr_JoinUsing ann_ x_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: JoinExpr 
              _lhsOoriginalTree :: JoinExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 104, column 9)
              _tpe =
                  ({-# LINE 104 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 3197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3185 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinUsing _annIannotatedTree x_
<<<<<<< HEAD
                   {-# LINE 3203 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3191 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinUsing _annIoriginalTree x_
<<<<<<< HEAD
                   {-# LINE 3209 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3215 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3203 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3221 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3209 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 3227 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3215 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 3233 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3221 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 3239 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3227 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 3245 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3233 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeBoolExpr -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Just:
         child just           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeBoolExpr  = Maybe ScalarExpr 
-- cata
sem_MaybeBoolExpr :: MaybeBoolExpr  ->
                     T_MaybeBoolExpr 
sem_MaybeBoolExpr (Prelude.Just x )  =
    (sem_MaybeBoolExpr_Just (sem_ScalarExpr x ) )
sem_MaybeBoolExpr Prelude.Nothing  =
    sem_MaybeBoolExpr_Nothing
-- semantic domain
type T_MaybeBoolExpr  = Catalog ->
                        Environment ->
                        TypeCheckingFlags ->
                        (Maybe Type) ->
                        ( MaybeBoolExpr ,MaybeBoolExpr )
data Inh_MaybeBoolExpr  = Inh_MaybeBoolExpr {cat_Inh_MaybeBoolExpr :: Catalog,downEnv_Inh_MaybeBoolExpr :: Environment,flags_Inh_MaybeBoolExpr :: TypeCheckingFlags,imCast_Inh_MaybeBoolExpr :: (Maybe Type)}
data Syn_MaybeBoolExpr  = Syn_MaybeBoolExpr {annotatedTree_Syn_MaybeBoolExpr :: MaybeBoolExpr ,originalTree_Syn_MaybeBoolExpr :: MaybeBoolExpr }
wrap_MaybeBoolExpr :: T_MaybeBoolExpr  ->
                      Inh_MaybeBoolExpr  ->
                      Syn_MaybeBoolExpr 
wrap_MaybeBoolExpr sem (Inh_MaybeBoolExpr _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast 
     in  (Syn_MaybeBoolExpr _lhsOannotatedTree _lhsOoriginalTree ))
sem_MaybeBoolExpr_Just :: T_ScalarExpr  ->
                          T_MaybeBoolExpr 
sem_MaybeBoolExpr_Just just_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _justOexpectedType :: (Maybe Type)
              _lhsOannotatedTree :: MaybeBoolExpr 
              _lhsOoriginalTree :: MaybeBoolExpr 
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe Type)
              _justIannotatedTree :: ScalarExpr 
              _justIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _justIoriginalTree :: ScalarExpr 
              _justIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 467, column 10)
              _justOexpectedType =
                  ({-# LINE 467 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 3316 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
<<<<<<< HEAD
                   {-# LINE 3322 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3310 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
<<<<<<< HEAD
                   {-# LINE 3328 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3316 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3322 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3328 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 3346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 3352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 3358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 3364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _justIannotatedTree,_justIcolExprs,_justIoriginalTree,_justIupType) =
                  just_ _justOcat _justOdownEnv _justOexpectedType _justOflags _justOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_MaybeBoolExpr_Nothing :: T_MaybeBoolExpr 
sem_MaybeBoolExpr_Nothing  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeBoolExpr 
              _lhsOoriginalTree :: MaybeBoolExpr 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 3381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 3387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeNameComponentList --------------------------------------
{-
   alternatives:
      alternative Just:
         child just           : NameComponentList 
      alternative Nothing:
-}
type MaybeNameComponentList  = Maybe NameComponentList 
-- cata
sem_MaybeNameComponentList :: MaybeNameComponentList  ->
                              T_MaybeNameComponentList 
sem_MaybeNameComponentList (Prelude.Just x )  =
    (sem_MaybeNameComponentList_Just (sem_NameComponentList x ) )
sem_MaybeNameComponentList Prelude.Nothing  =
    sem_MaybeNameComponentList_Nothing
-- semantic domain
type T_MaybeNameComponentList  = ( )
data Inh_MaybeNameComponentList  = Inh_MaybeNameComponentList {}
data Syn_MaybeNameComponentList  = Syn_MaybeNameComponentList {}
wrap_MaybeNameComponentList :: T_MaybeNameComponentList  ->
                               Inh_MaybeNameComponentList  ->
                               Syn_MaybeNameComponentList 
wrap_MaybeNameComponentList sem (Inh_MaybeNameComponentList )  =
    (let ( ) = sem 
     in  (Syn_MaybeNameComponentList ))
sem_MaybeNameComponentList_Just :: T_NameComponentList  ->
                                   T_MaybeNameComponentList 
sem_MaybeNameComponentList_Just just_  =
    (let 
     in  ( ))
sem_MaybeNameComponentList_Nothing :: T_MaybeNameComponentList 
sem_MaybeNameComponentList_Nothing  =
    (let 
     in  ( ))
-- MaybeScalarExpr ---------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         expectedType         : Maybe Type
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
         upType               : Maybe Type
   alternatives:
      alternative Just:
         child just           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeScalarExpr  = Maybe ScalarExpr 
-- cata
sem_MaybeScalarExpr :: MaybeScalarExpr  ->
                       T_MaybeScalarExpr 
sem_MaybeScalarExpr (Prelude.Just x )  =
    (sem_MaybeScalarExpr_Just (sem_ScalarExpr x ) )
sem_MaybeScalarExpr Prelude.Nothing  =
    sem_MaybeScalarExpr_Nothing
-- semantic domain
type T_MaybeScalarExpr  = Catalog ->
                          Environment ->
                          (Maybe Type) ->
                          TypeCheckingFlags ->
                          (Maybe Type) ->
                          ( MaybeScalarExpr ,MaybeScalarExpr ,(Maybe Type))
data Inh_MaybeScalarExpr  = Inh_MaybeScalarExpr {cat_Inh_MaybeScalarExpr :: Catalog,downEnv_Inh_MaybeScalarExpr :: Environment,expectedType_Inh_MaybeScalarExpr :: (Maybe Type),flags_Inh_MaybeScalarExpr :: TypeCheckingFlags,imCast_Inh_MaybeScalarExpr :: (Maybe Type)}
data Syn_MaybeScalarExpr  = Syn_MaybeScalarExpr {annotatedTree_Syn_MaybeScalarExpr :: MaybeScalarExpr ,originalTree_Syn_MaybeScalarExpr :: MaybeScalarExpr ,upType_Syn_MaybeScalarExpr :: (Maybe Type)}
wrap_MaybeScalarExpr :: T_MaybeScalarExpr  ->
                        Inh_MaybeScalarExpr  ->
                        Syn_MaybeScalarExpr 
wrap_MaybeScalarExpr sem (Inh_MaybeScalarExpr _lhsIcat _lhsIdownEnv _lhsIexpectedType _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIcat _lhsIdownEnv _lhsIexpectedType _lhsIflags _lhsIimCast 
     in  (Syn_MaybeScalarExpr _lhsOannotatedTree _lhsOoriginalTree _lhsOupType ))
sem_MaybeScalarExpr_Just :: T_ScalarExpr  ->
                            T_MaybeScalarExpr 
sem_MaybeScalarExpr_Just just_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeScalarExpr 
              _lhsOoriginalTree :: MaybeScalarExpr 
              _lhsOupType :: (Maybe Type)
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOexpectedType :: (Maybe Type)
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe Type)
              _justIannotatedTree :: ScalarExpr 
              _justIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _justIoriginalTree :: ScalarExpr 
              _justIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
<<<<<<< HEAD
                   {-# LINE 3507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
<<<<<<< HEAD
                   {-# LINE 3513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOupType =
                  ({-# LINE 40 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _justIupType
<<<<<<< HEAD
                   {-# LINE 3531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 3537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 3543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedType
<<<<<<< HEAD
                   {-# LINE 3549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 3555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 3561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _justIannotatedTree,_justIcolExprs,_justIoriginalTree,_justIupType) =
                  just_ _justOcat _justOdownEnv _justOexpectedType _justOflags _justOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
sem_MaybeScalarExpr_Nothing :: T_MaybeScalarExpr 
sem_MaybeScalarExpr_Nothing  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Maybe Type)
              _lhsOannotatedTree :: MaybeScalarExpr 
              _lhsOoriginalTree :: MaybeScalarExpr 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 15)
              _lhsOupType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 3580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 3586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 3592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- MaybeSelectList ---------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Just:
         child just           : SelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeSelectList  = Maybe SelectList 
-- cata
sem_MaybeSelectList :: MaybeSelectList  ->
                       T_MaybeSelectList 
sem_MaybeSelectList (Prelude.Just x )  =
    (sem_MaybeSelectList_Just (sem_SelectList x ) )
sem_MaybeSelectList Prelude.Nothing  =
    sem_MaybeSelectList_Nothing
-- semantic domain
type T_MaybeSelectList  = Catalog ->
                          TypeCheckingFlags ->
                          (Maybe Type) ->
                          ( MaybeSelectList ,MaybeSelectList )
data Inh_MaybeSelectList  = Inh_MaybeSelectList {cat_Inh_MaybeSelectList :: Catalog,flags_Inh_MaybeSelectList :: TypeCheckingFlags,imCast_Inh_MaybeSelectList :: (Maybe Type)}
data Syn_MaybeSelectList  = Syn_MaybeSelectList {annotatedTree_Syn_MaybeSelectList :: MaybeSelectList ,originalTree_Syn_MaybeSelectList :: MaybeSelectList }
wrap_MaybeSelectList :: T_MaybeSelectList  ->
                        Inh_MaybeSelectList  ->
                        Syn_MaybeSelectList 
wrap_MaybeSelectList sem (Inh_MaybeSelectList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_MaybeSelectList _lhsOannotatedTree _lhsOoriginalTree ))
sem_MaybeSelectList_Just :: T_SelectList  ->
                            T_MaybeSelectList 
sem_MaybeSelectList_Just just_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeSelectList 
              _lhsOoriginalTree :: MaybeSelectList 
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe Type)
              _justIannotatedTree :: SelectList 
              _justIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _justIoriginalTree :: SelectList 
              _justIupEnv :: Environment
              _justIupType :: (Maybe [(Text,Type)])
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
<<<<<<< HEAD
                   {-# LINE 3670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
<<<<<<< HEAD
                   {-# LINE 3676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 3694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _justOdownEnv =
                  ({-# LINE 153 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   error "missing rule: MaybeSelectList.Just.just.downEnv"
<<<<<<< HEAD
                   {-# LINE 3700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 3706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 3712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _justIannotatedTree,_justIcolExprs,_justIoriginalTree,_justIupEnv,_justIupType) =
                  just_ _justOcat _justOdownEnv _justOflags _justOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_MaybeSelectList_Nothing :: T_MaybeSelectList 
sem_MaybeSelectList_Nothing  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeSelectList 
              _lhsOoriginalTree :: MaybeSelectList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 3728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 3734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- Name --------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
         tpe                  : Either [TypeError] Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative AntiName:
         child string         : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Name:
         child ann            : Annotation 
         child is             : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Name  = AntiName (String) 
           | Name (Annotation ) (([NameComponent])) 
           deriving ( Data,Eq,Show,Typeable)
-- cata
sem_Name :: Name  ->
            T_Name 
sem_Name (AntiName _string )  =
    (sem_Name_AntiName _string )
sem_Name (Name _ann _is )  =
    (sem_Name_Name (sem_Annotation _ann ) _is )
-- semantic domain
type T_Name  = Catalog ->
               TypeCheckingFlags ->
               (Maybe Type) ->
               (Either [TypeError] Type) ->
               ( Name ,Name )
data Inh_Name  = Inh_Name {cat_Inh_Name :: Catalog,flags_Inh_Name :: TypeCheckingFlags,imCast_Inh_Name :: (Maybe Type),tpe_Inh_Name :: (Either [TypeError] Type)}
data Syn_Name  = Syn_Name {annotatedTree_Syn_Name :: Name ,originalTree_Syn_Name :: Name }
wrap_Name :: T_Name  ->
             Inh_Name  ->
             Syn_Name 
wrap_Name sem (Inh_Name _lhsIcat _lhsIflags _lhsIimCast _lhsItpe )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast _lhsItpe 
     in  (Syn_Name _lhsOannotatedTree _lhsOoriginalTree ))
sem_Name_AntiName :: String ->
                     T_Name 
sem_Name_AntiName string_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsItpe ->
         (let _lhsOannotatedTree :: Name 
              _lhsOoriginalTree :: Name 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiName string_
<<<<<<< HEAD
                   {-# LINE 3810 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3798 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiName string_
<<<<<<< HEAD
                   {-# LINE 3816 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3804 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3822 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3810 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3828 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3816 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Name_Name :: T_Annotation  ->
                 ([NameComponent]) ->
                 T_Name 
sem_Name_Name ann_ is_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsItpe ->
         (let _lhsOannotatedTree :: Name 
              _lhsOoriginalTree :: Name 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Name _annIannotatedTree is_
<<<<<<< HEAD
                   {-# LINE 3851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Name _annIoriginalTree is_
<<<<<<< HEAD
                   {-# LINE 3857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 3863 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 3869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 3875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3863 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 3881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 3887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsItpe
<<<<<<< HEAD
                   {-# LINE 3893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- NameComponentList -------------------------------------------
{-
   alternatives:
      alternative Cons:
         child hd             : {NameComponent}
         child tl             : NameComponentList 
      alternative Nil:
-}
type NameComponentList  = [(NameComponent)]
-- cata
sem_NameComponentList :: NameComponentList  ->
                         T_NameComponentList 
sem_NameComponentList list  =
    (Prelude.foldr sem_NameComponentList_Cons sem_NameComponentList_Nil list )
-- semantic domain
type T_NameComponentList  = ( )
data Inh_NameComponentList  = Inh_NameComponentList {}
data Syn_NameComponentList  = Syn_NameComponentList {}
wrap_NameComponentList :: T_NameComponentList  ->
                          Inh_NameComponentList  ->
                          Syn_NameComponentList 
wrap_NameComponentList sem (Inh_NameComponentList )  =
    (let ( ) = sem 
     in  (Syn_NameComponentList ))
sem_NameComponentList_Cons :: NameComponent ->
                              T_NameComponentList  ->
                              T_NameComponentList 
sem_NameComponentList_Cons hd_ tl_  =
    (let 
     in  ( ))
sem_NameComponentList_Nil :: T_NameComponentList 
sem_NameComponentList_Nil  =
    (let 
     in  ( ))
-- NameTypeNameListPair ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Tuple:
         child x1             : Name 
         child x2             : TypeNameList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type NameTypeNameListPair  = ( Name ,TypeNameList )
-- cata
sem_NameTypeNameListPair :: NameTypeNameListPair  ->
                            T_NameTypeNameListPair 
sem_NameTypeNameListPair ( x1,x2)  =
    (sem_NameTypeNameListPair_Tuple (sem_Name x1 ) (sem_TypeNameList x2 ) )
-- semantic domain
type T_NameTypeNameListPair  = Catalog ->
                               TypeCheckingFlags ->
                               (Maybe Type) ->
                               ( NameTypeNameListPair ,NameTypeNameListPair )
data Inh_NameTypeNameListPair  = Inh_NameTypeNameListPair {cat_Inh_NameTypeNameListPair :: Catalog,flags_Inh_NameTypeNameListPair :: TypeCheckingFlags,imCast_Inh_NameTypeNameListPair :: (Maybe Type)}
data Syn_NameTypeNameListPair  = Syn_NameTypeNameListPair {annotatedTree_Syn_NameTypeNameListPair :: NameTypeNameListPair ,originalTree_Syn_NameTypeNameListPair :: NameTypeNameListPair }
wrap_NameTypeNameListPair :: T_NameTypeNameListPair  ->
                             Inh_NameTypeNameListPair  ->
                             Syn_NameTypeNameListPair 
wrap_NameTypeNameListPair sem (Inh_NameTypeNameListPair _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_NameTypeNameListPair _lhsOannotatedTree _lhsOoriginalTree ))
sem_NameTypeNameListPair_Tuple :: T_Name  ->
                                  T_TypeNameList  ->
                                  T_NameTypeNameListPair 
sem_NameTypeNameListPair_Tuple x1_ x2_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameTypeNameListPair 
              _lhsOoriginalTree :: NameTypeNameListPair 
              _x1Ocat :: Catalog
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe Type)
              _x1Otpe :: (Either [TypeError] Type)
              _x2Ocat :: Catalog
              _x2Oflags :: TypeCheckingFlags
              _x2OimCast :: (Maybe Type)
              _x1IannotatedTree :: Name 
              _x1IoriginalTree :: Name 
              _x2IannotatedTree :: TypeNameList 
              _x2IoriginalTree :: TypeNameList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
<<<<<<< HEAD
                   {-# LINE 3993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3981 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
<<<<<<< HEAD
                   {-# LINE 3999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3987 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4011 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 3999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4017 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4023 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4011 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4017 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _x1Otpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: NameTypeNameListPair.Tuple.x1.tpe"
<<<<<<< HEAD
                   {-# LINE 4035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4023 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4041 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4047 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4053 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4041 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _x1IannotatedTree,_x1IoriginalTree) =
                  x1_ _x1Ocat _x1Oflags _x1OimCast _x1Otpe 
              ( _x2IannotatedTree,_x2IoriginalTree) =
                  x2_ _x2Ocat _x2Oflags _x2OimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- NameTypeNameListPairList ------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : NameTypeNameListPair 
         child tl             : NameTypeNameListPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type NameTypeNameListPairList  = [NameTypeNameListPair ]
-- cata
sem_NameTypeNameListPairList :: NameTypeNameListPairList  ->
                                T_NameTypeNameListPairList 
sem_NameTypeNameListPairList list  =
    (Prelude.foldr sem_NameTypeNameListPairList_Cons sem_NameTypeNameListPairList_Nil (Prelude.map sem_NameTypeNameListPair list) )
-- semantic domain
type T_NameTypeNameListPairList  = Catalog ->
                                   TypeCheckingFlags ->
                                   (Maybe Type) ->
                                   ( NameTypeNameListPairList ,NameTypeNameListPairList )
data Inh_NameTypeNameListPairList  = Inh_NameTypeNameListPairList {cat_Inh_NameTypeNameListPairList :: Catalog,flags_Inh_NameTypeNameListPairList :: TypeCheckingFlags,imCast_Inh_NameTypeNameListPairList :: (Maybe Type)}
data Syn_NameTypeNameListPairList  = Syn_NameTypeNameListPairList {annotatedTree_Syn_NameTypeNameListPairList :: NameTypeNameListPairList ,originalTree_Syn_NameTypeNameListPairList :: NameTypeNameListPairList }
wrap_NameTypeNameListPairList :: T_NameTypeNameListPairList  ->
                                 Inh_NameTypeNameListPairList  ->
                                 Syn_NameTypeNameListPairList 
wrap_NameTypeNameListPairList sem (Inh_NameTypeNameListPairList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_NameTypeNameListPairList _lhsOannotatedTree _lhsOoriginalTree ))
sem_NameTypeNameListPairList_Cons :: T_NameTypeNameListPair  ->
                                     T_NameTypeNameListPairList  ->
                                     T_NameTypeNameListPairList 
sem_NameTypeNameListPairList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameTypeNameListPairList 
              _lhsOoriginalTree :: NameTypeNameListPairList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: NameTypeNameListPair 
              _hdIoriginalTree :: NameTypeNameListPair 
              _tlIannotatedTree :: NameTypeNameListPairList 
              _tlIoriginalTree :: NameTypeNameListPairList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 4124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 4130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_NameTypeNameListPairList_Nil :: T_NameTypeNameListPairList 
sem_NameTypeNameListPairList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameTypeNameListPairList 
              _lhsOoriginalTree :: NameTypeNameListPairList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 4196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 4202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- OnExpr ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Just:
         child just           : JoinExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type OnExpr  = Maybe JoinExpr 
-- cata
sem_OnExpr :: OnExpr  ->
              T_OnExpr 
sem_OnExpr (Prelude.Just x )  =
    (sem_OnExpr_Just (sem_JoinExpr x ) )
sem_OnExpr Prelude.Nothing  =
    sem_OnExpr_Nothing
-- semantic domain
type T_OnExpr  = Catalog ->
                 Environment ->
                 TypeCheckingFlags ->
                 (Maybe Type) ->
                 ( OnExpr ,OnExpr )
data Inh_OnExpr  = Inh_OnExpr {cat_Inh_OnExpr :: Catalog,downEnv_Inh_OnExpr :: Environment,flags_Inh_OnExpr :: TypeCheckingFlags,imCast_Inh_OnExpr :: (Maybe Type)}
data Syn_OnExpr  = Syn_OnExpr {annotatedTree_Syn_OnExpr :: OnExpr ,originalTree_Syn_OnExpr :: OnExpr }
wrap_OnExpr :: T_OnExpr  ->
               Inh_OnExpr  ->
               Syn_OnExpr 
wrap_OnExpr sem (Inh_OnExpr _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast 
     in  (Syn_OnExpr _lhsOannotatedTree _lhsOoriginalTree ))
sem_OnExpr_Just :: T_JoinExpr  ->
                   T_OnExpr 
sem_OnExpr_Just just_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: OnExpr 
              _lhsOoriginalTree :: OnExpr 
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe Type)
              _justIannotatedTree :: JoinExpr 
              _justIoriginalTree :: JoinExpr 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
<<<<<<< HEAD
                   {-# LINE 4280 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4268 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
<<<<<<< HEAD
                   {-# LINE 4286 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4274 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4292 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4280 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4298 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4286 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4292 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 4310 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4298 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4316 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4322 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4310 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _justIannotatedTree,_justIoriginalTree) =
                  just_ _justOcat _justOdownEnv _justOflags _justOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_OnExpr_Nothing :: T_OnExpr 
sem_OnExpr_Nothing  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: OnExpr 
              _lhsOoriginalTree :: OnExpr 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 4339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4327 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 4345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4333 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ParamDef ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative ParamDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ParamDefTp:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data ParamDef  = ParamDef (Annotation ) (NameComponent) (TypeName ) 
               | ParamDefTp (Annotation ) (TypeName ) 
               deriving ( Data,Eq,Show,Typeable)
-- cata
sem_ParamDef :: ParamDef  ->
                T_ParamDef 
sem_ParamDef (ParamDef _ann _name _typ )  =
    (sem_ParamDef_ParamDef (sem_Annotation _ann ) _name (sem_TypeName _typ ) )
sem_ParamDef (ParamDefTp _ann _typ )  =
    (sem_ParamDef_ParamDefTp (sem_Annotation _ann ) (sem_TypeName _typ ) )
-- semantic domain
type T_ParamDef  = Catalog ->
                   TypeCheckingFlags ->
                   (Maybe Type) ->
                   ( ParamDef ,ParamDef )
data Inh_ParamDef  = Inh_ParamDef {cat_Inh_ParamDef :: Catalog,flags_Inh_ParamDef :: TypeCheckingFlags,imCast_Inh_ParamDef :: (Maybe Type)}
data Syn_ParamDef  = Syn_ParamDef {annotatedTree_Syn_ParamDef :: ParamDef ,originalTree_Syn_ParamDef :: ParamDef }
wrap_ParamDef :: T_ParamDef  ->
                 Inh_ParamDef  ->
                 Syn_ParamDef 
wrap_ParamDef sem (Inh_ParamDef _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_ParamDef _lhsOannotatedTree _lhsOoriginalTree ))
sem_ParamDef_ParamDef :: T_Annotation  ->
                         NameComponent ->
                         T_TypeName  ->
                         T_ParamDef 
sem_ParamDef_ParamDef ann_ name_ typ_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ParamDef 
              _lhsOoriginalTree :: ParamDef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _typIannotatedTree :: TypeName 
              _typInamedType :: (Maybe Type)
              _typIoriginalTree :: TypeName 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDef _annIannotatedTree name_ _typIannotatedTree
<<<<<<< HEAD
                   {-# LINE 4434 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4422 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDef _annIoriginalTree name_ _typIoriginalTree
<<<<<<< HEAD
                   {-# LINE 4440 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4428 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4446 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4434 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4452 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4440 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4458 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4446 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4464 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4452 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4470 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4458 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: ParamDef.ParamDef.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 4476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4464 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4482 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4470 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4482 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_ParamDef_ParamDefTp :: T_Annotation  ->
                           T_TypeName  ->
                           T_ParamDef 
sem_ParamDef_ParamDefTp ann_ typ_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ParamDef 
              _lhsOoriginalTree :: ParamDef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _typIannotatedTree :: TypeName 
              _typInamedType :: (Maybe Type)
              _typIoriginalTree :: TypeName 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDefTp _annIannotatedTree _typIannotatedTree
<<<<<<< HEAD
                   {-# LINE 4526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDefTp _annIoriginalTree _typIoriginalTree
<<<<<<< HEAD
                   {-# LINE 4532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4556 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: ParamDef.ParamDefTp.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 4568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4556 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ParamDefList ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : ParamDef 
         child tl             : ParamDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ParamDefList  = [ParamDef ]
-- cata
sem_ParamDefList :: ParamDefList  ->
                    T_ParamDefList 
sem_ParamDefList list  =
    (Prelude.foldr sem_ParamDefList_Cons sem_ParamDefList_Nil (Prelude.map sem_ParamDef list) )
-- semantic domain
type T_ParamDefList  = Catalog ->
                       TypeCheckingFlags ->
                       (Maybe Type) ->
                       ( ParamDefList ,ParamDefList )
data Inh_ParamDefList  = Inh_ParamDefList {cat_Inh_ParamDefList :: Catalog,flags_Inh_ParamDefList :: TypeCheckingFlags,imCast_Inh_ParamDefList :: (Maybe Type)}
data Syn_ParamDefList  = Syn_ParamDefList {annotatedTree_Syn_ParamDefList :: ParamDefList ,originalTree_Syn_ParamDefList :: ParamDefList }
wrap_ParamDefList :: T_ParamDefList  ->
                     Inh_ParamDefList  ->
                     Syn_ParamDefList 
wrap_ParamDefList sem (Inh_ParamDefList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_ParamDefList _lhsOannotatedTree _lhsOoriginalTree ))
sem_ParamDefList_Cons :: T_ParamDef  ->
                         T_ParamDefList  ->
                         T_ParamDefList 
sem_ParamDefList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ParamDefList 
              _lhsOoriginalTree :: ParamDefList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: ParamDef 
              _hdIoriginalTree :: ParamDef 
              _tlIannotatedTree :: ParamDefList 
              _tlIoriginalTree :: ParamDefList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 4657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 4663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4693 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4699 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4705 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4693 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4711 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4699 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_ParamDefList_Nil :: T_ParamDefList 
sem_ParamDefList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ParamDefList 
              _lhsOoriginalTree :: ParamDefList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 4729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4717 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 4735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4723 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- QueryExpr ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
         outerDownEnv         : Maybe Environment
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
         upType               : Maybe [(Text,Type)]
   alternatives:
      alternative CombineQueryExpr:
         child ann            : Annotation 
         child cqType         : {CombineType}
         child cqQe0          : QueryExpr 
         child cqQe1          : QueryExpr 
         visit 0:
            local tpe         : {Either [TypeError] Type}
            local annotatedTree : _
            local originalTree : _
      alternative Select:
         child ann            : Annotation 
         child selDistinct    : {Distinct}
         child selSelectList  : SelectList 
         child selTref        : TableRefList 
         child selWhere       : MaybeBoolExpr 
         child selGroupBy     : ScalarExprList 
         child selHaving      : MaybeBoolExpr 
         child selOrderBy     : ScalarExprDirectionPairList 
         child selLimit       : MaybeScalarExpr 
         child selOffset      : MaybeScalarExpr 
         visit 0:
            local tpe         : {Either [TypeError] Type}
            local selGroupBy  : _
            local annotatedTree : _
            local originalTree : _
      alternative Values:
         child ann            : Annotation 
         child qeValues       : ScalarExprListList 
         visit 0:
            local tpe         : {Either [TypeError] Type}
            local annotatedTree : _
            local originalTree : _
      alternative WithQueryExpr:
         child ann            : Annotation 
         child withs          : WithQueryList 
         child withQe         : QueryExpr 
         visit 0:
            local tpe         : {Either [TypeError] Type}
            local annotatedTree : _
            local originalTree : _
-}

data QueryExpr
    = Select { ann:: (Annotation)
             ,selDistinct :: ( Distinct)
             ,selSelectList :: ( SelectList)
             ,selTref :: ( TableRefList)
             ,selWhere :: ( MaybeBoolExpr)
             ,selGroupBy :: ( ScalarExprList)
             ,selHaving :: ( MaybeBoolExpr)
             ,selOrderBy :: ( ScalarExprDirectionPairList)
             ,selLimit :: ( MaybeScalarExpr)
             ,selOffset :: ( MaybeScalarExpr)
        }
    |  CombineQueryExpr { ann:: (Annotation)
                       ,cqType :: ( CombineType)
                       ,cqQe0 :: ( QueryExpr)
                       ,cqQe1 :: ( QueryExpr)
        }
    |  Values { ann:: (Annotation)
             ,qeValues:: (ScalarExprListList)
        }
    |  WithQueryExpr { ann :: ( Annotation)
                    ,withs :: ( WithQueryList)
                    ,withQe :: ( QueryExpr)

-- todo: represent parens explicitly in queryexpr
--    | QueryExprParens ex:: QueryExpr


    } deriving (Eq,Show,Data,Typeable)

-- cata
sem_QueryExpr :: QueryExpr  ->
                 T_QueryExpr 
sem_QueryExpr (CombineQueryExpr _ann _cqType _cqQe0 _cqQe1 )  =
    (sem_QueryExpr_CombineQueryExpr (sem_Annotation _ann ) _cqType (sem_QueryExpr _cqQe0 ) (sem_QueryExpr _cqQe1 ) )
sem_QueryExpr (Select _ann _selDistinct _selSelectList _selTref _selWhere _selGroupBy _selHaving _selOrderBy _selLimit _selOffset )  =
    (sem_QueryExpr_Select (sem_Annotation _ann ) _selDistinct (sem_SelectList _selSelectList ) (sem_TableRefList _selTref ) (sem_MaybeBoolExpr _selWhere ) (sem_ScalarExprList _selGroupBy ) (sem_MaybeBoolExpr _selHaving ) (sem_ScalarExprDirectionPairList _selOrderBy ) (sem_MaybeScalarExpr _selLimit ) (sem_MaybeScalarExpr _selOffset ) )
sem_QueryExpr (Values _ann _qeValues )  =
    (sem_QueryExpr_Values (sem_Annotation _ann ) (sem_ScalarExprListList _qeValues ) )
sem_QueryExpr (WithQueryExpr _ann _withs _withQe )  =
    (sem_QueryExpr_WithQueryExpr (sem_Annotation _ann ) (sem_WithQueryList _withs ) (sem_QueryExpr _withQe ) )
-- semantic domain
type T_QueryExpr  = Catalog ->
                    TypeCheckingFlags ->
                    (Maybe Type) ->
                    (Maybe Environment) ->
                    ( QueryExpr ,QueryExpr ,(Maybe [(Text,Type)]))
data Inh_QueryExpr  = Inh_QueryExpr {cat_Inh_QueryExpr :: Catalog,flags_Inh_QueryExpr :: TypeCheckingFlags,imCast_Inh_QueryExpr :: (Maybe Type),outerDownEnv_Inh_QueryExpr :: (Maybe Environment)}
data Syn_QueryExpr  = Syn_QueryExpr {annotatedTree_Syn_QueryExpr :: QueryExpr ,originalTree_Syn_QueryExpr :: QueryExpr ,upType_Syn_QueryExpr :: (Maybe [(Text,Type)])}
wrap_QueryExpr :: T_QueryExpr  ->
                  Inh_QueryExpr  ->
                  Syn_QueryExpr 
wrap_QueryExpr sem (Inh_QueryExpr _lhsIcat _lhsIflags _lhsIimCast _lhsIouterDownEnv )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIcat _lhsIflags _lhsIimCast _lhsIouterDownEnv 
     in  (Syn_QueryExpr _lhsOannotatedTree _lhsOoriginalTree _lhsOupType ))
sem_QueryExpr_CombineQueryExpr :: T_Annotation  ->
                                  CombineType ->
                                  T_QueryExpr  ->
                                  T_QueryExpr  ->
                                  T_QueryExpr 
sem_QueryExpr_CombineQueryExpr ann_ cqType_ cqQe0_ cqQe1_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _tpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe [(Text,Type)])
              _lhsOannotatedTree :: QueryExpr 
              _lhsOoriginalTree :: QueryExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _cqQe0Ocat :: Catalog
              _cqQe0Oflags :: TypeCheckingFlags
              _cqQe0OimCast :: (Maybe Type)
              _cqQe0OouterDownEnv :: (Maybe Environment)
              _cqQe1Ocat :: Catalog
              _cqQe1Oflags :: TypeCheckingFlags
              _cqQe1OimCast :: (Maybe Type)
              _cqQe1OouterDownEnv :: (Maybe Environment)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _cqQe0IannotatedTree :: QueryExpr 
              _cqQe0IoriginalTree :: QueryExpr 
              _cqQe0IupType :: (Maybe [(Text,Type)])
              _cqQe1IannotatedTree :: QueryExpr 
              _cqQe1IoriginalTree :: QueryExpr 
              _cqQe1IupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 84, column 9)
              _tpe =
                  ({-# LINE 84 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   do
                   a <- maybe (Left []) Right _cqQe0IupType
                   b <- maybe (Left []) Right _cqQe1IupType
                   when (map snd a /= map snd b) $ Left [IncompatibleUnionTypes (CompositeType a) (CompositeType b)]
                   return $ CompositeType a
<<<<<<< HEAD
                   {-# LINE 4876 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4864 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 92, column 9)
              _lhsOupType =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) (\(CompositeType ts) -> Just ts) _tpe
<<<<<<< HEAD
                   {-# LINE 4882 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4870 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CombineQueryExpr _annIannotatedTree cqType_ _cqQe0IannotatedTree _cqQe1IannotatedTree
<<<<<<< HEAD
                   {-# LINE 4888 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4876 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CombineQueryExpr _annIoriginalTree cqType_ _cqQe0IoriginalTree _cqQe1IoriginalTree
<<<<<<< HEAD
                   {-# LINE 4894 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4882 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 4900 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4888 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 4906 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4894 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4900 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4906 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 4930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _cqQe0Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4936 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _cqQe0Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _cqQe0OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4936 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _cqQe0OouterDownEnv =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIouterDownEnv
<<<<<<< HEAD
                   {-# LINE 4954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _cqQe1Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 4960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _cqQe1Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 4966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _cqQe1OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 4972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _cqQe1OouterDownEnv =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIouterDownEnv
<<<<<<< HEAD
                   {-# LINE 4978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 4966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _cqQe0IannotatedTree,_cqQe0IoriginalTree,_cqQe0IupType) =
                  cqQe0_ _cqQe0Ocat _cqQe0Oflags _cqQe0OimCast _cqQe0OouterDownEnv 
              ( _cqQe1IannotatedTree,_cqQe1IoriginalTree,_cqQe1IupType) =
                  cqQe1_ _cqQe1Ocat _cqQe1Oflags _cqQe1OimCast _cqQe1OouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
sem_QueryExpr_Select :: T_Annotation  ->
                        Distinct ->
                        T_SelectList  ->
                        T_TableRefList  ->
                        T_MaybeBoolExpr  ->
                        T_ScalarExprList  ->
                        T_MaybeBoolExpr  ->
                        T_ScalarExprDirectionPairList  ->
                        T_MaybeScalarExpr  ->
                        T_MaybeScalarExpr  ->
                        T_QueryExpr 
sem_QueryExpr_Select ann_ selDistinct_ selSelectList_ selTref_ selWhere_ selGroupBy_ selHaving_ selOrderBy_ selLimit_ selOffset_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _selGroupByOexpectedTypes :: ([Type])
              _selLimitOexpectedType :: (Maybe Type)
              _selOffsetOexpectedType :: (Maybe Type)
              _selSelectListOdownEnv :: Environment
              _selGroupByOdownEnv :: Environment
              _selHavingOdownEnv :: Environment
              _selOrderByOdownEnv :: Environment
              _tpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe [(Text,Type)])
              _selWhereOdownEnv :: Environment
              _lhsOannotatedTree :: QueryExpr 
              _lhsOoriginalTree :: QueryExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _selSelectListOcat :: Catalog
              _selSelectListOflags :: TypeCheckingFlags
              _selSelectListOimCast :: (Maybe Type)
              _selTrefOcat :: Catalog
              _selTrefOflags :: TypeCheckingFlags
              _selTrefOimCast :: (Maybe Type)
              _selWhereOcat :: Catalog
              _selWhereOflags :: TypeCheckingFlags
              _selWhereOimCast :: (Maybe Type)
              _selGroupByOcat :: Catalog
              _selGroupByOflags :: TypeCheckingFlags
              _selGroupByOimCast :: (Maybe Type)
              _selHavingOcat :: Catalog
              _selHavingOflags :: TypeCheckingFlags
              _selHavingOimCast :: (Maybe Type)
              _selOrderByOcat :: Catalog
              _selOrderByOflags :: TypeCheckingFlags
              _selOrderByOimCast :: (Maybe Type)
              _selLimitOcat :: Catalog
              _selLimitOdownEnv :: Environment
              _selLimitOflags :: TypeCheckingFlags
              _selLimitOimCast :: (Maybe Type)
              _selOffsetOcat :: Catalog
              _selOffsetOdownEnv :: Environment
              _selOffsetOflags :: TypeCheckingFlags
              _selOffsetOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _selSelectListIannotatedTree :: SelectList 
              _selSelectListIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _selSelectListIoriginalTree :: SelectList 
              _selSelectListIupEnv :: Environment
              _selSelectListIupType :: (Maybe [(Text,Type)])
              _selTrefIannotatedTree :: TableRefList 
              _selTrefIoriginalTree :: TableRefList 
              _selTrefIupEnv :: Environment
              _selWhereIannotatedTree :: MaybeBoolExpr 
              _selWhereIoriginalTree :: MaybeBoolExpr 
              _selGroupByIannotatedTree :: ScalarExprList 
              _selGroupByIoriginalTree :: ScalarExprList 
              _selGroupByIupTypes :: ([Maybe Type])
              _selHavingIannotatedTree :: MaybeBoolExpr 
              _selHavingIoriginalTree :: MaybeBoolExpr 
              _selOrderByIannotatedTree :: ScalarExprDirectionPairList 
              _selOrderByIoriginalTree :: ScalarExprDirectionPairList 
              _selLimitIannotatedTree :: MaybeScalarExpr 
              _selLimitIoriginalTree :: MaybeScalarExpr 
              _selLimitIupType :: (Maybe Type)
              _selOffsetIannotatedTree :: MaybeScalarExpr 
              _selOffsetIoriginalTree :: MaybeScalarExpr 
              _selOffsetIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 471, column 7)
              _selGroupByOexpectedTypes =
                  ({-# LINE 471 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 5074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 472, column 7)
              _selLimitOexpectedType =
                  ({-# LINE 472 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 5080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 473, column 7)
              _selOffsetOexpectedType =
                  ({-# LINE 473 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 5086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 37, column 9)
              _selSelectListOdownEnv =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selTrefIupEnv
<<<<<<< HEAD
                   {-# LINE 5092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 38, column 9)
              _selGroupByOdownEnv =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selTrefIupEnv
<<<<<<< HEAD
                   {-# LINE 5098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 39, column 9)
              _selHavingOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selTrefIupEnv
<<<<<<< HEAD
                   {-# LINE 5104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 59, column 9)
              _selOrderByOdownEnv =
                  ({-# LINE 59 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   orderByEnvironment _selSelectListIupEnv _selTrefIupEnv
<<<<<<< HEAD
                   {-# LINE 5110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 62, column 9)
              _tpe =
                  ({-# LINE 62 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   maybe (Left []) (Right . CompositeType) _selSelectListIupType
<<<<<<< HEAD
                   {-# LINE 5116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 67, column 9)
              _lhsOupType =
                  ({-# LINE 67 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selSelectListIupType
<<<<<<< HEAD
                   {-# LINE 5122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 70, column 9)
              _selWhereOdownEnv =
                  ({-# LINE 70 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   maybe _selTrefIupEnv
                    (\e -> createCorrelatedSubqueryEnvironment e _selTrefIupEnv)
                    _lhsIouterDownEnv
<<<<<<< HEAD
                   {-# LINE 5130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 120, column 9)
              _selGroupBy =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   case _selGroupByIannotatedTree of
                       [App e nm@(Name _ [Nmc "cube"]) es] ->
                         [App e{anType = (Just (mkTypeExtra $ ScalarType "int4"))
                               ,anErrs = []
                               } nm es]
                       x -> x
<<<<<<< HEAD
                   {-# LINE 5141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 129, column 9)
              _lhsOannotatedTree =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Select _annIannotatedTree
                          selDistinct_
                          _selSelectListIannotatedTree
                          _selTrefIannotatedTree
                          _selWhereIannotatedTree
                          _selGroupBy
                          _selHavingIannotatedTree
                          _selOrderByIannotatedTree
                          _selLimitIannotatedTree
                          _selOffsetIannotatedTree
<<<<<<< HEAD
                   {-# LINE 5156 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5144 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Select _annIannotatedTree selDistinct_ _selSelectListIannotatedTree _selTrefIannotatedTree _selWhereIannotatedTree _selGroupByIannotatedTree _selHavingIannotatedTree _selOrderByIannotatedTree _selLimitIannotatedTree _selOffsetIannotatedTree
<<<<<<< HEAD
                   {-# LINE 5162 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5150 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Select _annIoriginalTree selDistinct_ _selSelectListIoriginalTree _selTrefIoriginalTree _selWhereIoriginalTree _selGroupByIoriginalTree _selHavingIoriginalTree _selOrderByIoriginalTree _selLimitIoriginalTree _selOffsetIoriginalTree
<<<<<<< HEAD
                   {-# LINE 5168 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5156 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 5174 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5162 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5180 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5168 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5186 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5174 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5180 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 5198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5186 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selSelectListOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selSelectListOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selSelectListOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selTrefOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selTrefOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selTrefOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selWhereOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selWhereOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selWhereOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selGroupByOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selGroupByOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selGroupByOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selHavingOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selHavingOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selHavingOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOrderByOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOrderByOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOrderByOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selLimitOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _selLimitOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: QueryExpr.Select.selLimit.downEnv"
<<<<<<< HEAD
                   {-# LINE 5318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selLimitOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selLimitOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOffsetOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _selOffsetOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: QueryExpr.Select.selOffset.downEnv"
<<<<<<< HEAD
                   {-# LINE 5342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOffsetOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOffsetOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _selSelectListIannotatedTree,_selSelectListIcolExprs,_selSelectListIoriginalTree,_selSelectListIupEnv,_selSelectListIupType) =
                  selSelectList_ _selSelectListOcat _selSelectListOdownEnv _selSelectListOflags _selSelectListOimCast 
              ( _selTrefIannotatedTree,_selTrefIoriginalTree,_selTrefIupEnv) =
                  selTref_ _selTrefOcat _selTrefOflags _selTrefOimCast 
              ( _selWhereIannotatedTree,_selWhereIoriginalTree) =
                  selWhere_ _selWhereOcat _selWhereOdownEnv _selWhereOflags _selWhereOimCast 
              ( _selGroupByIannotatedTree,_selGroupByIoriginalTree,_selGroupByIupTypes) =
                  selGroupBy_ _selGroupByOcat _selGroupByOdownEnv _selGroupByOexpectedTypes _selGroupByOflags _selGroupByOimCast 
              ( _selHavingIannotatedTree,_selHavingIoriginalTree) =
                  selHaving_ _selHavingOcat _selHavingOdownEnv _selHavingOflags _selHavingOimCast 
              ( _selOrderByIannotatedTree,_selOrderByIoriginalTree) =
                  selOrderBy_ _selOrderByOcat _selOrderByOdownEnv _selOrderByOflags _selOrderByOimCast 
              ( _selLimitIannotatedTree,_selLimitIoriginalTree,_selLimitIupType) =
                  selLimit_ _selLimitOcat _selLimitOdownEnv _selLimitOexpectedType _selLimitOflags _selLimitOimCast 
              ( _selOffsetIannotatedTree,_selOffsetIoriginalTree,_selOffsetIupType) =
                  selOffset_ _selOffsetOcat _selOffsetOdownEnv _selOffsetOexpectedType _selOffsetOflags _selOffsetOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
sem_QueryExpr_Values :: T_Annotation  ->
                        T_ScalarExprListList  ->
                        T_QueryExpr 
sem_QueryExpr_Values ann_ qeValues_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _tpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: QueryExpr 
              _lhsOoriginalTree :: QueryExpr 
              _lhsOupType :: (Maybe [(Text,Type)])
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _qeValuesOcat :: Catalog
              _qeValuesOflags :: TypeCheckingFlags
              _qeValuesOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _qeValuesIannotatedTree :: ScalarExprListList 
              _qeValuesIoriginalTree :: ScalarExprListList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 82, column 9)
              _tpe =
                  ({-# LINE 82 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 5402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5390 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Values _annIannotatedTree _qeValuesIannotatedTree
<<<<<<< HEAD
                   {-# LINE 5408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Values _annIoriginalTree _qeValuesIoriginalTree
<<<<<<< HEAD
                   {-# LINE 5414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 5420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 5426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOupType =
                  ({-# LINE 18 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   error "missing rule: QueryExpr.Values.lhs.upType"
<<<<<<< HEAD
                   {-# LINE 5432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 5456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _qeValuesOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5462 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _qeValuesOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _qeValuesOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5462 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _qeValuesIannotatedTree,_qeValuesIoriginalTree) =
                  qeValues_ _qeValuesOcat _qeValuesOflags _qeValuesOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
sem_QueryExpr_WithQueryExpr :: T_Annotation  ->
                               T_WithQueryList  ->
                               T_QueryExpr  ->
                               T_QueryExpr 
sem_QueryExpr_WithQueryExpr ann_ withs_ withQe_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _tpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: QueryExpr 
              _lhsOoriginalTree :: QueryExpr 
              _lhsOupType :: (Maybe [(Text,Type)])
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _withsOcat :: Catalog
              _withsOflags :: TypeCheckingFlags
              _withsOimCast :: (Maybe Type)
              _withQeOcat :: Catalog
              _withQeOflags :: TypeCheckingFlags
              _withQeOimCast :: (Maybe Type)
              _withQeOouterDownEnv :: (Maybe Environment)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _withsIannotatedTree :: WithQueryList 
              _withsIoriginalTree :: WithQueryList 
              _withQeIannotatedTree :: QueryExpr 
              _withQeIoriginalTree :: QueryExpr 
              _withQeIupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 82, column 9)
              _tpe =
                  ({-# LINE 82 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 5516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQueryExpr _annIannotatedTree _withsIannotatedTree _withQeIannotatedTree
<<<<<<< HEAD
                   {-# LINE 5522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQueryExpr _annIoriginalTree _withsIoriginalTree _withQeIoriginalTree
<<<<<<< HEAD
                   {-# LINE 5528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 5534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 5540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOupType =
                  ({-# LINE 18 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _withQeIupType
<<<<<<< HEAD
                   {-# LINE 5546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 5570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _withsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _withsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _withsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _withQeOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _withQeOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _withQeOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _withQeOouterDownEnv =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIouterDownEnv
<<<<<<< HEAD
                   {-# LINE 5612 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _withsIannotatedTree,_withsIoriginalTree) =
                  withs_ _withsOcat _withsOflags _withsOimCast 
              ( _withQeIannotatedTree,_withQeIoriginalTree,_withQeIupType) =
                  withQe_ _withQeOcat _withQeOflags _withQeOimCast _withQeOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- Root --------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Root:
         child statements     : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Root  = Root (StatementList ) 
           deriving ( Show)
-- cata
sem_Root :: Root  ->
            T_Root 
sem_Root (Root _statements )  =
    (sem_Root_Root (sem_StatementList _statements ) )
-- semantic domain
type T_Root  = Catalog ->
               TypeCheckingFlags ->
               ( Root ,Root )
data Inh_Root  = Inh_Root {cat_Inh_Root :: Catalog,flags_Inh_Root :: TypeCheckingFlags}
data Syn_Root  = Syn_Root {annotatedTree_Syn_Root :: Root ,originalTree_Syn_Root :: Root }
wrap_Root :: T_Root  ->
             Inh_Root  ->
             Syn_Root 
wrap_Root sem (Inh_Root _lhsIcat _lhsIflags )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags 
     in  (Syn_Root _lhsOannotatedTree _lhsOoriginalTree ))
sem_Root_Root :: T_StatementList  ->
                 T_Root 
sem_Root_Root statements_  =
    (\ _lhsIcat
       _lhsIflags ->
         (let _statementsOimCast :: (Maybe Type)
              _lhsOannotatedTree :: Root 
              _lhsOoriginalTree :: Root 
              _statementsOcat :: Catalog
              _statementsOflags :: TypeCheckingFlags
              _statementsIannotatedTree :: StatementList 
              _statementsIoriginalTree :: StatementList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag"(line 109, column 8)
              _statementsOimCast =
                  ({-# LINE 109 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 5672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5660 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Root _statementsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 5678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5666 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Root _statementsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 5684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 5690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 5696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _statementsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _statementsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _statementsIannotatedTree,_statementsIoriginalTree) =
                  statements_ _statementsOcat _statementsOflags _statementsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- RowConstraint -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative NotNullConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative NullConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowCheckConstraint:
         child ann            : Annotation 
         child name           : {String}
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowPrimaryKeyConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowReferenceConstraint:
         child ann            : Annotation 
         child name           : {String}
         child table          : Name 
         child att            : {Maybe NameComponent}
         child onUpdate       : {Cascade}
         child onDelete       : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowUniqueConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data RowConstraint  = NotNullConstraint (Annotation ) (String) 
                    | NullConstraint (Annotation ) (String) 
                    | RowCheckConstraint (Annotation ) (String) (ScalarExpr ) 
                    | RowPrimaryKeyConstraint (Annotation ) (String) 
                    | RowReferenceConstraint (Annotation ) (String) (Name ) ((Maybe NameComponent)) (Cascade) (Cascade) 
                    | RowUniqueConstraint (Annotation ) (String) 
                    deriving ( Data,Eq,Show,Typeable)
-- cata
sem_RowConstraint :: RowConstraint  ->
                     T_RowConstraint 
sem_RowConstraint (NotNullConstraint _ann _name )  =
    (sem_RowConstraint_NotNullConstraint (sem_Annotation _ann ) _name )
sem_RowConstraint (NullConstraint _ann _name )  =
    (sem_RowConstraint_NullConstraint (sem_Annotation _ann ) _name )
sem_RowConstraint (RowCheckConstraint _ann _name _expr )  =
    (sem_RowConstraint_RowCheckConstraint (sem_Annotation _ann ) _name (sem_ScalarExpr _expr ) )
sem_RowConstraint (RowPrimaryKeyConstraint _ann _name )  =
    (sem_RowConstraint_RowPrimaryKeyConstraint (sem_Annotation _ann ) _name )
sem_RowConstraint (RowReferenceConstraint _ann _name _table _att _onUpdate _onDelete )  =
    (sem_RowConstraint_RowReferenceConstraint (sem_Annotation _ann ) _name (sem_Name _table ) _att _onUpdate _onDelete )
sem_RowConstraint (RowUniqueConstraint _ann _name )  =
    (sem_RowConstraint_RowUniqueConstraint (sem_Annotation _ann ) _name )
-- semantic domain
type T_RowConstraint  = Catalog ->
                        TypeCheckingFlags ->
                        (Maybe Type) ->
                        ( RowConstraint ,RowConstraint )
data Inh_RowConstraint  = Inh_RowConstraint {cat_Inh_RowConstraint :: Catalog,flags_Inh_RowConstraint :: TypeCheckingFlags,imCast_Inh_RowConstraint :: (Maybe Type)}
data Syn_RowConstraint  = Syn_RowConstraint {annotatedTree_Syn_RowConstraint :: RowConstraint ,originalTree_Syn_RowConstraint :: RowConstraint }
wrap_RowConstraint :: T_RowConstraint  ->
                      Inh_RowConstraint  ->
                      Syn_RowConstraint 
wrap_RowConstraint sem (Inh_RowConstraint _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_RowConstraint _lhsOannotatedTree _lhsOoriginalTree ))
sem_RowConstraint_NotNullConstraint :: T_Annotation  ->
                                       String ->
                                       T_RowConstraint 
sem_RowConstraint_NotNullConstraint ann_ name_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraint 
              _lhsOoriginalTree :: RowConstraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NotNullConstraint _annIannotatedTree name_
<<<<<<< HEAD
                   {-# LINE 5820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5808 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NotNullConstraint _annIoriginalTree name_
<<<<<<< HEAD
                   {-# LINE 5826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5814 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 5832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 5838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5844 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5850 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5856 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5844 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: RowConstraint.NotNullConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 5862 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5850 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_RowConstraint_NullConstraint :: T_Annotation  ->
                                    String ->
                                    T_RowConstraint 
sem_RowConstraint_NullConstraint ann_ name_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraint 
              _lhsOoriginalTree :: RowConstraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullConstraint _annIannotatedTree name_
<<<<<<< HEAD
                   {-# LINE 5886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullConstraint _annIoriginalTree name_
<<<<<<< HEAD
                   {-# LINE 5892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 5898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 5904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: RowConstraint.NullConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 5928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_RowConstraint_RowCheckConstraint :: T_Annotation  ->
                                        String ->
                                        T_ScalarExpr  ->
                                        T_RowConstraint 
sem_RowConstraint_RowCheckConstraint ann_ name_ expr_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraint 
              _lhsOoriginalTree :: RowConstraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedType :: (Maybe Type)
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowCheckConstraint _annIannotatedTree name_ _exprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 5962 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5950 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowCheckConstraint _annIoriginalTree name_ _exprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 5968 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5956 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 5974 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5962 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 5980 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5968 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 5986 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5974 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 5992 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5980 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 5998 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5986 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: RowConstraint.RowCheckConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 6004 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5992 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6010 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 5998 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: RowConstraint.RowCheckConstraint.expr.downEnv"
<<<<<<< HEAD
                   {-# LINE 6016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6004 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: RowConstraint.RowCheckConstraint.expr.expectedType"
<<<<<<< HEAD
                   {-# LINE 6022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6010 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6028 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 6034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_RowConstraint_RowPrimaryKeyConstraint :: T_Annotation  ->
                                             String ->
                                             T_RowConstraint 
sem_RowConstraint_RowPrimaryKeyConstraint ann_ name_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraint 
              _lhsOoriginalTree :: RowConstraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowPrimaryKeyConstraint _annIannotatedTree name_
<<<<<<< HEAD
                   {-# LINE 6060 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowPrimaryKeyConstraint _annIoriginalTree name_
<<<<<<< HEAD
                   {-# LINE 6066 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6054 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 6072 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6060 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 6078 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6066 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6084 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6072 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6090 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6078 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 6096 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6084 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: RowConstraint.RowPrimaryKeyConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 6102 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6090 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_RowConstraint_RowReferenceConstraint :: T_Annotation  ->
                                            String ->
                                            T_Name  ->
                                            (Maybe NameComponent) ->
                                            Cascade ->
                                            Cascade ->
                                            T_RowConstraint 
sem_RowConstraint_RowReferenceConstraint ann_ name_ table_ att_ onUpdate_ onDelete_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraint 
              _lhsOoriginalTree :: RowConstraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe Type)
              _tableOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tableIannotatedTree :: Name 
              _tableIoriginalTree :: Name 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowReferenceConstraint _annIannotatedTree name_ _tableIannotatedTree att_ onUpdate_ onDelete_
<<<<<<< HEAD
                   {-# LINE 6136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowReferenceConstraint _annIoriginalTree name_ _tableIoriginalTree att_ onUpdate_ onDelete_
<<<<<<< HEAD
                   {-# LINE 6142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 6148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 6154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 6172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: RowConstraint.RowReferenceConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 6178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 6196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _tableOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: RowConstraint.RowReferenceConstraint.table.tpe"
<<<<<<< HEAD
                   {-# LINE 6202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_RowConstraint_RowUniqueConstraint :: T_Annotation  ->
                                         String ->
                                         T_RowConstraint 
sem_RowConstraint_RowUniqueConstraint ann_ name_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraint 
              _lhsOoriginalTree :: RowConstraint 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowUniqueConstraint _annIannotatedTree name_
<<<<<<< HEAD
                   {-# LINE 6228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowUniqueConstraint _annIoriginalTree name_
<<<<<<< HEAD
                   {-# LINE 6234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 6240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 6246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 6264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: RowConstraint.RowUniqueConstraint.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 6270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- RowConstraintList -------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : RowConstraint 
         child tl             : RowConstraintList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type RowConstraintList  = [RowConstraint ]
-- cata
sem_RowConstraintList :: RowConstraintList  ->
                         T_RowConstraintList 
sem_RowConstraintList list  =
    (Prelude.foldr sem_RowConstraintList_Cons sem_RowConstraintList_Nil (Prelude.map sem_RowConstraint list) )
-- semantic domain
type T_RowConstraintList  = Catalog ->
                            TypeCheckingFlags ->
                            (Maybe Type) ->
                            ( RowConstraintList ,RowConstraintList )
data Inh_RowConstraintList  = Inh_RowConstraintList {cat_Inh_RowConstraintList :: Catalog,flags_Inh_RowConstraintList :: TypeCheckingFlags,imCast_Inh_RowConstraintList :: (Maybe Type)}
data Syn_RowConstraintList  = Syn_RowConstraintList {annotatedTree_Syn_RowConstraintList :: RowConstraintList ,originalTree_Syn_RowConstraintList :: RowConstraintList }
wrap_RowConstraintList :: T_RowConstraintList  ->
                          Inh_RowConstraintList  ->
                          Syn_RowConstraintList 
wrap_RowConstraintList sem (Inh_RowConstraintList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_RowConstraintList _lhsOannotatedTree _lhsOoriginalTree ))
sem_RowConstraintList_Cons :: T_RowConstraint  ->
                              T_RowConstraintList  ->
                              T_RowConstraintList 
sem_RowConstraintList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraintList 
              _lhsOoriginalTree :: RowConstraintList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: RowConstraint 
              _hdIoriginalTree :: RowConstraint 
              _tlIannotatedTree :: RowConstraintList 
              _tlIoriginalTree :: RowConstraintList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 6339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6327 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 6345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6333 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 6351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 6357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 6375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 6393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_RowConstraintList_Nil :: T_RowConstraintList 
sem_RowConstraintList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraintList 
              _lhsOoriginalTree :: RowConstraintList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 6411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 6417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 6423 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 6429 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExpr --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         expectedType         : Maybe Type
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         colExprs             : [(NameComponent,Maybe Type,ScalarExpr)]
         originalTree         : SELF 
         upType               : Maybe Type
   alternatives:
      alternative AggregateApp:
         child ann            : Annotation 
         child aggDistinct    : {Distinct}
         child fn             : ScalarExpr 
         child orderBy        : ScalarExprDirectionPairList 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative AntiScalarExpr:
         child string         : {String}
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative App:
         child ann            : Annotation 
         child funName        : Name 
         child args           : ScalarExprList 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] Type}
            local ttpe        : {Either [TypeError] ([Type],Type)}
            local annotatedTree : _
            local originalTree : _
      alternative BinaryOp:
         child ann            : Annotation 
         child opName         : Name 
         child arg0           : ScalarExpr 
         child arg1           : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] Type}
            local ttpe        : {Either [TypeError] ([Type],Type)}
            local _tup1       : {(Maybe Type,Maybe Type)}
            local annotatedTree : _
            local originalTree : _
      alternative BooleanLit:
         child ann            : Annotation 
         child b              : {Bool}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Case:
         child ann            : Annotation 
         child cases          : CaseScalarExprListScalarExprPairList 
         child els            : MaybeScalarExpr 
         visit 0:
            local upType      : _
            local whenTypes   : _
            local thenTypes   : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative CaseSimple:
         child ann            : Annotation 
         child value          : ScalarExpr 
         child cases          : CaseScalarExprListScalarExprPairList 
         child els            : MaybeScalarExpr 
         visit 0:
            local upType      : _
            local whenTypes   : _
            local thenTypes   : _
            local whent       : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Cast:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         child tn             : TypeName 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Exists:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Extract:
         child ann            : Annotation 
         child field          : {ExtractField}
         child e              : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Identifier:
         child ann            : Annotation 
         child i              : Name 
         visit 0:
            local upType      : _
            local elkp        : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative InPredicate:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         child i              : {Bool}
         child list           : InList 
         visit 0:
            local upType      : _
            local rt          : {Either [TypeError] Type}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Interval:
         child ann            : Annotation 
         child value          : {String}
         child field          : {IntervalField}
         child prec           : {Maybe Int}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative LiftApp:
         child ann            : Annotation 
         child oper           : Name 
         child flav           : {LiftFlavour}
         child args           : ScalarExprList 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative NullLit:
         child ann            : Annotation 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative NumberLit:
         child ann            : Annotation 
         child d              : {String}
         visit 0:
            local upType      : _
            local tpe         : _
            local digChars    : _
            local annotatedTree : _
            local originalTree : _
      alternative Parens:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Placeholder:
         child ann            : Annotation 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative PositionalArg:
         child ann            : Annotation 
         child p              : {Integer}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative PostfixOp:
         child ann            : Annotation 
         child opName         : Name 
         child arg            : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] Type}
            local ttpe        : {Either [TypeError] ([Type],Type)}
            local annotatedTree : _
            local originalTree : _
      alternative PrefixOp:
         child ann            : Annotation 
         child opName         : Name 
         child arg            : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] Type}
            local ttpe        : {Either [TypeError] ([Type],Type)}
            local annotatedTree : _
            local originalTree : _
      alternative QStar:
         child ann            : Annotation 
         child q              : {NameComponent}
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] Type}
            local starCS      : _
            local annotatedTree : _
            local originalTree : _
      alternative ScalarSubQuery:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative SpecialOp:
         child ann            : Annotation 
         child opName         : Name 
         child args           : ScalarExprList 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] Type}
            local ttpe        : {Either [TypeError] ([Type],Type)}
            local annotatedTree : _
            local originalTree : _
      alternative Star:
         child ann            : Annotation 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] Type}
            local starCS      : _
            local annotatedTree : _
            local originalTree : _
      alternative StringLit:
         child ann            : Annotation 
         child value          : {String}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative TypedStringLit:
         child ann            : Annotation 
         child tn             : TypeName 
         child value          : {String}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative WindowApp:
         child ann            : Annotation 
         child fn             : ScalarExpr 
         child partitionBy    : ScalarExprList 
         child orderBy        : ScalarExprDirectionPairList 
         child frm            : {Maybe FrameClause}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
-}
data ScalarExpr  = AggregateApp (Annotation ) (Distinct) (ScalarExpr ) (ScalarExprDirectionPairList ) 
                 | AntiScalarExpr (String) 
                 | App (Annotation ) (Name ) (ScalarExprList ) 
                 | BinaryOp (Annotation ) (Name ) (ScalarExpr ) (ScalarExpr ) 
                 | BooleanLit (Annotation ) (Bool) 
                 | Case (Annotation ) (CaseScalarExprListScalarExprPairList ) (MaybeScalarExpr ) 
                 | CaseSimple (Annotation ) (ScalarExpr ) (CaseScalarExprListScalarExprPairList ) (MaybeScalarExpr ) 
                 | Cast (Annotation ) (ScalarExpr ) (TypeName ) 
                 | Exists (Annotation ) (QueryExpr ) 
                 | Extract (Annotation ) (ExtractField) (ScalarExpr ) 
                 | Identifier (Annotation ) (Name ) 
                 | InPredicate (Annotation ) (ScalarExpr ) (Bool) (InList ) 
                 | Interval (Annotation ) (String) (IntervalField) ((Maybe Int)) 
                 | LiftApp (Annotation ) (Name ) (LiftFlavour) (ScalarExprList ) 
                 | NullLit (Annotation ) 
                 | NumberLit (Annotation ) (String) 
                 | Parens (Annotation ) (ScalarExpr ) 
                 | Placeholder (Annotation ) 
                 | PositionalArg (Annotation ) (Integer) 
                 | PostfixOp (Annotation ) (Name ) (ScalarExpr ) 
                 | PrefixOp (Annotation ) (Name ) (ScalarExpr ) 
                 | QStar (Annotation ) (NameComponent) 
                 | ScalarSubQuery (Annotation ) (QueryExpr ) 
                 | SpecialOp (Annotation ) (Name ) (ScalarExprList ) 
                 | Star (Annotation ) 
                 | StringLit (Annotation ) (String) 
                 | TypedStringLit (Annotation ) (TypeName ) (String) 
                 | WindowApp (Annotation ) (ScalarExpr ) (ScalarExprList ) (ScalarExprDirectionPairList ) ((Maybe FrameClause)) 
                 deriving ( Data,Eq,Show,Typeable)
-- cata
sem_ScalarExpr :: ScalarExpr  ->
                  T_ScalarExpr 
sem_ScalarExpr (AggregateApp _ann _aggDistinct _fn _orderBy )  =
    (sem_ScalarExpr_AggregateApp (sem_Annotation _ann ) _aggDistinct (sem_ScalarExpr _fn ) (sem_ScalarExprDirectionPairList _orderBy ) )
sem_ScalarExpr (AntiScalarExpr _string )  =
    (sem_ScalarExpr_AntiScalarExpr _string )
sem_ScalarExpr (App _ann _funName _args )  =
    (sem_ScalarExpr_App (sem_Annotation _ann ) (sem_Name _funName ) (sem_ScalarExprList _args ) )
sem_ScalarExpr (BinaryOp _ann _opName _arg0 _arg1 )  =
    (sem_ScalarExpr_BinaryOp (sem_Annotation _ann ) (sem_Name _opName ) (sem_ScalarExpr _arg0 ) (sem_ScalarExpr _arg1 ) )
sem_ScalarExpr (BooleanLit _ann _b )  =
    (sem_ScalarExpr_BooleanLit (sem_Annotation _ann ) _b )
sem_ScalarExpr (Case _ann _cases _els )  =
    (sem_ScalarExpr_Case (sem_Annotation _ann ) (sem_CaseScalarExprListScalarExprPairList _cases ) (sem_MaybeScalarExpr _els ) )
sem_ScalarExpr (CaseSimple _ann _value _cases _els )  =
    (sem_ScalarExpr_CaseSimple (sem_Annotation _ann ) (sem_ScalarExpr _value ) (sem_CaseScalarExprListScalarExprPairList _cases ) (sem_MaybeScalarExpr _els ) )
sem_ScalarExpr (Cast _ann _expr _tn )  =
    (sem_ScalarExpr_Cast (sem_Annotation _ann ) (sem_ScalarExpr _expr ) (sem_TypeName _tn ) )
sem_ScalarExpr (Exists _ann _sel )  =
    (sem_ScalarExpr_Exists (sem_Annotation _ann ) (sem_QueryExpr _sel ) )
sem_ScalarExpr (Extract _ann _field _e )  =
    (sem_ScalarExpr_Extract (sem_Annotation _ann ) _field (sem_ScalarExpr _e ) )
sem_ScalarExpr (Identifier _ann _i )  =
    (sem_ScalarExpr_Identifier (sem_Annotation _ann ) (sem_Name _i ) )
sem_ScalarExpr (InPredicate _ann _expr _i _list )  =
    (sem_ScalarExpr_InPredicate (sem_Annotation _ann ) (sem_ScalarExpr _expr ) _i (sem_InList _list ) )
sem_ScalarExpr (Interval _ann _value _field _prec )  =
    (sem_ScalarExpr_Interval (sem_Annotation _ann ) _value _field _prec )
sem_ScalarExpr (LiftApp _ann _oper _flav _args )  =
    (sem_ScalarExpr_LiftApp (sem_Annotation _ann ) (sem_Name _oper ) _flav (sem_ScalarExprList _args ) )
sem_ScalarExpr (NullLit _ann )  =
    (sem_ScalarExpr_NullLit (sem_Annotation _ann ) )
sem_ScalarExpr (NumberLit _ann _d )  =
    (sem_ScalarExpr_NumberLit (sem_Annotation _ann ) _d )
sem_ScalarExpr (Parens _ann _ex )  =
    (sem_ScalarExpr_Parens (sem_Annotation _ann ) (sem_ScalarExpr _ex ) )
sem_ScalarExpr (Placeholder _ann )  =
    (sem_ScalarExpr_Placeholder (sem_Annotation _ann ) )
sem_ScalarExpr (PositionalArg _ann _p )  =
    (sem_ScalarExpr_PositionalArg (sem_Annotation _ann ) _p )
sem_ScalarExpr (PostfixOp _ann _opName _arg )  =
    (sem_ScalarExpr_PostfixOp (sem_Annotation _ann ) (sem_Name _opName ) (sem_ScalarExpr _arg ) )
sem_ScalarExpr (PrefixOp _ann _opName _arg )  =
    (sem_ScalarExpr_PrefixOp (sem_Annotation _ann ) (sem_Name _opName ) (sem_ScalarExpr _arg ) )
sem_ScalarExpr (QStar _ann _q )  =
    (sem_ScalarExpr_QStar (sem_Annotation _ann ) _q )
sem_ScalarExpr (ScalarSubQuery _ann _sel )  =
    (sem_ScalarExpr_ScalarSubQuery (sem_Annotation _ann ) (sem_QueryExpr _sel ) )
sem_ScalarExpr (SpecialOp _ann _opName _args )  =
    (sem_ScalarExpr_SpecialOp (sem_Annotation _ann ) (sem_Name _opName ) (sem_ScalarExprList _args ) )
sem_ScalarExpr (Star _ann )  =
    (sem_ScalarExpr_Star (sem_Annotation _ann ) )
sem_ScalarExpr (StringLit _ann _value )  =
    (sem_ScalarExpr_StringLit (sem_Annotation _ann ) _value )
sem_ScalarExpr (TypedStringLit _ann _tn _value )  =
    (sem_ScalarExpr_TypedStringLit (sem_Annotation _ann ) (sem_TypeName _tn ) _value )
sem_ScalarExpr (WindowApp _ann _fn _partitionBy _orderBy _frm )  =
    (sem_ScalarExpr_WindowApp (sem_Annotation _ann ) (sem_ScalarExpr _fn ) (sem_ScalarExprList _partitionBy ) (sem_ScalarExprDirectionPairList _orderBy ) _frm )
-- semantic domain
type T_ScalarExpr  = Catalog ->
                     Environment ->
                     (Maybe Type) ->
                     TypeCheckingFlags ->
                     (Maybe Type) ->
                     ( ScalarExpr ,([(NameComponent,Maybe Type,ScalarExpr)]),ScalarExpr ,(Maybe Type))
data Inh_ScalarExpr  = Inh_ScalarExpr {cat_Inh_ScalarExpr :: Catalog,downEnv_Inh_ScalarExpr :: Environment,expectedType_Inh_ScalarExpr :: (Maybe Type),flags_Inh_ScalarExpr :: TypeCheckingFlags,imCast_Inh_ScalarExpr :: (Maybe Type)}
data Syn_ScalarExpr  = Syn_ScalarExpr {annotatedTree_Syn_ScalarExpr :: ScalarExpr ,colExprs_Syn_ScalarExpr :: ([(NameComponent,Maybe Type,ScalarExpr)]),originalTree_Syn_ScalarExpr :: ScalarExpr ,upType_Syn_ScalarExpr :: (Maybe Type)}
wrap_ScalarExpr :: T_ScalarExpr  ->
                   Inh_ScalarExpr  ->
                   Syn_ScalarExpr 
wrap_ScalarExpr sem (Inh_ScalarExpr _lhsIcat _lhsIdownEnv _lhsIexpectedType _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType) = sem _lhsIcat _lhsIdownEnv _lhsIexpectedType _lhsIflags _lhsIimCast 
     in  (Syn_ScalarExpr _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree _lhsOupType ))
sem_ScalarExpr_AggregateApp :: T_Annotation  ->
                               Distinct ->
                               T_ScalarExpr  ->
                               T_ScalarExprDirectionPairList  ->
                               T_ScalarExpr 
sem_ScalarExpr_AggregateApp ann_ aggDistinct_ fn_ orderBy_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _fnOexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _fnOcat :: Catalog
              _fnOdownEnv :: Environment
              _fnOflags :: TypeCheckingFlags
              _fnOimCast :: (Maybe Type)
              _orderByOcat :: Catalog
              _orderByOdownEnv :: Environment
              _orderByOflags :: TypeCheckingFlags
              _orderByOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _fnIannotatedTree :: ScalarExpr 
              _fnIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _fnIoriginalTree :: ScalarExpr 
              _fnIupType :: (Maybe Type)
              _orderByIannotatedTree :: ScalarExprDirectionPairList 
              _orderByIoriginalTree :: ScalarExprDirectionPairList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 6847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 6853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 6859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 6868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6856 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 214, column 10)
              _tpe =
                  ({-# LINE 214 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _fnIoriginalTree of
                     (App _ fnm@(Name _ [Nmc "count"]) [Star _]) ->
                          fmap snd $ tcAppLike (tcfDialect _lhsIflags) _lhsIcat fnm [Just UnknownType]
                     _ -> maybe (Left []) Right _fnIupType
<<<<<<< HEAD
                   {-# LINE 6877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 459, column 28)
              _fnOexpectedType =
                  ({-# LINE 459 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 6883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 6904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AggregateApp _annIannotatedTree aggDistinct_ _fnIannotatedTree _orderByIannotatedTree
<<<<<<< HEAD
                   {-# LINE 6910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AggregateApp _annIoriginalTree aggDistinct_ _fnIoriginalTree _orderByIoriginalTree
<<<<<<< HEAD
                   {-# LINE 6916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6901 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 6922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6907 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 6928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6913 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6940 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6946 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 6952 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6937 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6958 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 6964 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _orderByOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 6970 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _orderByOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 6976 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _orderByOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 6982 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _orderByOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 6988 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _fnIannotatedTree,_fnIcolExprs,_fnIoriginalTree,_fnIupType) =
                  fn_ _fnOcat _fnOdownEnv _fnOexpectedType _fnOflags _fnOimCast 
              ( _orderByIannotatedTree,_orderByIoriginalTree) =
                  orderBy_ _orderByOcat _orderByOdownEnv _orderByOflags _orderByOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_AntiScalarExpr :: String ->
                                 T_ScalarExpr 
sem_ScalarExpr_AntiScalarExpr string_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Maybe Type)
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _lhsOupType =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 6998 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 444, column 9)
              _tpe =
                  ({-# LINE 444 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 7019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7004 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiScalarExpr string_
<<<<<<< HEAD
                   {-# LINE 7025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7010 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiScalarExpr string_
<<<<<<< HEAD
                   {-# LINE 7031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 7037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 7043 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7028 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOcolExprs =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   error "missing rule: ScalarExpr.AntiScalarExpr.lhs.colExprs"
<<<<<<< HEAD
                   {-# LINE 7049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_App :: T_Annotation  ->
                      T_Name  ->
                      T_ScalarExprList  ->
                      T_ScalarExpr 
sem_ScalarExpr_App ann_ funName_ args_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _funNameOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _argsOexpectedTypes :: ([Type])
              _ttpe :: (Either [TypeError] ([Type],Type))
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _funNameOcat :: Catalog
              _funNameOflags :: TypeCheckingFlags
              _funNameOimCast :: (Maybe Type)
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _funNameIannotatedTree :: Name 
              _funNameIoriginalTree :: Name 
              _argsIannotatedTree :: ScalarExprList 
              _argsIoriginalTree :: ScalarExprList 
              _argsIupTypes :: ([Maybe Type])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 7092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7077 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7083 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 7104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7089 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 7113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 66, column 9)
              _funNameOtpe =
                  ({-# LINE 66 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 7119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 185, column 10)
              _tpe =
                  ({-# LINE 185 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
<<<<<<< HEAD
                   {-# LINE 7125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 187, column 10)
              _argsOexpectedTypes =
                  ({-# LINE 187 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const []) id $ fmap fst _ttpe
<<<<<<< HEAD
                   {-# LINE 7131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 188, column 10)
              _ttpe =
                  ({-# LINE 188 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _originalTree of
                     (App _ (Name _ [Nmc "count"]) [Star _]) ->
                         tcAppLike (tcfDialect _lhsIflags)
                                   _lhsIcat _funNameIoriginalTree
                                   [Just UnknownType]
                     _ -> tcAppLike (tcfDialect _lhsIflags)
                                    _lhsIcat _funNameIoriginalTree _argsIupTypes
<<<<<<< HEAD
                   {-# LINE 7143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7128 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 7164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   App _annIannotatedTree _funNameIannotatedTree _argsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 7170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   App _annIoriginalTree _funNameIoriginalTree _argsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 7176 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 7182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 7188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7194 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7176 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7200 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _funNameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _funNameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7194 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _funNameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 7218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7200 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7224 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 7230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 7242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7224 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _funNameIannotatedTree,_funNameIoriginalTree) =
                  funName_ _funNameOcat _funNameOflags _funNameOimCast _funNameOtpe 
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOcat _argsOdownEnv _argsOexpectedTypes _argsOflags _argsOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_BinaryOp :: T_Annotation  ->
                           T_Name  ->
                           T_ScalarExpr  ->
                           T_ScalarExpr  ->
                           T_ScalarExpr 
sem_ScalarExpr_BinaryOp ann_ opName_ arg0_ arg1_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _opNameOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _ttpe :: (Either [TypeError] ([Type],Type))
              __tup1 :: ((Maybe Type,Maybe Type))
              _arg0OexpectedType :: (Maybe Type)
              _arg1OexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckingFlags
              _opNameOimCast :: (Maybe Type)
              _arg0Ocat :: Catalog
              _arg0OdownEnv :: Environment
              _arg0Oflags :: TypeCheckingFlags
              _arg0OimCast :: (Maybe Type)
              _arg1Ocat :: Catalog
              _arg1OdownEnv :: Environment
              _arg1Oflags :: TypeCheckingFlags
              _arg1OimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _opNameIannotatedTree :: Name 
              _opNameIoriginalTree :: Name 
              _arg0IannotatedTree :: ScalarExpr 
              _arg0IcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _arg0IoriginalTree :: ScalarExpr 
              _arg0IupType :: (Maybe Type)
              _arg1IannotatedTree :: ScalarExpr 
              _arg1IcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _arg1IoriginalTree :: ScalarExpr 
              _arg1IupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 7303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 7315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 7324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 68, column 9)
              _opNameOtpe =
                  ({-# LINE 68 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 7330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 185, column 10)
              _tpe =
                  ({-# LINE 185 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
<<<<<<< HEAD
                   {-# LINE 7336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 197, column 10)
              _ttpe =
                  ({-# LINE 197 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags)
                             _lhsIcat _opNameIoriginalTree
                             [_arg0IupType,_arg1IupType]
<<<<<<< HEAD
                   {-# LINE 7344 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7326 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 200, column 10)
              __tup1 =
                  ({-# LINE 200 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _ttpe     of
                     Right ([t0,t1],_) -> (Just t0,Just t1)
                     _ -> (Nothing,Nothing)
<<<<<<< HEAD
                   {-# LINE 7352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 200, column 10)
              (_arg0OexpectedType,_) =
                  ({-# LINE 200 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   __tup1
<<<<<<< HEAD
                   {-# LINE 7358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 200, column 10)
              (_,_arg1OexpectedType) =
                  ({-# LINE 200 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   __tup1
<<<<<<< HEAD
                   {-# LINE 7364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 7385 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BinaryOp _annIannotatedTree _opNameIannotatedTree _arg0IannotatedTree _arg1IannotatedTree
<<<<<<< HEAD
                   {-# LINE 7391 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BinaryOp _annIoriginalTree _opNameIoriginalTree _arg0IoriginalTree _arg1IoriginalTree
<<<<<<< HEAD
                   {-# LINE 7397 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 7403 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 7409 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7415 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7421 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7427 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 7439 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _arg0Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _arg0OdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 7451 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _arg0Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _arg0OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 7463 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _arg1Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _arg1OdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 7475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7454 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _arg1Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7481 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7460 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _arg1OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 7487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7466 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe 
              ( _arg0IannotatedTree,_arg0IcolExprs,_arg0IoriginalTree,_arg0IupType) =
                  arg0_ _arg0Ocat _arg0OdownEnv _arg0OexpectedType _arg0Oflags _arg0OimCast 
              ( _arg1IannotatedTree,_arg1IcolExprs,_arg1IoriginalTree,_arg1IupType) =
                  arg1_ _arg1Ocat _arg1OdownEnv _arg1OexpectedType _arg1Oflags _arg1OimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_BooleanLit :: T_Annotation  ->
                             Bool ->
                             T_ScalarExpr 
sem_ScalarExpr_BooleanLit ann_ b_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 7521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7527 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 7533 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7512 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 7542 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 95, column 9)
              _tpe =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right typeBool
<<<<<<< HEAD
                   {-# LINE 7548 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7527 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 7569 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7545 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BooleanLit _annIannotatedTree b_
<<<<<<< HEAD
                   {-# LINE 7575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7551 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BooleanLit _annIoriginalTree b_
<<<<<<< HEAD
                   {-# LINE 7581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7557 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 7587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7563 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 7593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7569 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7599 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_Case :: T_Annotation  ->
                       T_CaseScalarExprListScalarExprPairList  ->
                       T_MaybeScalarExpr  ->
                       T_ScalarExpr 
sem_ScalarExpr_Case ann_ cases_ els_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _casesOwhenExpectedType :: (Maybe Type)
              _casesOthenExpectedType :: (Maybe Type)
              _elsOexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _casesOcat :: Catalog
              _casesOdownEnv :: Environment
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe Type)
              _elsOcat :: Catalog
              _elsOdownEnv :: Environment
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _casesIannotatedTree :: CaseScalarExprListScalarExprPairList 
              _casesIoriginalTree :: CaseScalarExprListScalarExprPairList 
              _casesIthenTypes :: ([Maybe Type])
              _casesIupTypes :: ([Maybe Type])
              _casesIwhenTypes :: ([[Maybe Type]])
              _elsIannotatedTree :: MaybeScalarExpr 
              _elsIoriginalTree :: MaybeScalarExpr 
              _elsIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 7653 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7659 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 7665 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7641 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 7674 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7650 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 293, column 9)
              _whenTypes =
                  ({-# LINE 293 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIwhenTypes
<<<<<<< HEAD
                   {-# LINE 7680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7656 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 294, column 9)
              _thenTypes =
                  ({-# LINE 294 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIthenTypes ++ maybe [] ((:[]) . Just) _elsIupType
<<<<<<< HEAD
                   {-# LINE 7686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7662 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 297, column 9)
              _tpe =
                  ({-# LINE 297 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   wt <- mapM (maybe (Left []) Right) $ concat _whenTypes
                   when (any (/= typeBool) wt)
                       $ Left [WrongTypes typeBool wt]
                   tt <- mapM (maybe (Left []) Right) _thenTypes
                   resolveResultSetType _lhsIcat tt
<<<<<<< HEAD
                   {-# LINE 7697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7673 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 305, column 9)
              _casesOwhenExpectedType =
                  ({-# LINE 305 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just typeBool
<<<<<<< HEAD
                   {-# LINE 7703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 306, column 9)
              _casesOthenExpectedType =
                  ({-# LINE 306 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 307, column 9)
              _elsOexpectedType =
                  ({-# LINE 307 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 7736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Case _annIannotatedTree _casesIannotatedTree _elsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 7742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Case _annIoriginalTree _casesIoriginalTree _elsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 7748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 7754 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 7760 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7766 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7772 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7778 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOdownEnv =
                  ({-# LINE 288 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 7784 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7790 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 7796 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 7802 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 7808 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 7814 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 7820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _casesIannotatedTree,_casesIoriginalTree,_casesIthenTypes,_casesIupTypes,_casesIwhenTypes) =
                  cases_ _casesOcat _casesOdownEnv _casesOflags _casesOimCast _casesOthenExpectedType _casesOwhenExpectedType 
              ( _elsIannotatedTree,_elsIoriginalTree,_elsIupType) =
                  els_ _elsOcat _elsOdownEnv _elsOexpectedType _elsOflags _elsOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_CaseSimple :: T_Annotation  ->
                             T_ScalarExpr  ->
                             T_CaseScalarExprListScalarExprPairList  ->
                             T_MaybeScalarExpr  ->
                             T_ScalarExpr 
sem_ScalarExpr_CaseSimple ann_ value_ cases_ els_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _casesOwhenExpectedType :: (Maybe Type)
              _valueOexpectedType :: (Maybe Type)
              _casesOthenExpectedType :: (Maybe Type)
              _elsOexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _valueOcat :: Catalog
              _valueOdownEnv :: Environment
              _valueOflags :: TypeCheckingFlags
              _valueOimCast :: (Maybe Type)
              _casesOcat :: Catalog
              _casesOdownEnv :: Environment
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe Type)
              _elsOcat :: Catalog
              _elsOdownEnv :: Environment
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _valueIannotatedTree :: ScalarExpr 
              _valueIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _valueIoriginalTree :: ScalarExpr 
              _valueIupType :: (Maybe Type)
              _casesIannotatedTree :: CaseScalarExprListScalarExprPairList 
              _casesIoriginalTree :: CaseScalarExprListScalarExprPairList 
              _casesIthenTypes :: ([Maybe Type])
              _casesIupTypes :: ([Maybe Type])
              _casesIwhenTypes :: ([[Maybe Type]])
              _elsIannotatedTree :: MaybeScalarExpr 
              _elsIoriginalTree :: MaybeScalarExpr 
              _elsIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 7882 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7855 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7888 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7861 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 7894 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 7903 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7876 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 293, column 9)
              _whenTypes =
                  ({-# LINE 293 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIwhenTypes
<<<<<<< HEAD
                   {-# LINE 7909 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7882 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 294, column 9)
              _thenTypes =
                  ({-# LINE 294 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIthenTypes ++ maybe [] ((:[]) . Just) _elsIupType
<<<<<<< HEAD
                   {-# LINE 7915 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7888 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 309, column 9)
              _whent =
                  ({-# LINE 309 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   wt <- mapM (maybe (Left []) Right) $ concat _whenTypes
                   vt <- maybe (Left []) Right _valueIupType
                   resolveResultSetType _lhsIcat (vt : wt)
<<<<<<< HEAD
                   {-# LINE 7924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7897 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 314, column 9)
              _tpe =
                  ({-# LINE 314 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   _ <- _whent
                   tt <- mapM (maybe (Left []) Right) _thenTypes
                   resolveResultSetType _lhsIcat tt
<<<<<<< HEAD
                   {-# LINE 7933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7906 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 319, column 9)
              _casesOwhenExpectedType =
                  ({-# LINE 319 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _whent
<<<<<<< HEAD
                   {-# LINE 7939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 320, column 9)
              _valueOexpectedType =
                  ({-# LINE 320 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _whent
<<<<<<< HEAD
                   {-# LINE 7945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 321, column 9)
              _casesOthenExpectedType =
                  ({-# LINE 321 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 322, column 9)
              _elsOexpectedType =
                  ({-# LINE 322 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 7957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 7978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseSimple _annIannotatedTree _valueIannotatedTree _casesIannotatedTree _elsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 7984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseSimple _annIoriginalTree _valueIoriginalTree _casesIoriginalTree _elsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 7990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 7996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 8002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 8026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 7996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOdownEnv =
                  ({-# LINE 288 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 8050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 8074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _valueIannotatedTree,_valueIcolExprs,_valueIoriginalTree,_valueIupType) =
                  value_ _valueOcat _valueOdownEnv _valueOexpectedType _valueOflags _valueOimCast 
              ( _casesIannotatedTree,_casesIoriginalTree,_casesIthenTypes,_casesIupTypes,_casesIwhenTypes) =
                  cases_ _casesOcat _casesOdownEnv _casesOflags _casesOimCast _casesOthenExpectedType _casesOwhenExpectedType 
              ( _elsIannotatedTree,_elsIoriginalTree,_elsIupType) =
                  els_ _elsOcat _elsOdownEnv _elsOexpectedType _elsOflags _elsOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_Cast :: T_Annotation  ->
                       T_ScalarExpr  ->
                       T_TypeName  ->
                       T_ScalarExpr 
sem_ScalarExpr_Cast ann_ expr_ tn_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _exprOexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              _tnIannotatedTree :: TypeName 
              _tnInamedType :: (Maybe Type)
              _tnIoriginalTree :: TypeName 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 8136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 8142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 8148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 8157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 124, column 10)
              _tpe =
                  ({-# LINE 124 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _tnInamedType
<<<<<<< HEAD
                   {-# LINE 8163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 126, column 10)
              _exprOexpectedType =
                  ({-# LINE 126 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tnInamedType
<<<<<<< HEAD
                   {-# LINE 8169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 8190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Cast _annIannotatedTree _exprIannotatedTree _tnIannotatedTree
<<<<<<< HEAD
                   {-# LINE 8196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Cast _annIoriginalTree _exprIoriginalTree _tnIoriginalTree
<<<<<<< HEAD
                   {-# LINE 8202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 8208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 8214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 8238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8250 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8256 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8262 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8268 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
              ( _tnIannotatedTree,_tnInamedType,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_Exists :: T_Annotation  ->
                         T_QueryExpr  ->
                         T_ScalarExpr 
sem_ScalarExpr_Exists ann_ sel_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _selOouterDownEnv :: (Maybe Environment)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _selIannotatedTree :: QueryExpr 
              _selIoriginalTree :: QueryExpr 
              _selIupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 8307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8274 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 8313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8280 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 8319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8286 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 8328 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8295 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 349, column 9)
              _tpe =
                  ({-# LINE 349 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right typeBool
<<<<<<< HEAD
                   {-# LINE 8334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 370, column 9)
              _selOouterDownEnv =
                  ({-# LINE 370 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 8340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 8361 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Exists _annIannotatedTree _selIannotatedTree
<<<<<<< HEAD
                   {-# LINE 8367 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Exists _annIoriginalTree _selIoriginalTree
<<<<<<< HEAD
                   {-# LINE 8373 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 8379 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8343 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 8385 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8349 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8391 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8355 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8397 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8361 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8403 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8367 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8409 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8373 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8415 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8379 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOcat _selOflags _selOimCast _selOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_Extract :: T_Annotation  ->
                          ExtractField ->
                          T_ScalarExpr  ->
                          T_ScalarExpr 
sem_ScalarExpr_Extract ann_ field_ e_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _eOexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _eOcat :: Catalog
              _eOdownEnv :: Environment
              _eOflags :: TypeCheckingFlags
              _eOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _eIannotatedTree :: ScalarExpr 
              _eIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _eIoriginalTree :: ScalarExpr 
              _eIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 8455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 8461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 8467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 8476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8440 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 130, column 10)
              _tpe =
                  ({-# LINE 130 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   x <- maybe (Left []) Right _eIupType
                   if x == typeDate
                     then Right typeFloat8
                     else Left [NoMatchingOperator "extract" [x]]
<<<<<<< HEAD
                   {-# LINE 8486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 136, column 10)
              _eOexpectedType =
                  ({-# LINE 136 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just typeDate
<<<<<<< HEAD
                   {-# LINE 8492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 8513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Extract _annIannotatedTree field_ _eIannotatedTree
<<<<<<< HEAD
                   {-# LINE 8519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Extract _annIoriginalTree field_ _eIoriginalTree
<<<<<<< HEAD
                   {-# LINE 8525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 8531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 8537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _eOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _eOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 8561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _eOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _eOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _eIannotatedTree,_eIcolExprs,_eIoriginalTree,_eIupType) =
                  e_ _eOcat _eOdownEnv _eOexpectedType _eOflags _eOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_Identifier :: T_Annotation  ->
                             T_Name  ->
                             T_ScalarExpr 
sem_ScalarExpr_Identifier ann_ i_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _lhsOannotatedTree :: ScalarExpr 
              _iOtpe :: (Either [TypeError] Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _iOcat :: Catalog
              _iOflags :: TypeCheckingFlags
              _iOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _iIannotatedTree :: Name 
              _iIoriginalTree :: Name 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 8609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 8615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 8621 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 8630 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 146, column 10)
              _elkp =
                  ({-# LINE 146 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   envLookupIdentifier (nameComponents _iIoriginalTree) _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 8636 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 147, column 10)
              _tpe =
                  ({-# LINE 147 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _elkp
<<<<<<< HEAD
                   {-# LINE 8642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 149, column 10)
              _lhsOannotatedTree =
                  ({-# LINE 149 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 8648 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 150, column 10)
              _annotatedTree =
                  ({-# LINE 150 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   let t = Identifier _annIannotatedTree _iIannotatedTree
                   in fromMaybe t $ do
                       case tcfAddQualifiers _lhsIflags of
                         False -> Nothing
                         True -> do
                                ((q,i),_) <- either (const Nothing) Just _elkp
                                if q /= ""
                                  then
                                       return $ Identifier _annIannotatedTree
                                                  (Name emptyAnnotation [Nmc $ T.unpack q, Nmc $ T.unpack i])
                                  else return t
<<<<<<< HEAD
                   {-# LINE 8664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8625 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 170, column 10)
              _iOtpe =
                  ({-# LINE 170 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 8670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8631 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 8691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8649 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Identifier _annIoriginalTree _iIoriginalTree
<<<<<<< HEAD
                   {-# LINE 8697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8655 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 8703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8661 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8667 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8673 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _iOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _iOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _iOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _iIannotatedTree,_iIoriginalTree) =
                  i_ _iOcat _iOflags _iOimCast _iOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_InPredicate :: T_Annotation  ->
                              T_ScalarExpr  ->
                              Bool ->
                              T_InList  ->
                              T_ScalarExpr 
sem_ScalarExpr_InPredicate ann_ expr_ i_ list_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _rt :: (Either [TypeError] Type)
              _listOexpectedType :: (Maybe Type)
              _exprOexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _listOcat :: Catalog
              _listOdownEnv :: Environment
              _listOflags :: TypeCheckingFlags
              _listOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              _listIannotatedTree :: InList 
              _listIlistType :: (Either [TypeError] Type)
              _listIoriginalTree :: InList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 8783 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 8789 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 8795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 8804 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 385, column 9)
              _rt =
                  ({-# LINE 385 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   lt <- _listIlistType
                   expt <- maybe (Left []) Right _exprIupType
                   resolveResultSetType _lhsIcat [expt, lt]
<<<<<<< HEAD
                   {-# LINE 8813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8771 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 389, column 9)
              _tpe =
                  ({-# LINE 389 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   _ <- _rt
                   return typeBool
<<<<<<< HEAD
                   {-# LINE 8821 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 392, column 9)
              _listOexpectedType =
                  ({-# LINE 392 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _rt
<<<<<<< HEAD
                   {-# LINE 8827 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8785 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 393, column 9)
              _exprOexpectedType =
                  ({-# LINE 393 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _rt
<<<<<<< HEAD
                   {-# LINE 8833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8791 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 8854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InPredicate _annIannotatedTree _exprIannotatedTree i_ _listIannotatedTree
<<<<<<< HEAD
                   {-# LINE 8860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8815 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InPredicate _annIoriginalTree _exprIoriginalTree i_ _listIoriginalTree
<<<<<<< HEAD
                   {-# LINE 8866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8821 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 8872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8827 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 8878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 8902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8908 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8863 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8914 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _listOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 8920 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _listOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 8926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _listOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 8932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _listOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 8938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
              ( _listIannotatedTree,_listIlistType,_listIoriginalTree) =
                  list_ _listOcat _listOdownEnv _listOexpectedType _listOflags _listOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_Interval :: T_Annotation  ->
                           String ->
                           IntervalField ->
                           (Maybe Int) ->
                           T_ScalarExpr 
sem_ScalarExpr_Interval ann_ value_ field_ prec_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 8972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 8978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 8984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 8993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 128, column 10)
              _tpe =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ ScalarType "interval"
<<<<<<< HEAD
                   {-# LINE 8999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 9020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Interval _annIannotatedTree value_ field_ prec_
<<<<<<< HEAD
                   {-# LINE 9026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Interval _annIoriginalTree value_ field_ prec_
<<<<<<< HEAD
                   {-# LINE 9032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 9038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 9044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 8996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_LiftApp :: T_Annotation  ->
                          T_Name  ->
                          LiftFlavour ->
                          T_ScalarExprList  ->
                          T_ScalarExpr 
sem_ScalarExpr_LiftApp ann_ oper_ flav_ args_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _argsOexpectedTypes :: ([Type])
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _operOcat :: Catalog
              _operOflags :: TypeCheckingFlags
              _operOimCast :: (Maybe Type)
              _operOtpe :: (Either [TypeError] Type)
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _operIannotatedTree :: Name 
              _operIoriginalTree :: Name 
              _argsIannotatedTree :: ScalarExprList 
              _argsIoriginalTree :: ScalarExprList 
              _argsIupTypes :: ([Maybe Type])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 9100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9052 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 9106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9058 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 9112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9064 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 9121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 444, column 9)
              _tpe =
                  ({-# LINE 444 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 9127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 476, column 13)
              _argsOexpectedTypes =
                  ({-# LINE 476 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 9133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 9154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LiftApp _annIannotatedTree _operIannotatedTree flav_ _argsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 9160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LiftApp _annIoriginalTree _operIoriginalTree flav_ _argsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 9166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 9172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 9178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _operOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _operOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _operOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 9208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (from local)
              _operOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 9214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 9226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 9238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _operIannotatedTree,_operIoriginalTree) =
                  oper_ _operOcat _operOflags _operOimCast _operOtpe 
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOcat _argsOdownEnv _argsOexpectedTypes _argsOflags _argsOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_NullLit :: T_Annotation  ->
                          T_ScalarExpr 
sem_ScalarExpr_NullLit ann_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 9269 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 9275 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9224 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 9281 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 9290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9239 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 114, column 10)
              _tpe =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right UnknownType
<<<<<<< HEAD
                   {-# LINE 9296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9245 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 9317 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9263 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullLit _annIannotatedTree
<<<<<<< HEAD
                   {-# LINE 9323 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9269 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullLit _annIoriginalTree
<<<<<<< HEAD
                   {-# LINE 9329 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9275 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 9335 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9281 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 9341 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9287 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9347 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9293 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9299 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_NumberLit :: T_Annotation  ->
                            String ->
                            T_ScalarExpr 
sem_ScalarExpr_NumberLit ann_ d_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 9381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9327 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 9387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9333 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 9393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 9402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 104, column 9)
              _tpe =
                  ({-# LINE 104 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ if all (`elem` _digChars    ) d_
                           then typeInt
                           else typeNumeric
<<<<<<< HEAD
                   {-# LINE 9410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9356 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 107, column 9)
              _digChars =
                  ({-# LINE 107 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   concatMap show [(0::Int)..9]
<<<<<<< HEAD
                   {-# LINE 9416 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9362 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 9437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9380 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NumberLit _annIannotatedTree d_
<<<<<<< HEAD
                   {-# LINE 9443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9386 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NumberLit _annIoriginalTree d_
<<<<<<< HEAD
                   {-# LINE 9449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9392 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 9455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9398 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 9461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9416 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_Parens :: T_Annotation  ->
                         T_ScalarExpr  ->
                         T_ScalarExpr 
sem_ScalarExpr_Parens ann_ ex_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOupType :: (Maybe Type)
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOexpectedType :: (Maybe Type)
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exIannotatedTree :: ScalarExpr 
              _exIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr 
              _exIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 336, column 5)
              _annOtpe =
                  ({-# LINE 336 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _exIupType
<<<<<<< HEAD
                   {-# LINE 9510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Parens _annIannotatedTree _exIannotatedTree
<<<<<<< HEAD
                   {-# LINE 9516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Parens _annIoriginalTree _exIoriginalTree
<<<<<<< HEAD
                   {-# LINE 9522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9465 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 9528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9471 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 9534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9477 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOcolExprs =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _exIcolExprs
<<<<<<< HEAD
                   {-# LINE 9540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9483 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOupType =
                  ({-# LINE 40 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _exIupType
<<<<<<< HEAD
                   {-# LINE 9546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 9564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 9576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedType
<<<<<<< HEAD
                   {-# LINE 9582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 9594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOcat _exOdownEnv _exOexpectedType _exOflags _exOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_Placeholder :: T_Annotation  ->
                              T_ScalarExpr 
sem_ScalarExpr_Placeholder ann_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 9623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 9629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9572 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 9635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9578 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 9644 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 138, column 10)
              _tpe =
                  ({-# LINE 138 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right UnknownType
<<<<<<< HEAD
                   {-# LINE 9650 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 9671 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Placeholder _annIannotatedTree
<<<<<<< HEAD
                   {-# LINE 9677 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Placeholder _annIoriginalTree
<<<<<<< HEAD
                   {-# LINE 9683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 9689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 9695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9641 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9647 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_PositionalArg :: T_Annotation  ->
                                Integer ->
                                T_ScalarExpr 
sem_ScalarExpr_PositionalArg ann_ p_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 9735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 9741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 9747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 9756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 444, column 9)
              _tpe =
                  ({-# LINE 444 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 9762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 9783 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PositionalArg _annIannotatedTree p_
<<<<<<< HEAD
                   {-# LINE 9789 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PositionalArg _annIoriginalTree p_
<<<<<<< HEAD
                   {-# LINE 9795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 9801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9738 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 9807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9744 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9750 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_PostfixOp :: T_Annotation  ->
                            T_Name  ->
                            T_ScalarExpr  ->
                            T_ScalarExpr 
sem_ScalarExpr_PostfixOp ann_ opName_ arg_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _opNameOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _ttpe :: (Either [TypeError] ([Type],Type))
              _argOexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckingFlags
              _opNameOimCast :: (Maybe Type)
              _argOcat :: Catalog
              _argOdownEnv :: Environment
              _argOflags :: TypeCheckingFlags
              _argOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _opNameIannotatedTree :: Name 
              _opNameIoriginalTree :: Name 
              _argIannotatedTree :: ScalarExpr 
              _argIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _argIoriginalTree :: ScalarExpr 
              _argIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 9865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9802 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 9871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9808 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 9877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9814 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 9886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 68, column 9)
              _opNameOtpe =
                  ({-# LINE 68 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 9892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 185, column 10)
              _tpe =
                  ({-# LINE 185 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
<<<<<<< HEAD
                   {-# LINE 9898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 205, column 10)
              _ttpe =
                  ({-# LINE 205 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags) _lhsIcat _opNameIoriginalTree [_argIupType]
<<<<<<< HEAD
                   {-# LINE 9904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 206, column 10)
              _argOexpectedType =
                  ({-# LINE 206 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _ttpe     of
                     Right ([t],_) -> Just t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 9912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 9933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PostfixOp _annIannotatedTree _opNameIannotatedTree _argIannotatedTree
<<<<<<< HEAD
                   {-# LINE 9939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PostfixOp _annIoriginalTree _opNameIoriginalTree _argIoriginalTree
<<<<<<< HEAD
                   {-# LINE 9945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9879 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 9951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9885 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 9957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9891 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9963 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9897 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9969 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9903 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9975 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9909 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 9981 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9915 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 9987 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9921 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 9993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 9999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 10011 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe 
              ( _argIannotatedTree,_argIcolExprs,_argIoriginalTree,_argIupType) =
                  arg_ _argOcat _argOdownEnv _argOexpectedType _argOflags _argOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_PrefixOp :: T_Annotation  ->
                           T_Name  ->
                           T_ScalarExpr  ->
                           T_ScalarExpr 
sem_ScalarExpr_PrefixOp ann_ opName_ arg_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _opNameOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _ttpe :: (Either [TypeError] ([Type],Type))
              _argOexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckingFlags
              _opNameOimCast :: (Maybe Type)
              _argOcat :: Catalog
              _argOdownEnv :: Environment
              _argOflags :: TypeCheckingFlags
              _argOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _opNameIannotatedTree :: Name 
              _opNameIoriginalTree :: Name 
              _argIannotatedTree :: ScalarExpr 
              _argIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _argIoriginalTree :: ScalarExpr 
              _argIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 10061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 9995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 10067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 10073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 10082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 68, column 9)
              _opNameOtpe =
                  ({-# LINE 68 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 10088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 185, column 10)
              _tpe =
                  ({-# LINE 185 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
<<<<<<< HEAD
                   {-# LINE 10094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10028 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 205, column 10)
              _ttpe =
                  ({-# LINE 205 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags) _lhsIcat _opNameIoriginalTree [_argIupType]
<<<<<<< HEAD
                   {-# LINE 10100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 206, column 10)
              _argOexpectedType =
                  ({-# LINE 206 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _ttpe     of
                     Right ([t],_) -> Just t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 10108 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 10129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10060 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrefixOp _annIannotatedTree _opNameIannotatedTree _argIannotatedTree
<<<<<<< HEAD
                   {-# LINE 10135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10066 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrefixOp _annIoriginalTree _opNameIoriginalTree _argIoriginalTree
<<<<<<< HEAD
                   {-# LINE 10141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10072 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 10147 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10078 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 10153 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10084 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10159 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10090 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10165 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10096 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10102 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10108 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 10183 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10114 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10189 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10120 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 10195 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10126 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10201 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10132 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 10207 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10138 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe 
              ( _argIannotatedTree,_argIcolExprs,_argIoriginalTree,_argIupType) =
                  arg_ _argOcat _argOdownEnv _argOexpectedType _argOflags _argOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_QStar :: T_Annotation  ->
                        NameComponent ->
                        T_ScalarExpr 
sem_ScalarExpr_QStar ann_ q_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _tpe :: (Either [TypeError] Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 10240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 10246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 10252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10183 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 10261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 423, column 9)
              _tpe =
                  ({-# LINE 423 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _originalTree of
                     Star _ ->
                       envExpandStar Nothing _lhsIdownEnv
                       >>= _starCS
                     QStar _ q -> do
                       envExpandStar (Just q) _lhsIdownEnv
                       >>= _starCS
                     _ -> Left [InternalError "wrong ctor in sem rule for star, qstar in scalarexprs.ag"]
<<<<<<< HEAD
                   {-# LINE 10274 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 432, column 9)
              _starCS =
                  ({-# LINE 432 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right . CompositeType . map (\((_q,n),t) -> (n,t))
<<<<<<< HEAD
                   {-# LINE 10280 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 10301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QStar _annIannotatedTree q_
<<<<<<< HEAD
                   {-# LINE 10307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QStar _annIoriginalTree q_
<<<<<<< HEAD
                   {-# LINE 10313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10241 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 10319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10247 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 10325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10253 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10259 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10265 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_ScalarSubQuery :: T_Annotation  ->
                                 T_QueryExpr  ->
                                 T_ScalarExpr 
sem_ScalarExpr_ScalarSubQuery ann_ sel_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _selOouterDownEnv :: (Maybe Environment)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _selIannotatedTree :: QueryExpr 
              _selIoriginalTree :: QueryExpr 
              _selIupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 10372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 10378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 10384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 10393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10321 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 359, column 9)
              _tpe =
                  ({-# LINE 359 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   selType <- maybe (Left []) Right _selIupType
                   case length selType of
                     0 -> Left [InternalError "no columns in scalar subquery?"]
                     1 -> Right $ snd $ head selType
                     _ -> Right $ AnonymousCompositeType $ map snd selType
<<<<<<< HEAD
                   {-# LINE 10404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10332 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 368, column 9)
              _selOouterDownEnv =
                  ({-# LINE 368 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 10410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10338 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 10431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10356 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarSubQuery _annIannotatedTree _selIannotatedTree
<<<<<<< HEAD
                   {-# LINE 10437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10362 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarSubQuery _annIoriginalTree _selIoriginalTree
<<<<<<< HEAD
                   {-# LINE 10443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 10449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10374 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 10455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10380 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10386 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10392 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10398 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 10485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOcat _selOflags _selOimCast _selOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_SpecialOp :: T_Annotation  ->
                            T_Name  ->
                            T_ScalarExprList  ->
                            T_ScalarExpr 
sem_ScalarExpr_SpecialOp ann_ opName_ args_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _opNameOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _ttpe :: (Either [TypeError] ([Type],Type))
              _argsOexpectedTypes :: ([Type])
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckingFlags
              _opNameOimCast :: (Maybe Type)
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _opNameIannotatedTree :: Name 
              _opNameIoriginalTree :: Name 
              _argsIannotatedTree :: ScalarExprList 
              _argsIoriginalTree :: ScalarExprList 
              _argsIupTypes :: ([Maybe Type])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 10532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 10538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10463 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 10544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 10553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10478 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 68, column 9)
              _opNameOtpe =
                  ({-# LINE 68 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 10559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 185, column 10)
              _tpe =
                  ({-# LINE 185 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
<<<<<<< HEAD
                   {-# LINE 10565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10490 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 211, column 10)
              _ttpe =
                  ({-# LINE 211 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags) _lhsIcat _opNameIoriginalTree _argsIupTypes
<<<<<<< HEAD
                   {-# LINE 10571 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 212, column 10)
              _argsOexpectedTypes =
                  ({-# LINE 212 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const []) id $ fmap fst _ttpe
<<<<<<< HEAD
                   {-# LINE 10577 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 10598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SpecialOp _annIannotatedTree _opNameIannotatedTree _argsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 10604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SpecialOp _annIoriginalTree _opNameIoriginalTree _argsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 10610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 10616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 10622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10556 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 10652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 10664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 10676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe 
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOcat _argsOdownEnv _argsOexpectedTypes _argsOflags _argsOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_Star :: T_Annotation  ->
                       T_ScalarExpr 
sem_ScalarExpr_Star ann_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _tpe :: (Either [TypeError] Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 10708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10630 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 10714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10636 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 10720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 10729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 423, column 9)
              _tpe =
                  ({-# LINE 423 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _originalTree of
                     Star _ ->
                       envExpandStar Nothing _lhsIdownEnv
                       >>= _starCS
                     QStar _ q -> do
                       envExpandStar (Just q) _lhsIdownEnv
                       >>= _starCS
                     _ -> Left [InternalError "wrong ctor in sem rule for star, qstar in scalarexprs.ag"]
<<<<<<< HEAD
                   {-# LINE 10742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 432, column 9)
              _starCS =
                  ({-# LINE 432 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right . CompositeType . map (\((_q,n),t) -> (n,t))
<<<<<<< HEAD
                   {-# LINE 10748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 10769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Star _annIannotatedTree
<<<<<<< HEAD
                   {-# LINE 10775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Star _annIoriginalTree
<<<<<<< HEAD
                   {-# LINE 10781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 10787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 10793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_StringLit :: T_Annotation  ->
                            String ->
                            T_ScalarExpr 
sem_ScalarExpr_StringLit ann_ value_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 10833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 10839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 10845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 10854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 111, column 9)
              _tpe =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right UnknownType
<<<<<<< HEAD
                   {-# LINE 10860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 10881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   StringLit _annIannotatedTree value_
<<<<<<< HEAD
                   {-# LINE 10887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   StringLit _annIoriginalTree value_
<<<<<<< HEAD
                   {-# LINE 10893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 10899 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10815 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 10905 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10821 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 10911 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10827 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 10917 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_TypedStringLit :: T_Annotation  ->
                                 T_TypeName  ->
                                 String ->
                                 T_ScalarExpr 
sem_ScalarExpr_TypedStringLit ann_ tn_ value_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tnIannotatedTree :: TypeName 
              _tnInamedType :: (Maybe Type)
              _tnIoriginalTree :: TypeName 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 10952 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 10958 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 10964 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 10973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 124, column 10)
              _tpe =
                  ({-# LINE 124 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _tnInamedType
<<<<<<< HEAD
                   {-# LINE 10979 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 11000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10913 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypedStringLit _annIannotatedTree _tnIannotatedTree value_
<<<<<<< HEAD
                   {-# LINE 11006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypedStringLit _annIoriginalTree _tnIoriginalTree value_
<<<<<<< HEAD
                   {-# LINE 11012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 11018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 11024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10937 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11054 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 10967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tnIannotatedTree,_tnInamedType,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
sem_ScalarExpr_WindowApp :: T_Annotation  ->
                            T_ScalarExpr  ->
                            T_ScalarExprList  ->
                            T_ScalarExprDirectionPairList  ->
                            (Maybe FrameClause) ->
                            T_ScalarExpr 
sem_ScalarExpr_WindowApp ann_ fn_ partitionBy_ orderBy_ frm_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupType :: (Maybe Type)
              _annOimCast :: (Maybe Type)
              _fnOexpectedType :: (Maybe Type)
              _partitionByOexpectedTypes :: ([Type])
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOannotatedTree :: ScalarExpr 
              _lhsOoriginalTree :: ScalarExpr 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _fnOcat :: Catalog
              _fnOdownEnv :: Environment
              _fnOflags :: TypeCheckingFlags
              _fnOimCast :: (Maybe Type)
              _partitionByOcat :: Catalog
              _partitionByOdownEnv :: Environment
              _partitionByOflags :: TypeCheckingFlags
              _partitionByOimCast :: (Maybe Type)
              _orderByOcat :: Catalog
              _orderByOdownEnv :: Environment
              _orderByOflags :: TypeCheckingFlags
              _orderByOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _fnIannotatedTree :: ScalarExpr 
              _fnIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _fnIoriginalTree :: ScalarExpr 
              _fnIupType :: (Maybe Type)
              _partitionByIannotatedTree :: ScalarExprList 
              _partitionByIoriginalTree :: ScalarExprList 
              _partitionByIupTypes :: ([Maybe Type])
              _orderByIannotatedTree :: ScalarExprDirectionPairList 
              _orderByIoriginalTree :: ScalarExprDirectionPairList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 25, column 9)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
<<<<<<< HEAD
                   {-# LINE 11110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11023 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 26, column 9)
              _upType =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 11116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 27, column 9)
              _lhsOupType =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 11122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 28, column 9)
              _annOimCast =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedType of
                     t@(Just _) |
                                  t /= _upType     -> t
                     _ -> Nothing
<<<<<<< HEAD
                   {-# LINE 11131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 220, column 10)
              _tpe =
                  ({-# LINE 220 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _fnIupType
<<<<<<< HEAD
                   {-# LINE 11137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 459, column 28)
              _fnOexpectedType =
                  ({-# LINE 459 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 11143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 479, column 15)
              _partitionByOexpectedTypes =
                  ({-# LINE 479 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 11149 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 41, column 7)
              _lhsOcolExprs =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar :: [((Text,Text),Type)]
                              -> [(NameComponent,Maybe Type,ScalarExpr)]
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just $ mkTypeExtra t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' (Name a' [Nmc $ T.unpack q,Nmc $ T.unpack n]))
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
<<<<<<< HEAD
                   {-# LINE 11170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WindowApp _annIannotatedTree _fnIannotatedTree _partitionByIannotatedTree _orderByIannotatedTree frm_
<<<<<<< HEAD
                   {-# LINE 11176 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WindowApp _annIoriginalTree _fnIoriginalTree _partitionByIoriginalTree _orderByIoriginalTree frm_
<<<<<<< HEAD
                   {-# LINE 11182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 11188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 11194 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11200 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 11218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11128 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11224 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11134 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11140 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _partitionByOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _partitionByOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 11242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _partitionByOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _partitionByOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11254 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _orderByOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _orderByOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 11266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11176 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _orderByOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _orderByOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _fnIannotatedTree,_fnIcolExprs,_fnIoriginalTree,_fnIupType) =
                  fn_ _fnOcat _fnOdownEnv _fnOexpectedType _fnOflags _fnOimCast 
              ( _partitionByIannotatedTree,_partitionByIoriginalTree,_partitionByIupTypes) =
                  partitionBy_ _partitionByOcat _partitionByOdownEnv _partitionByOexpectedTypes _partitionByOflags _partitionByOimCast 
              ( _orderByIannotatedTree,_orderByIoriginalTree) =
                  orderBy_ _orderByOcat _orderByOdownEnv _orderByOflags _orderByOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
-- ScalarExprDirectionPair -------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Tuple:
         child x1             : ScalarExpr 
         child x2             : {Direction}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprDirectionPair  = ( ScalarExpr ,(Direction))
-- cata
sem_ScalarExprDirectionPair :: ScalarExprDirectionPair  ->
                               T_ScalarExprDirectionPair 
sem_ScalarExprDirectionPair ( x1,x2)  =
    (sem_ScalarExprDirectionPair_Tuple (sem_ScalarExpr x1 ) x2 )
-- semantic domain
type T_ScalarExprDirectionPair  = Catalog ->
                                  Environment ->
                                  TypeCheckingFlags ->
                                  (Maybe Type) ->
                                  ( ScalarExprDirectionPair ,ScalarExprDirectionPair )
data Inh_ScalarExprDirectionPair  = Inh_ScalarExprDirectionPair {cat_Inh_ScalarExprDirectionPair :: Catalog,downEnv_Inh_ScalarExprDirectionPair :: Environment,flags_Inh_ScalarExprDirectionPair :: TypeCheckingFlags,imCast_Inh_ScalarExprDirectionPair :: (Maybe Type)}
data Syn_ScalarExprDirectionPair  = Syn_ScalarExprDirectionPair {annotatedTree_Syn_ScalarExprDirectionPair :: ScalarExprDirectionPair ,originalTree_Syn_ScalarExprDirectionPair :: ScalarExprDirectionPair }
wrap_ScalarExprDirectionPair :: T_ScalarExprDirectionPair  ->
                                Inh_ScalarExprDirectionPair  ->
                                Syn_ScalarExprDirectionPair 
wrap_ScalarExprDirectionPair sem (Inh_ScalarExprDirectionPair _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast 
     in  (Syn_ScalarExprDirectionPair _lhsOannotatedTree _lhsOoriginalTree ))
sem_ScalarExprDirectionPair_Tuple :: T_ScalarExpr  ->
                                     Direction ->
                                     T_ScalarExprDirectionPair 
sem_ScalarExprDirectionPair_Tuple x1_ x2_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _x1OexpectedType :: (Maybe Type)
              _lhsOannotatedTree :: ScalarExprDirectionPair 
              _lhsOoriginalTree :: ScalarExprDirectionPair 
              _x1Ocat :: Catalog
              _x1OdownEnv :: Environment
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe Type)
              _x1IannotatedTree :: ScalarExpr 
              _x1IcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _x1IoriginalTree :: ScalarExpr 
              _x1IupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 464, column 11)
              _x1OexpectedType =
                  ({-# LINE 464 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 11351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,x2_)
<<<<<<< HEAD
                   {-# LINE 11357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,x2_)
<<<<<<< HEAD
                   {-# LINE 11363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 11369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 11375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1OdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 11387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _x1IannotatedTree,_x1IcolExprs,_x1IoriginalTree,_x1IupType) =
                  x1_ _x1Ocat _x1OdownEnv _x1OexpectedType _x1Oflags _x1OimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprDirectionPairList ---------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprDirectionPair 
         child tl             : ScalarExprDirectionPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprDirectionPairList  = [ScalarExprDirectionPair ]
-- cata
sem_ScalarExprDirectionPairList :: ScalarExprDirectionPairList  ->
                                   T_ScalarExprDirectionPairList 
sem_ScalarExprDirectionPairList list  =
    (Prelude.foldr sem_ScalarExprDirectionPairList_Cons sem_ScalarExprDirectionPairList_Nil (Prelude.map sem_ScalarExprDirectionPair list) )
-- semantic domain
type T_ScalarExprDirectionPairList  = Catalog ->
                                      Environment ->
                                      TypeCheckingFlags ->
                                      (Maybe Type) ->
                                      ( ScalarExprDirectionPairList ,ScalarExprDirectionPairList )
data Inh_ScalarExprDirectionPairList  = Inh_ScalarExprDirectionPairList {cat_Inh_ScalarExprDirectionPairList :: Catalog,downEnv_Inh_ScalarExprDirectionPairList :: Environment,flags_Inh_ScalarExprDirectionPairList :: TypeCheckingFlags,imCast_Inh_ScalarExprDirectionPairList :: (Maybe Type)}
data Syn_ScalarExprDirectionPairList  = Syn_ScalarExprDirectionPairList {annotatedTree_Syn_ScalarExprDirectionPairList :: ScalarExprDirectionPairList ,originalTree_Syn_ScalarExprDirectionPairList :: ScalarExprDirectionPairList }
wrap_ScalarExprDirectionPairList :: T_ScalarExprDirectionPairList  ->
                                    Inh_ScalarExprDirectionPairList  ->
                                    Syn_ScalarExprDirectionPairList 
wrap_ScalarExprDirectionPairList sem (Inh_ScalarExprDirectionPairList _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast 
     in  (Syn_ScalarExprDirectionPairList _lhsOannotatedTree _lhsOoriginalTree ))
sem_ScalarExprDirectionPairList_Cons :: T_ScalarExprDirectionPair  ->
                                        T_ScalarExprDirectionPairList  ->
                                        T_ScalarExprDirectionPairList 
sem_ScalarExprDirectionPairList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprDirectionPairList 
              _lhsOoriginalTree :: ScalarExprDirectionPairList 
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: ScalarExprDirectionPair 
              _hdIoriginalTree :: ScalarExprDirectionPair 
              _tlIannotatedTree :: ScalarExprDirectionPairList 
              _tlIoriginalTree :: ScalarExprDirectionPairList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 11473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 11479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 11485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11395 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 11491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 11503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 11527 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11533 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11539 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOdownEnv _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOdownEnv _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_ScalarExprDirectionPairList_Nil :: T_ScalarExprDirectionPairList 
sem_ScalarExprDirectionPairList_Nil  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprDirectionPairList 
              _lhsOoriginalTree :: ScalarExprDirectionPairList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 11558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 11564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 11570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 11576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprList ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         expectedTypes        : [Type]
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
         upTypes              : [Maybe Type]
   alternatives:
      alternative Cons:
         child hd             : ScalarExpr 
         child tl             : ScalarExprList 
         visit 0:
            local _tup2       : {(Maybe Type,[Type])}
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprList  = [ScalarExpr ]
-- cata
sem_ScalarExprList :: ScalarExprList  ->
                      T_ScalarExprList 
sem_ScalarExprList list  =
    (Prelude.foldr sem_ScalarExprList_Cons sem_ScalarExprList_Nil (Prelude.map sem_ScalarExpr list) )
-- semantic domain
type T_ScalarExprList  = Catalog ->
                         Environment ->
                         ([Type]) ->
                         TypeCheckingFlags ->
                         (Maybe Type) ->
                         ( ScalarExprList ,ScalarExprList ,([Maybe Type]))
data Inh_ScalarExprList  = Inh_ScalarExprList {cat_Inh_ScalarExprList :: Catalog,downEnv_Inh_ScalarExprList :: Environment,expectedTypes_Inh_ScalarExprList :: ([Type]),flags_Inh_ScalarExprList :: TypeCheckingFlags,imCast_Inh_ScalarExprList :: (Maybe Type)}
data Syn_ScalarExprList  = Syn_ScalarExprList {annotatedTree_Syn_ScalarExprList :: ScalarExprList ,originalTree_Syn_ScalarExprList :: ScalarExprList ,upTypes_Syn_ScalarExprList :: ([Maybe Type])}
wrap_ScalarExprList :: T_ScalarExprList  ->
                       Inh_ScalarExprList  ->
                       Syn_ScalarExprList 
wrap_ScalarExprList sem (Inh_ScalarExprList _lhsIcat _lhsIdownEnv _lhsIexpectedTypes _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupTypes) = sem _lhsIcat _lhsIdownEnv _lhsIexpectedTypes _lhsIflags _lhsIimCast 
     in  (Syn_ScalarExprList _lhsOannotatedTree _lhsOoriginalTree _lhsOupTypes ))
sem_ScalarExprList_Cons :: T_ScalarExpr  ->
                           T_ScalarExprList  ->
                           T_ScalarExprList 
sem_ScalarExprList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedTypes
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupTypes :: ([Maybe Type])
              __tup2 :: ((Maybe Type,[Type]))
              _hdOexpectedType :: (Maybe Type)
              _tlOexpectedTypes :: ([Type])
              _lhsOannotatedTree :: ScalarExprList 
              _lhsOoriginalTree :: ScalarExprList 
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: ScalarExpr 
              _hdIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _hdIoriginalTree :: ScalarExpr 
              _hdIupType :: (Maybe Type)
              _tlIannotatedTree :: ScalarExprList 
              _tlIoriginalTree :: ScalarExprList 
              _tlIupTypes :: ([Maybe Type])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 54, column 12)
              _lhsOupTypes =
                  ({-# LINE 54 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _hdIupType : _tlIupTypes
<<<<<<< HEAD
                   {-# LINE 11660 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 55, column 12)
              __tup2 =
                  ({-# LINE 55 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedTypes of
                     (x:xs) -> (Just x,xs)
                     [] -> (Nothing,[])
<<<<<<< HEAD
                   {-# LINE 11668 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11578 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 55, column 12)
              (_hdOexpectedType,_) =
                  ({-# LINE 55 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   __tup2
<<<<<<< HEAD
                   {-# LINE 11674 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11584 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 55, column 12)
              (_,_tlOexpectedTypes) =
                  ({-# LINE 55 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   __tup2
<<<<<<< HEAD
                   {-# LINE 11680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11590 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 11686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11596 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 11692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11602 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 11698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11608 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 11704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11614 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11620 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 11716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11626 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11632 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11638 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11644 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 11740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11650 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11656 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11662 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIcolExprs,_hdIoriginalTree,_hdIupType) =
                  hd_ _hdOcat _hdOdownEnv _hdOexpectedType _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupTypes) =
                  tl_ _tlOcat _tlOdownEnv _tlOexpectedTypes _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupTypes)))
sem_ScalarExprList_Nil :: T_ScalarExprList 
sem_ScalarExprList_Nil  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedTypes
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupTypes :: ([Maybe Type])
              _lhsOannotatedTree :: ScalarExprList 
              _lhsOoriginalTree :: ScalarExprList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 59, column 11)
              _lhsOupTypes =
                  ({-# LINE 59 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 11773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 11779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 11785 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 11791 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 11797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupTypes)))
-- ScalarExprListList ------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprList 
         child tl             : ScalarExprListList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprListList  = [ScalarExprList ]
-- cata
sem_ScalarExprListList :: ScalarExprListList  ->
                          T_ScalarExprListList 
sem_ScalarExprListList list  =
    (Prelude.foldr sem_ScalarExprListList_Cons sem_ScalarExprListList_Nil (Prelude.map sem_ScalarExprList list) )
-- semantic domain
type T_ScalarExprListList  = Catalog ->
                             TypeCheckingFlags ->
                             (Maybe Type) ->
                             ( ScalarExprListList ,ScalarExprListList )
data Inh_ScalarExprListList  = Inh_ScalarExprListList {cat_Inh_ScalarExprListList :: Catalog,flags_Inh_ScalarExprListList :: TypeCheckingFlags,imCast_Inh_ScalarExprListList :: (Maybe Type)}
data Syn_ScalarExprListList  = Syn_ScalarExprListList {annotatedTree_Syn_ScalarExprListList :: ScalarExprListList ,originalTree_Syn_ScalarExprListList :: ScalarExprListList }
wrap_ScalarExprListList :: T_ScalarExprListList  ->
                           Inh_ScalarExprListList  ->
                           Syn_ScalarExprListList 
wrap_ScalarExprListList sem (Inh_ScalarExprListList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_ScalarExprListList _lhsOannotatedTree _lhsOoriginalTree ))
sem_ScalarExprListList_Cons :: T_ScalarExprList  ->
                               T_ScalarExprListList  ->
                               T_ScalarExprListList 
sem_ScalarExprListList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprListList 
              _lhsOoriginalTree :: ScalarExprListList 
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOexpectedTypes :: ([Type])
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: ScalarExprList 
              _hdIoriginalTree :: ScalarExprList 
              _hdIupTypes :: ([Maybe Type])
              _tlIannotatedTree :: ScalarExprListList 
              _tlIoriginalTree :: ScalarExprListList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 11867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11777 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 11873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11783 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 11879 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11789 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 11885 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11891 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _hdOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: ScalarExprListList.Cons.hd.downEnv"
<<<<<<< HEAD
                   {-# LINE 11897 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _hdOexpectedTypes =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: ScalarExprListList.Cons.hd.expectedTypes"
<<<<<<< HEAD
                   {-# LINE 11903 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11909 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11915 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 11921 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 11927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 11933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree,_hdIupTypes) =
                  hd_ _hdOcat _hdOdownEnv _hdOexpectedTypes _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_ScalarExprListList_Nil :: T_ScalarExprListList 
sem_ScalarExprListList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprListList 
              _lhsOoriginalTree :: ScalarExprListList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 11951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11861 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 11957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 11963 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 11969 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11879 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprListStatementListPair -----------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Tuple:
         child x1             : ScalarExprList 
         child x2             : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprListStatementListPair  = ( ScalarExprList ,StatementList )
-- cata
sem_ScalarExprListStatementListPair :: ScalarExprListStatementListPair  ->
                                       T_ScalarExprListStatementListPair 
sem_ScalarExprListStatementListPair ( x1,x2)  =
    (sem_ScalarExprListStatementListPair_Tuple (sem_ScalarExprList x1 ) (sem_StatementList x2 ) )
-- semantic domain
type T_ScalarExprListStatementListPair  = Catalog ->
                                          TypeCheckingFlags ->
                                          (Maybe Type) ->
                                          ( ScalarExprListStatementListPair ,ScalarExprListStatementListPair )
data Inh_ScalarExprListStatementListPair  = Inh_ScalarExprListStatementListPair {cat_Inh_ScalarExprListStatementListPair :: Catalog,flags_Inh_ScalarExprListStatementListPair :: TypeCheckingFlags,imCast_Inh_ScalarExprListStatementListPair :: (Maybe Type)}
data Syn_ScalarExprListStatementListPair  = Syn_ScalarExprListStatementListPair {annotatedTree_Syn_ScalarExprListStatementListPair :: ScalarExprListStatementListPair ,originalTree_Syn_ScalarExprListStatementListPair :: ScalarExprListStatementListPair }
wrap_ScalarExprListStatementListPair :: T_ScalarExprListStatementListPair  ->
                                        Inh_ScalarExprListStatementListPair  ->
                                        Syn_ScalarExprListStatementListPair 
wrap_ScalarExprListStatementListPair sem (Inh_ScalarExprListStatementListPair _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_ScalarExprListStatementListPair _lhsOannotatedTree _lhsOoriginalTree ))
sem_ScalarExprListStatementListPair_Tuple :: T_ScalarExprList  ->
                                             T_StatementList  ->
                                             T_ScalarExprListStatementListPair 
sem_ScalarExprListStatementListPair_Tuple x1_ x2_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprListStatementListPair 
              _lhsOoriginalTree :: ScalarExprListStatementListPair 
              _x1Ocat :: Catalog
              _x1OdownEnv :: Environment
              _x1OexpectedTypes :: ([Type])
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe Type)
              _x2Ocat :: Catalog
              _x2Oflags :: TypeCheckingFlags
              _x2OimCast :: (Maybe Type)
              _x1IannotatedTree :: ScalarExprList 
              _x1IoriginalTree :: ScalarExprList 
              _x1IupTypes :: ([Maybe Type])
              _x2IannotatedTree :: StatementList 
              _x2IoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
<<<<<<< HEAD
                   {-# LINE 12035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
<<<<<<< HEAD
                   {-# LINE 12041 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 12047 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 12053 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11963 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12059 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11969 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _x1OdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: ScalarExprListStatementListPair.Tuple.x1.downEnv"
<<<<<<< HEAD
                   {-# LINE 12065 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11975 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _x1OexpectedTypes =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: ScalarExprListStatementListPair.Tuple.x1.expectedTypes"
<<<<<<< HEAD
                   {-# LINE 12071 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11981 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12077 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11987 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12083 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12089 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 11999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12095 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12101 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12011 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _x1IannotatedTree,_x1IoriginalTree,_x1IupTypes) =
                  x1_ _x1Ocat _x1OdownEnv _x1OexpectedTypes _x1Oflags _x1OimCast 
              ( _x2IannotatedTree,_x2IoriginalTree) =
                  x2_ _x2Ocat _x2Oflags _x2OimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprListStatementListPairList -------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprListStatementListPair 
         child tl             : ScalarExprListStatementListPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprListStatementListPairList  = [ScalarExprListStatementListPair ]
-- cata
sem_ScalarExprListStatementListPairList :: ScalarExprListStatementListPairList  ->
                                           T_ScalarExprListStatementListPairList 
sem_ScalarExprListStatementListPairList list  =
    (Prelude.foldr sem_ScalarExprListStatementListPairList_Cons sem_ScalarExprListStatementListPairList_Nil (Prelude.map sem_ScalarExprListStatementListPair list) )
-- semantic domain
type T_ScalarExprListStatementListPairList  = Catalog ->
                                              TypeCheckingFlags ->
                                              (Maybe Type) ->
                                              ( ScalarExprListStatementListPairList ,ScalarExprListStatementListPairList )
data Inh_ScalarExprListStatementListPairList  = Inh_ScalarExprListStatementListPairList {cat_Inh_ScalarExprListStatementListPairList :: Catalog,flags_Inh_ScalarExprListStatementListPairList :: TypeCheckingFlags,imCast_Inh_ScalarExprListStatementListPairList :: (Maybe Type)}
data Syn_ScalarExprListStatementListPairList  = Syn_ScalarExprListStatementListPairList {annotatedTree_Syn_ScalarExprListStatementListPairList :: ScalarExprListStatementListPairList ,originalTree_Syn_ScalarExprListStatementListPairList :: ScalarExprListStatementListPairList }
wrap_ScalarExprListStatementListPairList :: T_ScalarExprListStatementListPairList  ->
                                            Inh_ScalarExprListStatementListPairList  ->
                                            Syn_ScalarExprListStatementListPairList 
wrap_ScalarExprListStatementListPairList sem (Inh_ScalarExprListStatementListPairList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_ScalarExprListStatementListPairList _lhsOannotatedTree _lhsOoriginalTree ))
sem_ScalarExprListStatementListPairList_Cons :: T_ScalarExprListStatementListPair  ->
                                                T_ScalarExprListStatementListPairList  ->
                                                T_ScalarExprListStatementListPairList 
sem_ScalarExprListStatementListPairList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprListStatementListPairList 
              _lhsOoriginalTree :: ScalarExprListStatementListPairList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: ScalarExprListStatementListPair 
              _hdIoriginalTree :: ScalarExprListStatementListPair 
              _tlIannotatedTree :: ScalarExprListStatementListPairList 
              _tlIoriginalTree :: ScalarExprListStatementListPairList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 12172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 12178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 12184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 12190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_ScalarExprListStatementListPairList_Nil :: T_ScalarExprListStatementListPairList 
sem_ScalarExprListStatementListPairList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprListStatementListPairList 
              _lhsOoriginalTree :: ScalarExprListStatementListPairList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 12244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 12250 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 12256 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 12262 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprRoot ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative ScalarExprRoot:
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data ScalarExprRoot  = ScalarExprRoot (ScalarExpr ) 
                     deriving ( Show)
-- cata
sem_ScalarExprRoot :: ScalarExprRoot  ->
                      T_ScalarExprRoot 
sem_ScalarExprRoot (ScalarExprRoot _expr )  =
    (sem_ScalarExprRoot_ScalarExprRoot (sem_ScalarExpr _expr ) )
-- semantic domain
type T_ScalarExprRoot  = Catalog ->
                         TypeCheckingFlags ->
                         ( ScalarExprRoot ,ScalarExprRoot )
data Inh_ScalarExprRoot  = Inh_ScalarExprRoot {cat_Inh_ScalarExprRoot :: Catalog,flags_Inh_ScalarExprRoot :: TypeCheckingFlags}
data Syn_ScalarExprRoot  = Syn_ScalarExprRoot {annotatedTree_Syn_ScalarExprRoot :: ScalarExprRoot ,originalTree_Syn_ScalarExprRoot :: ScalarExprRoot }
wrap_ScalarExprRoot :: T_ScalarExprRoot  ->
                       Inh_ScalarExprRoot  ->
                       Syn_ScalarExprRoot 
wrap_ScalarExprRoot sem (Inh_ScalarExprRoot _lhsIcat _lhsIflags )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags 
     in  (Syn_ScalarExprRoot _lhsOannotatedTree _lhsOoriginalTree ))
sem_ScalarExprRoot_ScalarExprRoot :: T_ScalarExpr  ->
                                     T_ScalarExprRoot 
sem_ScalarExprRoot_ScalarExprRoot expr_  =
    (\ _lhsIcat
       _lhsIflags ->
         (let _exprOimCast :: (Maybe Type)
              _exprOexpectedType :: (Maybe Type)
              _lhsOannotatedTree :: ScalarExprRoot 
              _lhsOoriginalTree :: ScalarExprRoot 
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOflags :: TypeCheckingFlags
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag"(line 112, column 8)
              _exprOimCast =
                  ({-# LINE 112 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 12320 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 450, column 20)
              _exprOexpectedType =
                  ({-# LINE 450 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 12326 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarExprRoot _exprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 12332 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarExprRoot _exprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 12338 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 12344 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12254 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 12350 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12356 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: ScalarExprRoot.ScalarExprRoot.expr.downEnv"
<<<<<<< HEAD
                   {-# LINE 12362 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprStatementListPair ---------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Tuple:
         child x1             : ScalarExpr 
         child x2             : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprStatementListPair  = ( ScalarExpr ,StatementList )
-- cata
sem_ScalarExprStatementListPair :: ScalarExprStatementListPair  ->
                                   T_ScalarExprStatementListPair 
sem_ScalarExprStatementListPair ( x1,x2)  =
    (sem_ScalarExprStatementListPair_Tuple (sem_ScalarExpr x1 ) (sem_StatementList x2 ) )
-- semantic domain
type T_ScalarExprStatementListPair  = Catalog ->
                                      TypeCheckingFlags ->
                                      (Maybe Type) ->
                                      ( ScalarExprStatementListPair ,ScalarExprStatementListPair )
data Inh_ScalarExprStatementListPair  = Inh_ScalarExprStatementListPair {cat_Inh_ScalarExprStatementListPair :: Catalog,flags_Inh_ScalarExprStatementListPair :: TypeCheckingFlags,imCast_Inh_ScalarExprStatementListPair :: (Maybe Type)}
data Syn_ScalarExprStatementListPair  = Syn_ScalarExprStatementListPair {annotatedTree_Syn_ScalarExprStatementListPair :: ScalarExprStatementListPair ,originalTree_Syn_ScalarExprStatementListPair :: ScalarExprStatementListPair }
wrap_ScalarExprStatementListPair :: T_ScalarExprStatementListPair  ->
                                    Inh_ScalarExprStatementListPair  ->
                                    Syn_ScalarExprStatementListPair 
wrap_ScalarExprStatementListPair sem (Inh_ScalarExprStatementListPair _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_ScalarExprStatementListPair _lhsOannotatedTree _lhsOoriginalTree ))
sem_ScalarExprStatementListPair_Tuple :: T_ScalarExpr  ->
                                         T_StatementList  ->
                                         T_ScalarExprStatementListPair 
sem_ScalarExprStatementListPair_Tuple x1_ x2_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprStatementListPair 
              _lhsOoriginalTree :: ScalarExprStatementListPair 
              _x1Ocat :: Catalog
              _x1OdownEnv :: Environment
              _x1OexpectedType :: (Maybe Type)
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe Type)
              _x2Ocat :: Catalog
              _x2Oflags :: TypeCheckingFlags
              _x2OimCast :: (Maybe Type)
              _x1IannotatedTree :: ScalarExpr 
              _x1IcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _x1IoriginalTree :: ScalarExpr 
              _x1IupType :: (Maybe Type)
              _x2IannotatedTree :: StatementList 
              _x2IoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
<<<<<<< HEAD
                   {-# LINE 12437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12347 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
<<<<<<< HEAD
                   {-# LINE 12443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 12449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 12455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _x1OdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: ScalarExprStatementListPair.Tuple.x1.downEnv"
<<<<<<< HEAD
                   {-# LINE 12467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _x1OexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: ScalarExprStatementListPair.Tuple.x1.expectedType"
<<<<<<< HEAD
                   {-# LINE 12473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12395 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _x1IannotatedTree,_x1IcolExprs,_x1IoriginalTree,_x1IupType) =
                  x1_ _x1Ocat _x1OdownEnv _x1OexpectedType _x1Oflags _x1OimCast 
              ( _x2IannotatedTree,_x2IoriginalTree) =
                  x2_ _x2Ocat _x2Oflags _x2OimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprStatementListPairList -----------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprStatementListPair 
         child tl             : ScalarExprStatementListPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprStatementListPairList  = [ScalarExprStatementListPair ]
-- cata
sem_ScalarExprStatementListPairList :: ScalarExprStatementListPairList  ->
                                       T_ScalarExprStatementListPairList 
sem_ScalarExprStatementListPairList list  =
    (Prelude.foldr sem_ScalarExprStatementListPairList_Cons sem_ScalarExprStatementListPairList_Nil (Prelude.map sem_ScalarExprStatementListPair list) )
-- semantic domain
type T_ScalarExprStatementListPairList  = Catalog ->
                                          TypeCheckingFlags ->
                                          (Maybe Type) ->
                                          ( ScalarExprStatementListPairList ,ScalarExprStatementListPairList )
data Inh_ScalarExprStatementListPairList  = Inh_ScalarExprStatementListPairList {cat_Inh_ScalarExprStatementListPairList :: Catalog,flags_Inh_ScalarExprStatementListPairList :: TypeCheckingFlags,imCast_Inh_ScalarExprStatementListPairList :: (Maybe Type)}
data Syn_ScalarExprStatementListPairList  = Syn_ScalarExprStatementListPairList {annotatedTree_Syn_ScalarExprStatementListPairList :: ScalarExprStatementListPairList ,originalTree_Syn_ScalarExprStatementListPairList :: ScalarExprStatementListPairList }
wrap_ScalarExprStatementListPairList :: T_ScalarExprStatementListPairList  ->
                                        Inh_ScalarExprStatementListPairList  ->
                                        Syn_ScalarExprStatementListPairList 
wrap_ScalarExprStatementListPairList sem (Inh_ScalarExprStatementListPairList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_ScalarExprStatementListPairList _lhsOannotatedTree _lhsOoriginalTree ))
sem_ScalarExprStatementListPairList_Cons :: T_ScalarExprStatementListPair  ->
                                            T_ScalarExprStatementListPairList  ->
                                            T_ScalarExprStatementListPairList 
sem_ScalarExprStatementListPairList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprStatementListPairList 
              _lhsOoriginalTree :: ScalarExprStatementListPairList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: ScalarExprStatementListPair 
              _hdIoriginalTree :: ScalarExprStatementListPair 
              _tlIannotatedTree :: ScalarExprStatementListPairList 
              _tlIoriginalTree :: ScalarExprStatementListPairList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 12574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 12580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12490 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 12586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 12592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_ScalarExprStatementListPairList_Nil :: T_ScalarExprStatementListPairList 
sem_ScalarExprStatementListPairList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprStatementListPairList 
              _lhsOoriginalTree :: ScalarExprStatementListPairList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 12646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12556 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 12652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 12658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 12664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- SelectItem --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         colExprs             : [(NameComponent,Maybe Type,ScalarExpr)]
         originalTree         : SELF 
   alternatives:
      alternative SelExp:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative SelectItem:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         child name           : {NameComponent}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data SelectItem  = SelExp (Annotation ) (ScalarExpr ) 
                 | SelectItem (Annotation ) (ScalarExpr ) (NameComponent) 
                 deriving ( Data,Eq,Show,Typeable)
-- cata
sem_SelectItem :: SelectItem  ->
                  T_SelectItem 
sem_SelectItem (SelExp _ann _ex )  =
    (sem_SelectItem_SelExp (sem_Annotation _ann ) (sem_ScalarExpr _ex ) )
sem_SelectItem (SelectItem _ann _ex _name )  =
    (sem_SelectItem_SelectItem (sem_Annotation _ann ) (sem_ScalarExpr _ex ) _name )
-- semantic domain
type T_SelectItem  = Catalog ->
                     Environment ->
                     TypeCheckingFlags ->
                     (Maybe Type) ->
                     ( SelectItem ,([(NameComponent,Maybe Type,ScalarExpr)]),SelectItem )
data Inh_SelectItem  = Inh_SelectItem {cat_Inh_SelectItem :: Catalog,downEnv_Inh_SelectItem :: Environment,flags_Inh_SelectItem :: TypeCheckingFlags,imCast_Inh_SelectItem :: (Maybe Type)}
data Syn_SelectItem  = Syn_SelectItem {annotatedTree_Syn_SelectItem :: SelectItem ,colExprs_Syn_SelectItem :: ([(NameComponent,Maybe Type,ScalarExpr)]),originalTree_Syn_SelectItem :: SelectItem }
wrap_SelectItem :: T_SelectItem  ->
                   Inh_SelectItem  ->
                   Syn_SelectItem 
wrap_SelectItem sem (Inh_SelectItem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast 
     in  (Syn_SelectItem _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree ))
sem_SelectItem_SelExp :: T_Annotation  ->
                         T_ScalarExpr  ->
                         T_SelectItem 
sem_SelectItem_SelExp ann_ ex_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _exOexpectedType :: (Maybe Type)
              _lhsOannotatedTree :: SelectItem 
              _annOtpe :: (Either [TypeError] Type)
              _lhsOoriginalTree :: SelectItem 
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exIannotatedTree :: ScalarExpr 
              _exIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr 
              _exIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 456, column 23)
              _exOexpectedType =
                  ({-# LINE 456 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 12748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 116, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   if tcfAddSelectItemAliases _lhsIflags
                   then case _exIcolExprs of
                          [(n,_,_)] -> SelectItem _annIannotatedTree _exIannotatedTree n
                          _ ->
                               _annotatedTree
                   else _annotatedTree
<<<<<<< HEAD
                   {-# LINE 12759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 191, column 7)
              _annOtpe =
                  ({-# LINE 191 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 12765 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelExp _annIannotatedTree _exIannotatedTree
<<<<<<< HEAD
                   {-# LINE 12771 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelExp _annIoriginalTree _exIoriginalTree
<<<<<<< HEAD
                   {-# LINE 12777 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 12783 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12693 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOcolExprs =
                  ({-# LINE 149 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _exIcolExprs
<<<<<<< HEAD
                   {-# LINE 12789 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12699 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12705 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12711 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12717 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12723 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 12819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOcat _exOdownEnv _exOexpectedType _exOflags _exOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree)))
sem_SelectItem_SelectItem :: T_Annotation  ->
                             T_ScalarExpr  ->
                             NameComponent ->
                             T_SelectItem 
sem_SelectItem_SelectItem ann_ ex_ name_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _exOexpectedType :: (Maybe Type)
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: SelectItem 
              _lhsOoriginalTree :: SelectItem 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exIannotatedTree :: ScalarExpr 
              _exIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr 
              _exIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 456, column 23)
              _exOexpectedType =
                  ({-# LINE 456 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 12869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 111, column 7)
              _lhsOcolExprs =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   case _exIcolExprs of
                     [(_,t,e)] -> [(name_, t,e)]
                     x -> x
<<<<<<< HEAD
                   {-# LINE 12877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 191, column 7)
              _annOtpe =
                  ({-# LINE 191 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 12883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectItem _annIannotatedTree _exIannotatedTree name_
<<<<<<< HEAD
                   {-# LINE 12889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectItem _annIoriginalTree _exIoriginalTree name_
<<<<<<< HEAD
                   {-# LINE 12895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 12901 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 12907 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12913 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 12931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 12937 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 12943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 12949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOcat _exOdownEnv _exOexpectedType _exOflags _exOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree)))
-- SelectItemList ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         colExprs             : [(NameComponent,Maybe Type,ScalarExpr)]
         originalTree         : SELF 
         upEnv                : Environment
         upType               : Maybe [(Text,Type)]
   alternatives:
      alternative Cons:
         child hd             : SelectItem 
         child tl             : SelectItemList 
         visit 0:
            local colExprs    : _
            local upType      : _
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local upType      : _
            local annotatedTree : _
            local originalTree : _
-}
type SelectItemList  = [SelectItem ]
-- cata
sem_SelectItemList :: SelectItemList  ->
                      T_SelectItemList 
sem_SelectItemList list  =
    (Prelude.foldr sem_SelectItemList_Cons sem_SelectItemList_Nil (Prelude.map sem_SelectItem list) )
-- semantic domain
type T_SelectItemList  = Catalog ->
                         Environment ->
                         TypeCheckingFlags ->
                         (Maybe Type) ->
                         ( SelectItemList ,([(NameComponent,Maybe Type,ScalarExpr)]),SelectItemList ,Environment,(Maybe [(Text,Type)]))
data Inh_SelectItemList  = Inh_SelectItemList {cat_Inh_SelectItemList :: Catalog,downEnv_Inh_SelectItemList :: Environment,flags_Inh_SelectItemList :: TypeCheckingFlags,imCast_Inh_SelectItemList :: (Maybe Type)}
data Syn_SelectItemList  = Syn_SelectItemList {annotatedTree_Syn_SelectItemList :: SelectItemList ,colExprs_Syn_SelectItemList :: ([(NameComponent,Maybe Type,ScalarExpr)]),originalTree_Syn_SelectItemList :: SelectItemList ,upEnv_Syn_SelectItemList :: Environment,upType_Syn_SelectItemList :: (Maybe [(Text,Type)])}
wrap_SelectItemList :: T_SelectItemList  ->
                       Inh_SelectItemList  ->
                       Syn_SelectItemList 
wrap_SelectItemList sem (Inh_SelectItemList _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast 
     in  (Syn_SelectItemList _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree _lhsOupEnv _lhsOupType ))
sem_SelectItemList_Cons :: T_SelectItem  ->
                           T_SelectItemList  ->
                           T_SelectItemList 
sem_SelectItemList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SelectItemList 
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOupType :: (Maybe [(Text,Type)])
              _lhsOupEnv :: Environment
              _lhsOoriginalTree :: SelectItemList 
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: SelectItem 
              _hdIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _hdIoriginalTree :: SelectItem 
              _tlIannotatedTree :: SelectItemList 
              _tlIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _tlIoriginalTree :: SelectItemList 
              _tlIupEnv :: Environment
              _tlIupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 131, column 10)
              _lhsOannotatedTree =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   if tcfExpandStars _lhsIflags
                   then flip map _colExprs $ \(n,_t,e) ->
                         if ncStr n == ncStr (columnName e) && not (tcfAddSelectItemAliases _lhsIflags)
                         then SelExp emptyAnnotation e
                         else SelectItem emptyAnnotation e n
                   else _annotatedTree
<<<<<<< HEAD
                   {-# LINE 13043 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 172, column 9)
              _colExprs =
                  ({-# LINE 172 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _hdIcolExprs ++ _tlIcolExprs
<<<<<<< HEAD
                   {-# LINE 13049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 173, column 9)
              _lhsOcolExprs =
                  ({-# LINE 173 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _colExprs
<<<<<<< HEAD
                   {-# LINE 13055 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 174, column 9)
              _upType =
                  ({-# LINE 174 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   sequence $ flip map _colExprs
                   $ \(n,t,_) -> fmap (ncStrT n,) t
<<<<<<< HEAD
                   {-# LINE 13062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 177, column 7)
              _lhsOupType =
                  ({-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 13068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 178, column 7)
              _lhsOupEnv =
                  ({-# LINE 178 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   case fmap envSelectListEnvironment _upType     of
                     (Just (Right e)) -> e
                     _ -> brokeEnvironment
<<<<<<< HEAD
                   {-# LINE 13076 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12986 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 13082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12992 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 13088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 12998 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 13094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13004 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13010 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 150 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 13106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13028 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 153 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 13130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13040 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13046 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13052 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIcolExprs,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOdownEnv _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIcolExprs,_tlIoriginalTree,_tlIupEnv,_tlIupType) =
                  tl_ _tlOcat _tlOdownEnv _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType)))
sem_SelectItemList_Nil :: T_SelectItemList 
sem_SelectItemList_Nil  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SelectItemList 
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOupType :: (Maybe [(Text,Type)])
              _lhsOupEnv :: Environment
              _lhsOoriginalTree :: SelectItemList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 130, column 9)
              _lhsOannotatedTree =
                  ({-# LINE 130 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 13164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 169, column 9)
              _lhsOcolExprs =
                  ({-# LINE 169 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 13170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 170, column 9)
              _upType =
                  ({-# LINE 170 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 13176 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 177, column 7)
              _lhsOupType =
                  ({-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _upType
<<<<<<< HEAD
                   {-# LINE 13182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 178, column 7)
              _lhsOupEnv =
                  ({-# LINE 178 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   case fmap envSelectListEnvironment _upType     of
                     (Just (Right e)) -> e
                     _ -> brokeEnvironment
<<<<<<< HEAD
                   {-# LINE 13190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 13196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 13202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 13208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType)))
-- SelectList --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         colExprs             : [(NameComponent,Maybe Type,ScalarExpr)]
         originalTree         : SELF 
         upEnv                : Environment
         upType               : Maybe [(Text,Type)]
   alternatives:
      alternative SelectList:
         child ann            : Annotation 
         child items          : SelectItemList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data SelectList  = SelectList (Annotation ) (SelectItemList ) 
                 deriving ( Data,Eq,Show,Typeable)
-- cata
sem_SelectList :: SelectList  ->
                  T_SelectList 
sem_SelectList (SelectList _ann _items )  =
    (sem_SelectList_SelectList (sem_Annotation _ann ) (sem_SelectItemList _items ) )
-- semantic domain
type T_SelectList  = Catalog ->
                     Environment ->
                     TypeCheckingFlags ->
                     (Maybe Type) ->
                     ( SelectList ,([(NameComponent,Maybe Type,ScalarExpr)]),SelectList ,Environment,(Maybe [(Text,Type)]))
data Inh_SelectList  = Inh_SelectList {cat_Inh_SelectList :: Catalog,downEnv_Inh_SelectList :: Environment,flags_Inh_SelectList :: TypeCheckingFlags,imCast_Inh_SelectList :: (Maybe Type)}
data Syn_SelectList  = Syn_SelectList {annotatedTree_Syn_SelectList :: SelectList ,colExprs_Syn_SelectList :: ([(NameComponent,Maybe Type,ScalarExpr)]),originalTree_Syn_SelectList :: SelectList ,upEnv_Syn_SelectList :: Environment,upType_Syn_SelectList :: (Maybe [(Text,Type)])}
wrap_SelectList :: T_SelectList  ->
                   Inh_SelectList  ->
                   Syn_SelectList 
wrap_SelectList sem (Inh_SelectList _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast 
     in  (Syn_SelectList _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree _lhsOupEnv _lhsOupType ))
sem_SelectList_SelectList :: T_Annotation  ->
                             T_SelectItemList  ->
                             T_SelectList 
sem_SelectList_SelectList ann_ items_  =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: SelectList 
              _lhsOoriginalTree :: SelectList 
              _lhsOcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _lhsOupEnv :: Environment
              _lhsOupType :: (Maybe [(Text,Type)])
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _itemsOcat :: Catalog
              _itemsOdownEnv :: Environment
              _itemsOflags :: TypeCheckingFlags
              _itemsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _itemsIannotatedTree :: SelectItemList 
              _itemsIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _itemsIoriginalTree :: SelectItemList 
              _itemsIupEnv :: Environment
              _itemsIupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 188, column 7)
              _annOtpe =
                  ({-# LINE 188 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 13286 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectList _annIannotatedTree _itemsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 13292 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectList _annIoriginalTree _itemsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 13298 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 13304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 13310 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOcolExprs =
                  ({-# LINE 154 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _itemsIcolExprs
<<<<<<< HEAD
                   {-# LINE 13316 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOupEnv =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _itemsIupEnv
<<<<<<< HEAD
                   {-# LINE 13322 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (up)
              _lhsOupType =
                  ({-# LINE 155 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _itemsIupType
<<<<<<< HEAD
                   {-# LINE 13328 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13250 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13256 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _itemsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13262 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _itemsOdownEnv =
                  ({-# LINE 153 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIdownEnv
<<<<<<< HEAD
                   {-# LINE 13358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13268 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _itemsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13274 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _itemsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13280 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _itemsIannotatedTree,_itemsIcolExprs,_itemsIoriginalTree,_itemsIupEnv,_itemsIupType) =
                  items_ _itemsOcat _itemsOdownEnv _itemsOflags _itemsOimCast 
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType)))
-- SetClause ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative MultiSetClause:
         child ann            : Annotation 
         child setTargets     : {[NameComponent]}
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative SetClause:
         child ann            : Annotation 
         child setTarget      : {NameComponent}
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data SetClause  = MultiSetClause (Annotation ) (([NameComponent])) (ScalarExpr ) 
                | SetClause (Annotation ) (NameComponent) (ScalarExpr ) 
                deriving ( Data,Eq,Show,Typeable)
-- cata
sem_SetClause :: SetClause  ->
                 T_SetClause 
sem_SetClause (MultiSetClause _ann _setTargets _ex )  =
    (sem_SetClause_MultiSetClause (sem_Annotation _ann ) _setTargets (sem_ScalarExpr _ex ) )
sem_SetClause (SetClause _ann _setTarget _ex )  =
    (sem_SetClause_SetClause (sem_Annotation _ann ) _setTarget (sem_ScalarExpr _ex ) )
-- semantic domain
type T_SetClause  = Catalog ->
                    TypeCheckingFlags ->
                    (Maybe Type) ->
                    ( SetClause ,SetClause )
data Inh_SetClause  = Inh_SetClause {cat_Inh_SetClause :: Catalog,flags_Inh_SetClause :: TypeCheckingFlags,imCast_Inh_SetClause :: (Maybe Type)}
data Syn_SetClause  = Syn_SetClause {annotatedTree_Syn_SetClause :: SetClause ,originalTree_Syn_SetClause :: SetClause }
wrap_SetClause :: T_SetClause  ->
                  Inh_SetClause  ->
                  Syn_SetClause 
wrap_SetClause sem (Inh_SetClause _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_SetClause _lhsOannotatedTree _lhsOoriginalTree ))
sem_SetClause_MultiSetClause :: T_Annotation  ->
                                ([NameComponent]) ->
                                T_ScalarExpr  ->
                                T_SetClause 
sem_SetClause_MultiSetClause ann_ setTargets_ ex_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SetClause 
              _lhsOoriginalTree :: SetClause 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOexpectedType :: (Maybe Type)
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exIannotatedTree :: ScalarExpr 
              _exIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr 
              _exIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   MultiSetClause _annIannotatedTree setTargets_ _exIannotatedTree
<<<<<<< HEAD
                   {-# LINE 13455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   MultiSetClause _annIoriginalTree setTargets_ _exIoriginalTree
<<<<<<< HEAD
                   {-# LINE 13461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 13467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 13473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13395 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: SetClause.MultiSetClause.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 13497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: SetClause.MultiSetClause.ex.downEnv"
<<<<<<< HEAD
                   {-# LINE 13509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: SetClause.MultiSetClause.ex.expectedType"
<<<<<<< HEAD
                   {-# LINE 13515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13527 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOcat _exOdownEnv _exOexpectedType _exOflags _exOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_SetClause_SetClause :: T_Annotation  ->
                           NameComponent ->
                           T_ScalarExpr  ->
                           T_SetClause 
sem_SetClause_SetClause ann_ setTarget_ ex_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SetClause 
              _lhsOoriginalTree :: SetClause 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOexpectedType :: (Maybe Type)
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exIannotatedTree :: ScalarExpr 
              _exIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr 
              _exIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetClause _annIannotatedTree setTarget_ _exIannotatedTree
<<<<<<< HEAD
                   {-# LINE 13563 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetClause _annIoriginalTree setTarget_ _exIoriginalTree
<<<<<<< HEAD
                   {-# LINE 13569 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 13575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 13581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13599 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: SetClause.SetClause.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 13605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: SetClause.SetClause.ex.downEnv"
<<<<<<< HEAD
                   {-# LINE 13617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13527 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: SetClause.SetClause.ex.expectedType"
<<<<<<< HEAD
                   {-# LINE 13623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13533 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13539 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13545 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOcat _exOdownEnv _exOexpectedType _exOflags _exOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- SetClauseList -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : SetClause 
         child tl             : SetClauseList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type SetClauseList  = [SetClause ]
-- cata
sem_SetClauseList :: SetClauseList  ->
                     T_SetClauseList 
sem_SetClauseList list  =
    (Prelude.foldr sem_SetClauseList_Cons sem_SetClauseList_Nil (Prelude.map sem_SetClause list) )
-- semantic domain
type T_SetClauseList  = Catalog ->
                        TypeCheckingFlags ->
                        (Maybe Type) ->
                        ( SetClauseList ,SetClauseList )
data Inh_SetClauseList  = Inh_SetClauseList {cat_Inh_SetClauseList :: Catalog,flags_Inh_SetClauseList :: TypeCheckingFlags,imCast_Inh_SetClauseList :: (Maybe Type)}
data Syn_SetClauseList  = Syn_SetClauseList {annotatedTree_Syn_SetClauseList :: SetClauseList ,originalTree_Syn_SetClauseList :: SetClauseList }
wrap_SetClauseList :: T_SetClauseList  ->
                      Inh_SetClauseList  ->
                      Syn_SetClauseList 
wrap_SetClauseList sem (Inh_SetClauseList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_SetClauseList _lhsOannotatedTree _lhsOoriginalTree ))
sem_SetClauseList_Cons :: T_SetClause  ->
                          T_SetClauseList  ->
                          T_SetClauseList 
sem_SetClauseList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SetClauseList 
              _lhsOoriginalTree :: SetClauseList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: SetClause 
              _hdIoriginalTree :: SetClause 
              _tlIannotatedTree :: SetClauseList 
              _tlIoriginalTree :: SetClauseList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 13706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 13712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 13718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 13724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 13748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 13754 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 13760 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_SetClauseList_Nil :: T_SetClauseList 
sem_SetClauseList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SetClauseList 
              _lhsOoriginalTree :: SetClauseList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 13778 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 13784 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 13790 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 13796 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 13706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- Statement ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative AlterSequence:
         child ann            : Annotation 
         child name           : Name 
         child ownedBy        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterTable:
         child ann            : Annotation 
         child name           : Name 
         child actions        : AlterTableActionList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AntiStatement:
         child string         : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Assignment:
         child ann            : Annotation 
         child target         : Name 
         child value          : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Block:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child vars           : VarDefList 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CaseStatement:
         child ann            : Annotation 
         child cases          : ScalarExprListStatementListPairList 
         child els            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CaseStatementSimple:
         child ann            : Annotation 
         child val            : ScalarExpr 
         child cases          : ScalarExprListStatementListPairList 
         child els            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ContinueStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CopyData:
         child ann            : Annotation 
         child insData        : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CopyFrom:
         child ann            : Annotation 
         child table          : Name 
         child targetCols     : {[NameComponent]}
         child source         : {CopyFromSource}
         child opts           : {[CopyOption]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CopyTo:
         child ann            : Annotation 
         child cp             : {CopyToSource}
         child fn             : {String}
         child opts           : {[CopyOption]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateDatabase:
         child ann            : Annotation 
         child nm             : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateDomain:
         child ann            : Annotation 
         child name           : Name 
         child typ            : TypeName 
         child constraintName : {String}
         child check          : MaybeBoolExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateFunction:
         child ann            : Annotation 
         child name           : Name 
         child params         : ParamDefList 
         child rettype        : TypeName 
         child rep            : {Replace}
         child lang           : {Language}
         child body           : FnBody 
         child vol            : {Volatility}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateIndexTSQL:
         child ann            : Annotation 
         child nm             : {NameComponent}
         child obj            : Name 
         child cols           : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateLanguage:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateSequence:
         child ann            : Annotation 
         child name           : Name 
         child incr           : {Integer}
         child min            : {Integer}
         child max            : {Integer}
         child start          : {Integer}
         child cache          : {Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateTable:
         child ann            : Annotation 
         child name           : Name 
         child atts           : AttributeDefList 
         child cons           : ConstraintList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateTableAs:
         child ann            : Annotation 
         child name           : Name 
         child expr           : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateTrigger:
         child ann            : Annotation 
         child name           : {NameComponent}
         child wh             : {TriggerWhen}
         child events         : {[TriggerEvent]}
         child tbl            : Name 
         child firing         : {TriggerFire}
         child fnName         : Name 
         child fnArgs         : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateType:
         child ann            : Annotation 
         child name           : Name 
         child atts           : TypeAttributeDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateView:
         child ann            : Annotation 
         child name           : Name 
         child colNames       : {MaybeNameComponentList}
         child expr           : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DeclareStatement:
         child ann            : Annotation 
         child ds             : {[(String,TypeName,Maybe ScalarExpr)]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Delete:
         child ann            : Annotation 
         child table          : Name 
         child using          : TableRefList 
         child whr            : MaybeBoolExpr 
         child returning      : MaybeSelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropFunction:
         child ann            : Annotation 
         child ifE            : {IfExists}
         child sigs           : NameTypeNameListPairList 
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropSomething:
         child ann            : Annotation 
         child dropType       : {DropType}
         child ifE            : {IfExists}
         child names          : {[Name]}
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropTrigger:
         child ann            : Annotation 
         child ifE            : {IfExists}
         child name           : {NameComponent}
         child tbl            : Name 
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ExecStatement:
         child ann            : Annotation 
         child spName         : Name 
         child args           : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Execute:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ExitStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ForIntegerStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child var            : {NameComponent}
         child from           : ScalarExpr 
         child to             : ScalarExpr 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ForQueryStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child var            : {NameComponent}
         child sel            : QueryExpr 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative If:
         child ann            : Annotation 
         child cases          : ScalarExprStatementListPairList 
         child els            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Insert:
         child ann            : Annotation 
         child table          : Name 
         child targetCols     : {[NameComponent]}
         child insData        : QueryExpr 
         child returning      : MaybeSelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Into:
         child ann            : Annotation 
         child strict         : {Bool}
         child into           : {[Name]}
         child stmt           : Statement 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative LoopStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Notify:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative NullStatement:
         child ann            : Annotation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Perform:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative QueryStatement:
         child ann            : Annotation 
         child ex             : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Raise:
         child ann            : Annotation 
         child level          : {RaiseType}
         child message        : {String}
         child args           : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Return:
         child ann            : Annotation 
         child value          : MaybeScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ReturnNext:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ReturnQuery:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Set:
         child ann            : Annotation 
         child name           : {String}
         child values         : {[SetValue]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Truncate:
         child ann            : Annotation 
         child tables         : {[Name]}
         child restartIdentity : {RestartIdentity}
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Update:
         child ann            : Annotation 
         child table          : Name 
         child assigns        : SetClauseList 
         child fromList       : TableRefList 
         child whr            : MaybeBoolExpr 
         child returning      : MaybeSelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative WhileStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child expr           : ScalarExpr 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Statement  = AlterSequence (Annotation ) (Name ) (Name ) 
                | AlterTable (Annotation ) (Name ) (AlterTableActionList ) 
                | AntiStatement (String) 
                | Assignment (Annotation ) (Name ) (ScalarExpr ) 
                | Block (Annotation ) ((Maybe String)) (VarDefList ) (StatementList ) 
                | CaseStatement (Annotation ) (ScalarExprListStatementListPairList ) (StatementList ) 
                | CaseStatementSimple (Annotation ) (ScalarExpr ) (ScalarExprListStatementListPairList ) (StatementList ) 
                | ContinueStatement (Annotation ) ((Maybe String)) 
                | CopyData (Annotation ) (String) 
                | CopyFrom (Annotation ) (Name ) (([NameComponent])) (CopyFromSource) (([CopyOption])) 
                | CopyTo (Annotation ) (CopyToSource) (String) (([CopyOption])) 
                | CreateDatabase (Annotation ) (Name ) 
                | CreateDomain (Annotation ) (Name ) (TypeName ) (String) (MaybeBoolExpr ) 
                | CreateFunction (Annotation ) (Name ) (ParamDefList ) (TypeName ) (Replace) (Language) (FnBody ) (Volatility) 
                | CreateIndexTSQL (Annotation ) (NameComponent) (Name ) (([NameComponent])) 
                | CreateLanguage (Annotation ) (String) 
                | CreateSequence (Annotation ) (Name ) (Integer) (Integer) (Integer) (Integer) (Integer) 
                | CreateTable (Annotation ) (Name ) (AttributeDefList ) (ConstraintList ) 
                | CreateTableAs (Annotation ) (Name ) (QueryExpr ) 
                | CreateTrigger (Annotation ) (NameComponent) (TriggerWhen) (([TriggerEvent])) (Name ) (TriggerFire) (Name ) (ScalarExprList ) 
                | CreateType (Annotation ) (Name ) (TypeAttributeDefList ) 
                | CreateView (Annotation ) (Name ) (MaybeNameComponentList) (QueryExpr ) 
                | DeclareStatement (Annotation ) (([(String,TypeName,Maybe ScalarExpr)])) 
                | Delete (Annotation ) (Name ) (TableRefList ) (MaybeBoolExpr ) (MaybeSelectList ) 
                | DropFunction (Annotation ) (IfExists) (NameTypeNameListPairList ) (Cascade) 
                | DropSomething (Annotation ) (DropType) (IfExists) (([Name])) (Cascade) 
                | DropTrigger (Annotation ) (IfExists) (NameComponent) (Name ) (Cascade) 
                | ExecStatement (Annotation ) (Name ) (ScalarExprList ) 
                | Execute (Annotation ) (ScalarExpr ) 
                | ExitStatement (Annotation ) ((Maybe String)) 
                | ForIntegerStatement (Annotation ) ((Maybe String)) (NameComponent) (ScalarExpr ) (ScalarExpr ) (StatementList ) 
                | ForQueryStatement (Annotation ) ((Maybe String)) (NameComponent) (QueryExpr ) (StatementList ) 
                | If (Annotation ) (ScalarExprStatementListPairList ) (StatementList ) 
                | Insert (Annotation ) (Name ) (([NameComponent])) (QueryExpr ) (MaybeSelectList ) 
                | Into (Annotation ) (Bool) (([Name])) (Statement ) 
                | LoopStatement (Annotation ) ((Maybe String)) (StatementList ) 
                | Notify (Annotation ) (String) 
                | NullStatement (Annotation ) 
                | Perform (Annotation ) (ScalarExpr ) 
                | QueryStatement (Annotation ) (QueryExpr ) 
                | Raise (Annotation ) (RaiseType) (String) (ScalarExprList ) 
                | Return (Annotation ) (MaybeScalarExpr ) 
                | ReturnNext (Annotation ) (ScalarExpr ) 
                | ReturnQuery (Annotation ) (QueryExpr ) 
                | Set (Annotation ) (String) (([SetValue])) 
                | Truncate (Annotation ) (([Name])) (RestartIdentity) (Cascade) 
                | Update (Annotation ) (Name ) (SetClauseList ) (TableRefList ) (MaybeBoolExpr ) (MaybeSelectList ) 
                | WhileStatement (Annotation ) ((Maybe String)) (ScalarExpr ) (StatementList ) 
                deriving ( Data,Eq,Show,Typeable)
-- cata
sem_Statement :: Statement  ->
                 T_Statement 
sem_Statement (AlterSequence _ann _name _ownedBy )  =
    (sem_Statement_AlterSequence (sem_Annotation _ann ) (sem_Name _name ) (sem_Name _ownedBy ) )
sem_Statement (AlterTable _ann _name _actions )  =
    (sem_Statement_AlterTable (sem_Annotation _ann ) (sem_Name _name ) (sem_AlterTableActionList _actions ) )
sem_Statement (AntiStatement _string )  =
    (sem_Statement_AntiStatement _string )
sem_Statement (Assignment _ann _target _value )  =
    (sem_Statement_Assignment (sem_Annotation _ann ) (sem_Name _target ) (sem_ScalarExpr _value ) )
sem_Statement (Block _ann _lb _vars _sts )  =
    (sem_Statement_Block (sem_Annotation _ann ) _lb (sem_VarDefList _vars ) (sem_StatementList _sts ) )
sem_Statement (CaseStatement _ann _cases _els )  =
    (sem_Statement_CaseStatement (sem_Annotation _ann ) (sem_ScalarExprListStatementListPairList _cases ) (sem_StatementList _els ) )
sem_Statement (CaseStatementSimple _ann _val _cases _els )  =
    (sem_Statement_CaseStatementSimple (sem_Annotation _ann ) (sem_ScalarExpr _val ) (sem_ScalarExprListStatementListPairList _cases ) (sem_StatementList _els ) )
sem_Statement (ContinueStatement _ann _lb )  =
    (sem_Statement_ContinueStatement (sem_Annotation _ann ) _lb )
sem_Statement (CopyData _ann _insData )  =
    (sem_Statement_CopyData (sem_Annotation _ann ) _insData )
sem_Statement (CopyFrom _ann _table _targetCols _source _opts )  =
    (sem_Statement_CopyFrom (sem_Annotation _ann ) (sem_Name _table ) _targetCols _source _opts )
sem_Statement (CopyTo _ann _cp _fn _opts )  =
    (sem_Statement_CopyTo (sem_Annotation _ann ) _cp _fn _opts )
sem_Statement (CreateDatabase _ann _nm )  =
    (sem_Statement_CreateDatabase (sem_Annotation _ann ) (sem_Name _nm ) )
sem_Statement (CreateDomain _ann _name _typ _constraintName _check )  =
    (sem_Statement_CreateDomain (sem_Annotation _ann ) (sem_Name _name ) (sem_TypeName _typ ) _constraintName (sem_MaybeBoolExpr _check ) )
sem_Statement (CreateFunction _ann _name _params _rettype _rep _lang _body _vol )  =
    (sem_Statement_CreateFunction (sem_Annotation _ann ) (sem_Name _name ) (sem_ParamDefList _params ) (sem_TypeName _rettype ) _rep _lang (sem_FnBody _body ) _vol )
sem_Statement (CreateIndexTSQL _ann _nm _obj _cols )  =
    (sem_Statement_CreateIndexTSQL (sem_Annotation _ann ) _nm (sem_Name _obj ) _cols )
sem_Statement (CreateLanguage _ann _name )  =
    (sem_Statement_CreateLanguage (sem_Annotation _ann ) _name )
sem_Statement (CreateSequence _ann _name _incr _min _max _start _cache )  =
    (sem_Statement_CreateSequence (sem_Annotation _ann ) (sem_Name _name ) _incr _min _max _start _cache )
sem_Statement (CreateTable _ann _name _atts _cons )  =
    (sem_Statement_CreateTable (sem_Annotation _ann ) (sem_Name _name ) (sem_AttributeDefList _atts ) (sem_ConstraintList _cons ) )
sem_Statement (CreateTableAs _ann _name _expr )  =
    (sem_Statement_CreateTableAs (sem_Annotation _ann ) (sem_Name _name ) (sem_QueryExpr _expr ) )
sem_Statement (CreateTrigger _ann _name _wh _events _tbl _firing _fnName _fnArgs )  =
    (sem_Statement_CreateTrigger (sem_Annotation _ann ) _name _wh _events (sem_Name _tbl ) _firing (sem_Name _fnName ) (sem_ScalarExprList _fnArgs ) )
sem_Statement (CreateType _ann _name _atts )  =
    (sem_Statement_CreateType (sem_Annotation _ann ) (sem_Name _name ) (sem_TypeAttributeDefList _atts ) )
sem_Statement (CreateView _ann _name _colNames _expr )  =
    (sem_Statement_CreateView (sem_Annotation _ann ) (sem_Name _name ) _colNames (sem_QueryExpr _expr ) )
sem_Statement (DeclareStatement _ann _ds )  =
    (sem_Statement_DeclareStatement (sem_Annotation _ann ) _ds )
sem_Statement (Delete _ann _table _using _whr _returning )  =
    (sem_Statement_Delete (sem_Annotation _ann ) (sem_Name _table ) (sem_TableRefList _using ) (sem_MaybeBoolExpr _whr ) (sem_MaybeSelectList _returning ) )
sem_Statement (DropFunction _ann _ifE _sigs _cascade )  =
    (sem_Statement_DropFunction (sem_Annotation _ann ) _ifE (sem_NameTypeNameListPairList _sigs ) _cascade )
sem_Statement (DropSomething _ann _dropType _ifE _names _cascade )  =
    (sem_Statement_DropSomething (sem_Annotation _ann ) _dropType _ifE _names _cascade )
sem_Statement (DropTrigger _ann _ifE _name _tbl _cascade )  =
    (sem_Statement_DropTrigger (sem_Annotation _ann ) _ifE _name (sem_Name _tbl ) _cascade )
sem_Statement (ExecStatement _ann _spName _args )  =
    (sem_Statement_ExecStatement (sem_Annotation _ann ) (sem_Name _spName ) (sem_ScalarExprList _args ) )
sem_Statement (Execute _ann _expr )  =
    (sem_Statement_Execute (sem_Annotation _ann ) (sem_ScalarExpr _expr ) )
sem_Statement (ExitStatement _ann _lb )  =
    (sem_Statement_ExitStatement (sem_Annotation _ann ) _lb )
sem_Statement (ForIntegerStatement _ann _lb _var _from _to _sts )  =
    (sem_Statement_ForIntegerStatement (sem_Annotation _ann ) _lb _var (sem_ScalarExpr _from ) (sem_ScalarExpr _to ) (sem_StatementList _sts ) )
sem_Statement (ForQueryStatement _ann _lb _var _sel _sts )  =
    (sem_Statement_ForQueryStatement (sem_Annotation _ann ) _lb _var (sem_QueryExpr _sel ) (sem_StatementList _sts ) )
sem_Statement (If _ann _cases _els )  =
    (sem_Statement_If (sem_Annotation _ann ) (sem_ScalarExprStatementListPairList _cases ) (sem_StatementList _els ) )
sem_Statement (Insert _ann _table _targetCols _insData _returning )  =
    (sem_Statement_Insert (sem_Annotation _ann ) (sem_Name _table ) _targetCols (sem_QueryExpr _insData ) (sem_MaybeSelectList _returning ) )
sem_Statement (Into _ann _strict _into _stmt )  =
    (sem_Statement_Into (sem_Annotation _ann ) _strict _into (sem_Statement _stmt ) )
sem_Statement (LoopStatement _ann _lb _sts )  =
    (sem_Statement_LoopStatement (sem_Annotation _ann ) _lb (sem_StatementList _sts ) )
sem_Statement (Notify _ann _name )  =
    (sem_Statement_Notify (sem_Annotation _ann ) _name )
sem_Statement (NullStatement _ann )  =
    (sem_Statement_NullStatement (sem_Annotation _ann ) )
sem_Statement (Perform _ann _expr )  =
    (sem_Statement_Perform (sem_Annotation _ann ) (sem_ScalarExpr _expr ) )
sem_Statement (QueryStatement _ann _ex )  =
    (sem_Statement_QueryStatement (sem_Annotation _ann ) (sem_QueryExpr _ex ) )
sem_Statement (Raise _ann _level _message _args )  =
    (sem_Statement_Raise (sem_Annotation _ann ) _level _message (sem_ScalarExprList _args ) )
sem_Statement (Return _ann _value )  =
    (sem_Statement_Return (sem_Annotation _ann ) (sem_MaybeScalarExpr _value ) )
sem_Statement (ReturnNext _ann _expr )  =
    (sem_Statement_ReturnNext (sem_Annotation _ann ) (sem_ScalarExpr _expr ) )
sem_Statement (ReturnQuery _ann _sel )  =
    (sem_Statement_ReturnQuery (sem_Annotation _ann ) (sem_QueryExpr _sel ) )
sem_Statement (Set _ann _name _values )  =
    (sem_Statement_Set (sem_Annotation _ann ) _name _values )
sem_Statement (Truncate _ann _tables _restartIdentity _cascade )  =
    (sem_Statement_Truncate (sem_Annotation _ann ) _tables _restartIdentity _cascade )
sem_Statement (Update _ann _table _assigns _fromList _whr _returning )  =
    (sem_Statement_Update (sem_Annotation _ann ) (sem_Name _table ) (sem_SetClauseList _assigns ) (sem_TableRefList _fromList ) (sem_MaybeBoolExpr _whr ) (sem_MaybeSelectList _returning ) )
sem_Statement (WhileStatement _ann _lb _expr _sts )  =
    (sem_Statement_WhileStatement (sem_Annotation _ann ) _lb (sem_ScalarExpr _expr ) (sem_StatementList _sts ) )
-- semantic domain
type T_Statement  = Catalog ->
                    TypeCheckingFlags ->
                    (Maybe Type) ->
                    ( Statement ,Statement )
data Inh_Statement  = Inh_Statement {cat_Inh_Statement :: Catalog,flags_Inh_Statement :: TypeCheckingFlags,imCast_Inh_Statement :: (Maybe Type)}
data Syn_Statement  = Syn_Statement {annotatedTree_Syn_Statement :: Statement ,originalTree_Syn_Statement :: Statement }
wrap_Statement :: T_Statement  ->
                  Inh_Statement  ->
                  Syn_Statement 
wrap_Statement sem (Inh_Statement _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_Statement _lhsOannotatedTree _lhsOoriginalTree ))
sem_Statement_AlterSequence :: T_Annotation  ->
                               T_Name  ->
                               T_Name  ->
                               T_Statement 
sem_Statement_AlterSequence ann_ name_ ownedBy_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe Type)
              _nameOtpe :: (Either [TypeError] Type)
              _ownedByOcat :: Catalog
              _ownedByOflags :: TypeCheckingFlags
              _ownedByOimCast :: (Maybe Type)
              _ownedByOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nameIannotatedTree :: Name 
              _nameIoriginalTree :: Name 
              _ownedByIannotatedTree :: Name 
              _ownedByIoriginalTree :: Name 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequence _annIannotatedTree _nameIannotatedTree _ownedByIannotatedTree
<<<<<<< HEAD
                   {-# LINE 14368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequence _annIoriginalTree _nameIoriginalTree _ownedByIoriginalTree
<<<<<<< HEAD
                   {-# LINE 14374 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14284 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 14380 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 14386 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14392 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14302 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14398 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14308 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14314 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.AlterSequence.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 14410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14320 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14416 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14326 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14422 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14332 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14428 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14338 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.AlterSequence.name.tpe"
<<<<<<< HEAD
                   {-# LINE 14434 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14344 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _ownedByOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14440 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14350 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _ownedByOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14446 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14356 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _ownedByOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14452 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14362 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _ownedByOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.AlterSequence.ownedBy.tpe"
<<<<<<< HEAD
                   {-# LINE 14458 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe 
              ( _ownedByIannotatedTree,_ownedByIoriginalTree) =
                  ownedBy_ _ownedByOcat _ownedByOflags _ownedByOimCast _ownedByOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_AlterTable :: T_Annotation  ->
                            T_Name  ->
                            T_AlterTableActionList  ->
                            T_Statement 
sem_Statement_AlterTable ann_ name_ actions_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe Type)
              _nameOtpe :: (Either [TypeError] Type)
              _actionsOcat :: Catalog
              _actionsOflags :: TypeCheckingFlags
              _actionsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nameIannotatedTree :: Name 
              _nameIoriginalTree :: Name 
              _actionsIannotatedTree :: AlterTableActionList 
              _actionsIoriginalTree :: AlterTableActionList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTable _annIannotatedTree _nameIannotatedTree _actionsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 14498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTable _annIoriginalTree _nameIoriginalTree _actionsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 14504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 14510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 14516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.AlterTable.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 14540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14462 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.AlterTable.name.tpe"
<<<<<<< HEAD
                   {-# LINE 14564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _actionsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _actionsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _actionsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe 
              ( _actionsIannotatedTree,_actionsIoriginalTree) =
                  actions_ _actionsOcat _actionsOflags _actionsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_AntiStatement :: String ->
                               T_Statement 
sem_Statement_AntiStatement string_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiStatement string_
<<<<<<< HEAD
                   {-# LINE 14603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiStatement string_
<<<<<<< HEAD
                   {-# LINE 14609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 14615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 14621 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Assignment :: T_Annotation  ->
                            T_Name  ->
                            T_ScalarExpr  ->
                            T_Statement 
sem_Statement_Assignment ann_ target_ value_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _targetOtpe :: (Either [TypeError] Type)
              _valueOdownEnv :: Environment
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _targetOcat :: Catalog
              _targetOflags :: TypeCheckingFlags
              _targetOimCast :: (Maybe Type)
              _valueOcat :: Catalog
              _valueOexpectedType :: (Maybe Type)
              _valueOflags :: TypeCheckingFlags
              _valueOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _targetIannotatedTree :: Name 
              _targetIoriginalTree :: Name 
              _valueIannotatedTree :: ScalarExpr 
              _valueIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _valueIoriginalTree :: ScalarExpr 
              _valueIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 14659 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14569 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 11, column 5)
              _targetOtpe =
                  ({-# LINE 11 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 14665 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 12, column 5)
              _valueOdownEnv =
                  ({-# LINE 12 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   emptyEnvironment
<<<<<<< HEAD
                   {-# LINE 14671 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Assignment _annIannotatedTree _targetIannotatedTree _valueIannotatedTree
<<<<<<< HEAD
                   {-# LINE 14677 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Assignment _annIoriginalTree _targetIoriginalTree _valueIoriginalTree
<<<<<<< HEAD
                   {-# LINE 14683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 14689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14599 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 14695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14713 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _targetOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14719 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _targetOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14725 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _targetOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14731 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14641 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14737 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14647 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _valueOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.Assignment.value.expectedType"
<<<<<<< HEAD
                   {-# LINE 14743 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14653 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14749 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14659 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14755 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14665 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _targetIannotatedTree,_targetIoriginalTree) =
                  target_ _targetOcat _targetOflags _targetOimCast _targetOtpe 
              ( _valueIannotatedTree,_valueIcolExprs,_valueIoriginalTree,_valueIupType) =
                  value_ _valueOcat _valueOdownEnv _valueOexpectedType _valueOflags _valueOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Block :: T_Annotation  ->
                       (Maybe String) ->
                       T_VarDefList  ->
                       T_StatementList  ->
                       T_Statement 
sem_Statement_Block ann_ lb_ vars_ sts_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _varsOcat :: Catalog
              _varsOflags :: TypeCheckingFlags
              _varsOimCast :: (Maybe Type)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _varsIannotatedTree :: VarDefList 
              _varsIoriginalTree :: VarDefList 
              _stsIannotatedTree :: StatementList 
              _stsIoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Block _annIannotatedTree lb_ _varsIannotatedTree _stsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 14795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14705 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Block _annIoriginalTree lb_ _varsIoriginalTree _stsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 14801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14711 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 14807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14717 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 14813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14723 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.Block.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 14837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _varsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _varsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _varsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14855 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14765 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14861 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14771 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14777 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14783 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _varsIannotatedTree,_varsIoriginalTree) =
                  vars_ _varsOcat _varsOflags _varsOimCast 
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CaseStatement :: T_Annotation  ->
                               T_ScalarExprListStatementListPairList  ->
                               T_StatementList  ->
                               T_Statement 
sem_Statement_CaseStatement ann_ cases_ els_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _casesOcat :: Catalog
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe Type)
              _elsOcat :: Catalog
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _casesIannotatedTree :: ScalarExprListStatementListPairList 
              _casesIoriginalTree :: ScalarExprListStatementListPairList 
              _elsIannotatedTree :: StatementList 
              _elsIoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatement _annIannotatedTree _casesIannotatedTree _elsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 14912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14822 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatement _annIoriginalTree _casesIoriginalTree _elsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 14918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14828 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 14924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14834 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 14930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14840 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14936 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14846 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14852 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14858 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CaseStatement.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 14954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14864 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14870 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14876 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14882 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 14978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14888 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 14984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14894 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 14990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14900 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _casesIannotatedTree,_casesIoriginalTree) =
                  cases_ _casesOcat _casesOflags _casesOimCast 
              ( _elsIannotatedTree,_elsIoriginalTree) =
                  els_ _elsOcat _elsOflags _elsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CaseStatementSimple :: T_Annotation  ->
                                     T_ScalarExpr  ->
                                     T_ScalarExprListStatementListPairList  ->
                                     T_StatementList  ->
                                     T_Statement 
sem_Statement_CaseStatementSimple ann_ val_ cases_ els_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _valOcat :: Catalog
              _valOdownEnv :: Environment
              _valOexpectedType :: (Maybe Type)
              _valOflags :: TypeCheckingFlags
              _valOimCast :: (Maybe Type)
              _casesOcat :: Catalog
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe Type)
              _elsOcat :: Catalog
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _valIannotatedTree :: ScalarExpr 
              _valIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _valIoriginalTree :: ScalarExpr 
              _valIupType :: (Maybe Type)
              _casesIannotatedTree :: ScalarExprListStatementListPairList 
              _casesIoriginalTree :: ScalarExprListStatementListPairList 
              _elsIannotatedTree :: StatementList 
              _elsIoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatementSimple _annIannotatedTree _valIannotatedTree _casesIannotatedTree _elsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 15039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatementSimple _annIoriginalTree _valIoriginalTree _casesIoriginalTree _elsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 15045 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 15051 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 15057 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15063 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15069 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14979 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15075 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14985 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CaseStatementSimple.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 15081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 14997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _valOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.CaseStatementSimple.val.downEnv"
<<<<<<< HEAD
                   {-# LINE 15093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _valOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.CaseStatementSimple.val.expectedType"
<<<<<<< HEAD
                   {-# LINE 15099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15105 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15021 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15033 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15045 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15051 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15147 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15057 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _valIannotatedTree,_valIcolExprs,_valIoriginalTree,_valIupType) =
                  val_ _valOcat _valOdownEnv _valOexpectedType _valOflags _valOimCast 
              ( _casesIannotatedTree,_casesIoriginalTree) =
                  cases_ _casesOcat _casesOflags _casesOimCast 
              ( _elsIannotatedTree,_elsIoriginalTree) =
                  els_ _elsOcat _elsOflags _elsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_ContinueStatement :: T_Annotation  ->
                                   (Maybe String) ->
                                   T_Statement 
sem_Statement_ContinueStatement ann_ lb_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ContinueStatement _annIannotatedTree lb_
<<<<<<< HEAD
                   {-# LINE 15177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ContinueStatement _annIoriginalTree lb_
<<<<<<< HEAD
                   {-# LINE 15183 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 15189 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 15195 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15105 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15201 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15207 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15213 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.ContinueStatement.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 15219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CopyData :: T_Annotation  ->
                          String ->
                          T_Statement 
sem_Statement_CopyData ann_ insData_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyData _annIannotatedTree insData_
<<<<<<< HEAD
                   {-# LINE 15243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15153 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyData _annIoriginalTree insData_
<<<<<<< HEAD
                   {-# LINE 15249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15159 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 15255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15165 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 15261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15183 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15189 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CopyData.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 15285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15195 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CopyFrom :: T_Annotation  ->
                          T_Name  ->
                          ([NameComponent]) ->
                          CopyFromSource ->
                          ([CopyOption]) ->
                          T_Statement 
sem_Statement_CopyFrom ann_ table_ targetCols_ source_ opts_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe Type)
              _tableOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tableIannotatedTree :: Name 
              _tableIoriginalTree :: Name 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 15318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyFrom _annIannotatedTree _tableIannotatedTree targetCols_ source_ opts_
<<<<<<< HEAD
                   {-# LINE 15324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyFrom _annIoriginalTree _tableIoriginalTree targetCols_ source_ opts_
<<<<<<< HEAD
                   {-# LINE 15330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 15336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 15342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _tableOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CopyFrom.table.tpe"
<<<<<<< HEAD
                   {-# LINE 15384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CopyTo :: T_Annotation  ->
                        CopyToSource ->
                        String ->
                        ([CopyOption]) ->
                        T_Statement 
sem_Statement_CopyTo ann_ cp_ fn_ opts_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 15412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15322 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyTo _annIannotatedTree cp_ fn_ opts_
<<<<<<< HEAD
                   {-# LINE 15418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15328 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyTo _annIoriginalTree cp_ fn_ opts_
<<<<<<< HEAD
                   {-# LINE 15424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 15430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 15436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15454 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateDatabase :: T_Annotation  ->
                                T_Name  ->
                                T_Statement 
sem_Statement_CreateDatabase ann_ nm_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nmOcat :: Catalog
              _nmOflags :: TypeCheckingFlags
              _nmOimCast :: (Maybe Type)
              _nmOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nmIannotatedTree :: Name 
              _nmIoriginalTree :: Name 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDatabase _annIannotatedTree _nmIannotatedTree
<<<<<<< HEAD
                   {-# LINE 15484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDatabase _annIoriginalTree _nmIoriginalTree
<<<<<<< HEAD
                   {-# LINE 15490 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 15496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 15502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateDatabase.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 15526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nmOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nmOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nmOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15454 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nmOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateDatabase.nm.tpe"
<<<<<<< HEAD
                   {-# LINE 15550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15460 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nmIannotatedTree,_nmIoriginalTree) =
                  nm_ _nmOcat _nmOflags _nmOimCast _nmOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateDomain :: T_Annotation  ->
                              T_Name  ->
                              T_TypeName  ->
                              String ->
                              T_MaybeBoolExpr  ->
                              T_Statement 
sem_Statement_CreateDomain ann_ name_ typ_ constraintName_ check_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe Type)
              _nameOtpe :: (Either [TypeError] Type)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe Type)
              _checkOcat :: Catalog
              _checkOdownEnv :: Environment
              _checkOflags :: TypeCheckingFlags
              _checkOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nameIannotatedTree :: Name 
              _nameIoriginalTree :: Name 
              _typIannotatedTree :: TypeName 
              _typInamedType :: (Maybe Type)
              _typIoriginalTree :: TypeName 
              _checkIannotatedTree :: MaybeBoolExpr 
              _checkIoriginalTree :: MaybeBoolExpr 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDomain _annIannotatedTree _nameIannotatedTree _typIannotatedTree constraintName_ _checkIannotatedTree
<<<<<<< HEAD
                   {-# LINE 15597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDomain _annIoriginalTree _nameIoriginalTree _typIoriginalTree constraintName_ _checkIoriginalTree
<<<<<<< HEAD
                   {-# LINE 15603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 15609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 15615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15621 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateDomain.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 15639 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateDomain.name.tpe"
<<<<<<< HEAD
                   {-# LINE 15663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _checkOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _checkOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   error "missing rule: Statement.CreateDomain.check.downEnv"
<<<<<<< HEAD
                   {-# LINE 15693 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _checkOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15699 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _checkOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15705 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe 
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast 
              ( _checkIannotatedTree,_checkIoriginalTree) =
                  check_ _checkOcat _checkOdownEnv _checkOflags _checkOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateFunction :: T_Annotation  ->
                                T_Name  ->
                                T_ParamDefList  ->
                                T_TypeName  ->
                                Replace ->
                                Language ->
                                T_FnBody  ->
                                Volatility ->
                                T_Statement 
sem_Statement_CreateFunction ann_ name_ params_ rettype_ rep_ lang_ body_ vol_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe Type)
              _nameOtpe :: (Either [TypeError] Type)
              _paramsOcat :: Catalog
              _paramsOflags :: TypeCheckingFlags
              _paramsOimCast :: (Maybe Type)
              _rettypeOcat :: Catalog
              _rettypeOflags :: TypeCheckingFlags
              _rettypeOimCast :: (Maybe Type)
              _bodyOcat :: Catalog
              _bodyOflags :: TypeCheckingFlags
              _bodyOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nameIannotatedTree :: Name 
              _nameIoriginalTree :: Name 
              _paramsIannotatedTree :: ParamDefList 
              _paramsIoriginalTree :: ParamDefList 
              _rettypeIannotatedTree :: TypeName 
              _rettypeInamedType :: (Maybe Type)
              _rettypeIoriginalTree :: TypeName 
              _bodyIannotatedTree :: FnBody 
              _bodyIoriginalTree :: FnBody 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateFunction _annIannotatedTree _nameIannotatedTree _paramsIannotatedTree _rettypeIannotatedTree rep_ lang_ _bodyIannotatedTree vol_
<<<<<<< HEAD
                   {-# LINE 15763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15673 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateFunction _annIoriginalTree _nameIoriginalTree _paramsIoriginalTree _rettypeIoriginalTree rep_ lang_ _bodyIoriginalTree vol_
<<<<<<< HEAD
                   {-# LINE 15769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 15775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 15781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateFunction.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 15805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateFunction.name.tpe"
<<<<<<< HEAD
                   {-# LINE 15829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _paramsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _paramsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _paramsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _rettypeOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _rettypeOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _rettypeOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _bodyOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _bodyOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _bodyOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe 
              ( _paramsIannotatedTree,_paramsIoriginalTree) =
                  params_ _paramsOcat _paramsOflags _paramsOimCast 
              ( _rettypeIannotatedTree,_rettypeInamedType,_rettypeIoriginalTree) =
                  rettype_ _rettypeOcat _rettypeOflags _rettypeOimCast 
              ( _bodyIannotatedTree,_bodyIoriginalTree) =
                  body_ _bodyOcat _bodyOflags _bodyOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateIndexTSQL :: T_Annotation  ->
                                 NameComponent ->
                                 T_Name  ->
                                 ([NameComponent]) ->
                                 T_Statement 
sem_Statement_CreateIndexTSQL ann_ nm_ obj_ cols_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _objOcat :: Catalog
              _objOflags :: TypeCheckingFlags
              _objOimCast :: (Maybe Type)
              _objOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _objIannotatedTree :: Name 
              _objIoriginalTree :: Name 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 15923 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateIndexTSQL _annIannotatedTree nm_ _objIannotatedTree cols_
<<<<<<< HEAD
                   {-# LINE 15929 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateIndexTSQL _annIoriginalTree nm_ _objIoriginalTree cols_
<<<<<<< HEAD
                   {-# LINE 15935 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 15941 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 15947 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15863 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _objOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 15971 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _objOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 15977 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _objOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 15983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _objOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateIndexTSQL.obj.tpe"
<<<<<<< HEAD
                   {-# LINE 15989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15899 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _objIannotatedTree,_objIoriginalTree) =
                  obj_ _objOcat _objOflags _objOimCast _objOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateLanguage :: T_Annotation  ->
                                String ->
                                T_Statement 
sem_Statement_CreateLanguage ann_ name_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLanguage _annIannotatedTree name_
<<<<<<< HEAD
                   {-# LINE 16015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLanguage _annIoriginalTree name_
<<<<<<< HEAD
                   {-# LINE 16021 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 16027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15937 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 16033 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16045 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16051 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateLanguage.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 16057 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 15967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateSequence :: T_Annotation  ->
                                T_Name  ->
                                Integer ->
                                Integer ->
                                Integer ->
                                Integer ->
                                Integer ->
                                T_Statement 
sem_Statement_CreateSequence ann_ name_ incr_ min_ max_ start_ cache_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe Type)
              _nameOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nameIannotatedTree :: Name 
              _nameIoriginalTree :: Name 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSequence _annIannotatedTree _nameIannotatedTree incr_ min_ max_ start_ cache_
<<<<<<< HEAD
                   {-# LINE 16092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSequence _annIoriginalTree _nameIoriginalTree incr_ min_ max_ start_ cache_
<<<<<<< HEAD
                   {-# LINE 16098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 16104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 16110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16128 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateSequence.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 16134 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16140 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateSequence.name.tpe"
<<<<<<< HEAD
                   {-# LINE 16158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateTable :: T_Annotation  ->
                             T_Name  ->
                             T_AttributeDefList  ->
                             T_ConstraintList  ->
                             T_Statement 
sem_Statement_CreateTable ann_ name_ atts_ cons_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe Type)
              _nameOtpe :: (Either [TypeError] Type)
              _attsOcat :: Catalog
              _attsOflags :: TypeCheckingFlags
              _attsOimCast :: (Maybe Type)
              _consOcat :: Catalog
              _consOflags :: TypeCheckingFlags
              _consOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nameIannotatedTree :: Name 
              _nameIoriginalTree :: Name 
              _attsIannotatedTree :: AttributeDefList 
              _attsIoriginalTree :: AttributeDefList 
              _consIannotatedTree :: ConstraintList 
              _consIoriginalTree :: ConstraintList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTable _annIannotatedTree _nameIannotatedTree _attsIannotatedTree _consIannotatedTree
<<<<<<< HEAD
                   {-# LINE 16202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTable _annIoriginalTree _nameIoriginalTree _attsIoriginalTree _consIoriginalTree
<<<<<<< HEAD
                   {-# LINE 16208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 16214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 16220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateTable.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 16244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16250 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16256 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16262 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateTable.name.tpe"
<<<<<<< HEAD
                   {-# LINE 16268 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _attsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16274 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _attsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16280 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _attsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16286 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _consOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16292 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _consOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16298 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _consOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe 
              ( _attsIannotatedTree,_attsIoriginalTree) =
                  atts_ _attsOcat _attsOflags _attsOimCast 
              ( _consIannotatedTree,_consIoriginalTree) =
                  cons_ _consOcat _consOflags _consOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateTableAs :: T_Annotation  ->
                               T_Name  ->
                               T_QueryExpr  ->
                               T_Statement 
sem_Statement_CreateTableAs ann_ name_ expr_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe Type)
              _nameOtpe :: (Either [TypeError] Type)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _exprOouterDownEnv :: (Maybe Environment)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nameIannotatedTree :: Name 
              _nameIoriginalTree :: Name 
              _exprIannotatedTree :: QueryExpr 
              _exprIoriginalTree :: QueryExpr 
              _exprIupType :: (Maybe [(Text,Type)])
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTableAs _annIannotatedTree _nameIannotatedTree _exprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 16348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTableAs _annIoriginalTree _nameIoriginalTree _exprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 16354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 16360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 16366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateTableAs.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 16390 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateTableAs.name.tpe"
<<<<<<< HEAD
                   {-# LINE 16414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOouterDownEnv =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   error "missing rule: Statement.CreateTableAs.expr.outerDownEnv"
<<<<<<< HEAD
                   {-# LINE 16438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe 
              ( _exprIannotatedTree,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOflags _exprOimCast _exprOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateTrigger :: T_Annotation  ->
                               NameComponent ->
                               TriggerWhen ->
                               ([TriggerEvent]) ->
                               T_Name  ->
                               TriggerFire ->
                               T_Name  ->
                               T_ScalarExprList  ->
                               T_Statement 
sem_Statement_CreateTrigger ann_ name_ wh_ events_ tbl_ firing_ fnName_ fnArgs_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _tblOcat :: Catalog
              _tblOflags :: TypeCheckingFlags
              _tblOimCast :: (Maybe Type)
              _tblOtpe :: (Either [TypeError] Type)
              _fnNameOcat :: Catalog
              _fnNameOflags :: TypeCheckingFlags
              _fnNameOimCast :: (Maybe Type)
              _fnNameOtpe :: (Either [TypeError] Type)
              _fnArgsOcat :: Catalog
              _fnArgsOdownEnv :: Environment
              _fnArgsOexpectedTypes :: ([Type])
              _fnArgsOflags :: TypeCheckingFlags
              _fnArgsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tblIannotatedTree :: Name 
              _tblIoriginalTree :: Name 
              _fnNameIannotatedTree :: Name 
              _fnNameIoriginalTree :: Name 
              _fnArgsIannotatedTree :: ScalarExprList 
              _fnArgsIoriginalTree :: ScalarExprList 
              _fnArgsIupTypes :: ([Maybe Type])
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTrigger _annIannotatedTree name_ wh_ events_ _tblIannotatedTree firing_ _fnNameIannotatedTree _fnArgsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 16492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTrigger _annIoriginalTree name_ wh_ events_ _tblIoriginalTree firing_ _fnNameIoriginalTree _fnArgsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 16498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 16504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 16510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateTrigger.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 16534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tblOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tblOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tblOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16462 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _tblOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateTrigger.tbl.tpe"
<<<<<<< HEAD
                   {-# LINE 16558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnNameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnNameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnNameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _fnNameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateTrigger.fnName.tpe"
<<<<<<< HEAD
                   {-# LINE 16582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnArgsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _fnArgsOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.CreateTrigger.fnArgs.downEnv"
<<<<<<< HEAD
                   {-# LINE 16594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _fnArgsOexpectedTypes =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.CreateTrigger.fnArgs.expectedTypes"
<<<<<<< HEAD
                   {-# LINE 16600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnArgsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnArgsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16612 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tblIannotatedTree,_tblIoriginalTree) =
                  tbl_ _tblOcat _tblOflags _tblOimCast _tblOtpe 
              ( _fnNameIannotatedTree,_fnNameIoriginalTree) =
                  fnName_ _fnNameOcat _fnNameOflags _fnNameOimCast _fnNameOtpe 
              ( _fnArgsIannotatedTree,_fnArgsIoriginalTree,_fnArgsIupTypes) =
                  fnArgs_ _fnArgsOcat _fnArgsOdownEnv _fnArgsOexpectedTypes _fnArgsOflags _fnArgsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateType :: T_Annotation  ->
                            T_Name  ->
                            T_TypeAttributeDefList  ->
                            T_Statement 
sem_Statement_CreateType ann_ name_ atts_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe Type)
              _nameOtpe :: (Either [TypeError] Type)
              _attsOcat :: Catalog
              _attsOflags :: TypeCheckingFlags
              _attsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nameIannotatedTree :: Name 
              _nameIoriginalTree :: Name 
              _attsIannotatedTree :: TypeAttributeDefList 
              _attsIoriginalTree :: TypeAttributeDefList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateType _annIannotatedTree _nameIannotatedTree _attsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 16654 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateType _annIoriginalTree _nameIoriginalTree _attsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 16660 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 16666 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 16672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateType.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 16696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16612 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16618 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16624 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateType.name.tpe"
<<<<<<< HEAD
                   {-# LINE 16720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16630 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _attsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16636 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _attsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _attsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16738 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16648 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe 
              ( _attsIannotatedTree,_attsIoriginalTree) =
                  atts_ _attsOcat _attsOflags _attsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_CreateView :: T_Annotation  ->
                            T_Name  ->
                            MaybeNameComponentList ->
                            T_QueryExpr  ->
                            T_Statement 
sem_Statement_CreateView ann_ name_ colNames_ expr_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe Type)
              _nameOtpe :: (Either [TypeError] Type)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _exprOouterDownEnv :: (Maybe Environment)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _nameIannotatedTree :: Name 
              _nameIoriginalTree :: Name 
              _exprIannotatedTree :: QueryExpr 
              _exprIoriginalTree :: QueryExpr 
              _exprIupType :: (Maybe [(Text,Type)])
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateView _annIannotatedTree _nameIannotatedTree colNames_ _exprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 16781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateView _annIoriginalTree _nameIoriginalTree colNames_ _exprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 16787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 16793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 16799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.CreateView.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 16823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateView.name.tpe"
<<<<<<< HEAD
                   {-# LINE 16847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOouterDownEnv =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   error "missing rule: Statement.CreateView.expr.outerDownEnv"
<<<<<<< HEAD
                   {-# LINE 16871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe 
              ( _exprIannotatedTree,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOflags _exprOimCast _exprOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_DeclareStatement :: T_Annotation  ->
                                  ([(String,TypeName,Maybe ScalarExpr)]) ->
                                  T_Statement 
sem_Statement_DeclareStatement ann_ ds_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 16899 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DeclareStatement _annIannotatedTree ds_
<<<<<<< HEAD
                   {-# LINE 16905 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16815 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DeclareStatement _annIoriginalTree ds_
<<<<<<< HEAD
                   {-# LINE 16911 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16821 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 16917 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16827 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 16923 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 16929 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 16935 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 16941 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Delete :: T_Annotation  ->
                        T_Name  ->
                        T_TableRefList  ->
                        T_MaybeBoolExpr  ->
                        T_MaybeSelectList  ->
                        T_Statement 
sem_Statement_Delete ann_ table_ using_ whr_ returning_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe Type)
              _tableOtpe :: (Either [TypeError] Type)
              _usingOcat :: Catalog
              _usingOflags :: TypeCheckingFlags
              _usingOimCast :: (Maybe Type)
              _whrOcat :: Catalog
              _whrOdownEnv :: Environment
              _whrOflags :: TypeCheckingFlags
              _whrOimCast :: (Maybe Type)
              _returningOcat :: Catalog
              _returningOflags :: TypeCheckingFlags
              _returningOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tableIannotatedTree :: Name 
              _tableIoriginalTree :: Name 
              _usingIannotatedTree :: TableRefList 
              _usingIoriginalTree :: TableRefList 
              _usingIupEnv :: Environment
              _whrIannotatedTree :: MaybeBoolExpr 
              _whrIoriginalTree :: MaybeBoolExpr 
              _returningIannotatedTree :: MaybeSelectList 
              _returningIoriginalTree :: MaybeSelectList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 16991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16901 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Delete _annIannotatedTree _tableIannotatedTree _usingIannotatedTree _whrIannotatedTree _returningIannotatedTree
<<<<<<< HEAD
                   {-# LINE 16997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16907 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Delete _annIoriginalTree _tableIoriginalTree _usingIoriginalTree _whrIoriginalTree _returningIoriginalTree
<<<<<<< HEAD
                   {-# LINE 17003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16913 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 17009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 17015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17021 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16937 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17033 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17045 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17051 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _tableOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.Delete.table.tpe"
<<<<<<< HEAD
                   {-# LINE 17057 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _usingOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17063 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _usingOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17069 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16979 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _usingOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17075 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16985 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _whrOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _whrOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   error "missing rule: Statement.Delete.whr.downEnv"
<<<<<<< HEAD
                   {-# LINE 17087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 16997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _whrOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _whrOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _returningOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17105 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _returningOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17021 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _returningOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe 
              ( _usingIannotatedTree,_usingIoriginalTree,_usingIupEnv) =
                  using_ _usingOcat _usingOflags _usingOimCast 
              ( _whrIannotatedTree,_whrIoriginalTree) =
                  whr_ _whrOcat _whrOdownEnv _whrOflags _whrOimCast 
              ( _returningIannotatedTree,_returningIoriginalTree) =
                  returning_ _returningOcat _returningOflags _returningOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_DropFunction :: T_Annotation  ->
                              IfExists ->
                              T_NameTypeNameListPairList  ->
                              Cascade ->
                              T_Statement 
sem_Statement_DropFunction ann_ ifE_ sigs_ cascade_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _sigsOcat :: Catalog
              _sigsOflags :: TypeCheckingFlags
              _sigsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _sigsIannotatedTree :: NameTypeNameListPairList 
              _sigsIoriginalTree :: NameTypeNameListPairList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropFunction _annIannotatedTree ifE_ _sigsIannotatedTree cascade_
<<<<<<< HEAD
                   {-# LINE 17156 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17066 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropFunction _annIoriginalTree ifE_ _sigsIoriginalTree cascade_
<<<<<<< HEAD
                   {-# LINE 17162 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17072 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 17168 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17078 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 17174 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17084 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17180 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17090 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17186 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17096 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17102 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.DropFunction.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 17198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17108 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _sigsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17114 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _sigsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17120 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _sigsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17126 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _sigsIannotatedTree,_sigsIoriginalTree) =
                  sigs_ _sigsOcat _sigsOflags _sigsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_DropSomething :: T_Annotation  ->
                               DropType ->
                               IfExists ->
                               ([Name]) ->
                               Cascade ->
                               T_Statement 
sem_Statement_DropSomething ann_ dropType_ ifE_ names_ cascade_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 17245 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17155 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropSomething _annIannotatedTree dropType_ ifE_ names_ cascade_
<<<<<<< HEAD
                   {-# LINE 17251 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17161 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropSomething _annIoriginalTree dropType_ ifE_ names_ cascade_
<<<<<<< HEAD
                   {-# LINE 17257 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17167 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 17263 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17173 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 17269 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17179 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17275 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17185 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17281 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17191 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17287 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_DropTrigger :: T_Annotation  ->
                             IfExists ->
                             NameComponent ->
                             T_Name  ->
                             Cascade ->
                             T_Statement 
sem_Statement_DropTrigger ann_ ifE_ name_ tbl_ cascade_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tblOcat :: Catalog
              _tblOflags :: TypeCheckingFlags
              _tblOimCast :: (Maybe Type)
              _tblOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tblIannotatedTree :: Name 
              _tblIoriginalTree :: Name 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 17320 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropTrigger _annIannotatedTree ifE_ name_ _tblIannotatedTree cascade_
<<<<<<< HEAD
                   {-# LINE 17326 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropTrigger _annIoriginalTree ifE_ name_ _tblIoriginalTree cascade_
<<<<<<< HEAD
                   {-# LINE 17332 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 17338 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 17344 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17254 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17350 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17356 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17362 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tblOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tblOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17374 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17284 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tblOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17380 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _tblOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.DropTrigger.tbl.tpe"
<<<<<<< HEAD
                   {-# LINE 17386 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tblIannotatedTree,_tblIoriginalTree) =
                  tbl_ _tblOcat _tblOflags _tblOimCast _tblOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_ExecStatement :: T_Annotation  ->
                               T_Name  ->
                               T_ScalarExprList  ->
                               T_Statement 
sem_Statement_ExecStatement ann_ spName_ args_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _spNameOcat :: Catalog
              _spNameOflags :: TypeCheckingFlags
              _spNameOimCast :: (Maybe Type)
              _spNameOtpe :: (Either [TypeError] Type)
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOexpectedTypes :: ([Type])
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _spNameIannotatedTree :: Name 
              _spNameIoriginalTree :: Name 
              _argsIannotatedTree :: ScalarExprList 
              _argsIoriginalTree :: ScalarExprList 
              _argsIupTypes :: ([Maybe Type])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 17427 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExecStatement _annIannotatedTree _spNameIannotatedTree _argsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 17433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17343 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExecStatement _annIoriginalTree _spNameIoriginalTree _argsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 17439 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17349 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 17445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17355 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 17451 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17361 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17367 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17463 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17373 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17379 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _spNameOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17385 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _spNameOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17481 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17391 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _spNameOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17397 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _spNameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.ExecStatement.spName.tpe"
<<<<<<< HEAD
                   {-# LINE 17493 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17403 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17409 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _argsOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.ExecStatement.args.downEnv"
<<<<<<< HEAD
                   {-# LINE 17505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17415 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _argsOexpectedTypes =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.ExecStatement.args.expectedTypes"
<<<<<<< HEAD
                   {-# LINE 17511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17421 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17427 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17523 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _spNameIannotatedTree,_spNameIoriginalTree) =
                  spName_ _spNameOcat _spNameOflags _spNameOimCast _spNameOtpe 
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOcat _argsOdownEnv _argsOexpectedTypes _argsOflags _argsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Execute :: T_Annotation  ->
                         T_ScalarExpr  ->
                         T_Statement 
sem_Statement_Execute ann_ expr_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedType :: (Maybe Type)
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Execute _annIannotatedTree _exprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 17560 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17470 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Execute _annIoriginalTree _exprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 17566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 17572 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17482 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 17578 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17584 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17590 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17596 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.Execute.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 17602 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17512 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17608 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17518 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.Execute.expr.downEnv"
<<<<<<< HEAD
                   {-# LINE 17614 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17524 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.Execute.expr.expectedType"
<<<<<<< HEAD
                   {-# LINE 17620 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17530 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17626 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17536 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17632 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17542 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_ExitStatement :: T_Annotation  ->
                               (Maybe String) ->
                               T_Statement 
sem_Statement_ExitStatement ann_ lb_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExitStatement _annIannotatedTree lb_
<<<<<<< HEAD
                   {-# LINE 17658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExitStatement _annIoriginalTree lb_
<<<<<<< HEAD
                   {-# LINE 17664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 17670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 17676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.ExitStatement.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 17700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_ForIntegerStatement :: T_Annotation  ->
                                     (Maybe String) ->
                                     NameComponent ->
                                     T_ScalarExpr  ->
                                     T_ScalarExpr  ->
                                     T_StatementList  ->
                                     T_Statement 
sem_Statement_ForIntegerStatement ann_ lb_ var_ from_ to_ sts_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _fromOcat :: Catalog
              _fromOdownEnv :: Environment
              _fromOexpectedType :: (Maybe Type)
              _fromOflags :: TypeCheckingFlags
              _fromOimCast :: (Maybe Type)
              _toOcat :: Catalog
              _toOdownEnv :: Environment
              _toOexpectedType :: (Maybe Type)
              _toOflags :: TypeCheckingFlags
              _toOimCast :: (Maybe Type)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _fromIannotatedTree :: ScalarExpr 
              _fromIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _fromIoriginalTree :: ScalarExpr 
              _fromIupType :: (Maybe Type)
              _toIannotatedTree :: ScalarExpr 
              _toIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _toIoriginalTree :: ScalarExpr 
              _toIupType :: (Maybe Type)
              _stsIannotatedTree :: StatementList 
              _stsIoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForIntegerStatement _annIannotatedTree lb_ var_ _fromIannotatedTree _toIannotatedTree _stsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 17751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17661 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForIntegerStatement _annIoriginalTree lb_ var_ _fromIoriginalTree _toIoriginalTree _stsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 17757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17667 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 17763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17673 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 17769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.ForIntegerStatement.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 17793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fromOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _fromOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.ForIntegerStatement.from.downEnv"
<<<<<<< HEAD
                   {-# LINE 17805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _fromOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.ForIntegerStatement.from.expectedType"
<<<<<<< HEAD
                   {-# LINE 17811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fromOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fromOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _toOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _toOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.ForIntegerStatement.to.downEnv"
<<<<<<< HEAD
                   {-# LINE 17835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _toOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.ForIntegerStatement.to.expectedType"
<<<<<<< HEAD
                   {-# LINE 17841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _toOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _toOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _fromIannotatedTree,_fromIcolExprs,_fromIoriginalTree,_fromIupType) =
                  from_ _fromOcat _fromOdownEnv _fromOexpectedType _fromOflags _fromOimCast 
              ( _toIannotatedTree,_toIcolExprs,_toIoriginalTree,_toIupType) =
                  to_ _toOcat _toOdownEnv _toOexpectedType _toOflags _toOimCast 
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_ForQueryStatement :: T_Annotation  ->
                                   (Maybe String) ->
                                   NameComponent ->
                                   T_QueryExpr  ->
                                   T_StatementList  ->
                                   T_Statement 
sem_Statement_ForQueryStatement ann_ lb_ var_ sel_ sts_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe Type)
              _selOouterDownEnv :: (Maybe Environment)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _selIannotatedTree :: QueryExpr 
              _selIoriginalTree :: QueryExpr 
              _selIupType :: (Maybe [(Text,Type)])
              _stsIannotatedTree :: StatementList 
              _stsIoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForQueryStatement _annIannotatedTree lb_ var_ _selIannotatedTree _stsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 17916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForQueryStatement _annIoriginalTree lb_ var_ _selIoriginalTree _stsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 17922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 17928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 17934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17844 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17940 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17850 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17946 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17856 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17952 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17862 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.ForQueryStatement.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 17958 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17964 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17970 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 17976 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _selOouterDownEnv =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   error "missing rule: Statement.ForQueryStatement.sel.outerDownEnv"
<<<<<<< HEAD
                   {-# LINE 17982 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 17988 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 17994 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOcat _selOflags _selOimCast _selOouterDownEnv 
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_If :: T_Annotation  ->
                    T_ScalarExprStatementListPairList  ->
                    T_StatementList  ->
                    T_Statement 
sem_Statement_If ann_ cases_ els_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _casesOcat :: Catalog
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe Type)
              _elsOcat :: Catalog
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _casesIannotatedTree :: ScalarExprStatementListPairList 
              _casesIoriginalTree :: ScalarExprStatementListPairList 
              _elsIannotatedTree :: StatementList 
              _elsIoriginalTree :: StatementList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 18039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   If _annIannotatedTree _casesIannotatedTree _elsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 18045 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   If _annIoriginalTree _casesIoriginalTree _elsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 18051 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18057 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18063 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18069 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17979 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18075 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17985 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 17997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18105 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18021 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _casesIannotatedTree,_casesIoriginalTree) =
                  cases_ _casesOcat _casesOflags _casesOimCast 
              ( _elsIannotatedTree,_elsIoriginalTree) =
                  els_ _elsOcat _elsOflags _elsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Insert :: T_Annotation  ->
                        T_Name  ->
                        ([NameComponent]) ->
                        T_QueryExpr  ->
                        T_MaybeSelectList  ->
                        T_Statement 
sem_Statement_Insert ann_ table_ targetCols_ insData_ returning_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe Type)
              _tableOtpe :: (Either [TypeError] Type)
              _insDataOcat :: Catalog
              _insDataOflags :: TypeCheckingFlags
              _insDataOimCast :: (Maybe Type)
              _insDataOouterDownEnv :: (Maybe Environment)
              _returningOcat :: Catalog
              _returningOflags :: TypeCheckingFlags
              _returningOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tableIannotatedTree :: Name 
              _tableIoriginalTree :: Name 
              _insDataIannotatedTree :: QueryExpr 
              _insDataIoriginalTree :: QueryExpr 
              _insDataIupType :: (Maybe [(Text,Type)])
              _returningIannotatedTree :: MaybeSelectList 
              _returningIoriginalTree :: MaybeSelectList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 18166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18076 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Insert _annIannotatedTree _tableIannotatedTree targetCols_ _insDataIannotatedTree _returningIannotatedTree
<<<<<<< HEAD
                   {-# LINE 18172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Insert _annIoriginalTree _tableIoriginalTree targetCols_ _insDataIoriginalTree _returningIoriginalTree
<<<<<<< HEAD
                   {-# LINE 18178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _tableOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.Insert.table.tpe"
<<<<<<< HEAD
                   {-# LINE 18232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _insDataOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _insDataOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _insDataOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18250 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _insDataOouterDownEnv =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   error "missing rule: Statement.Insert.insData.outerDownEnv"
<<<<<<< HEAD
                   {-# LINE 18256 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _returningOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18262 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _returningOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18268 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _returningOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18274 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe 
              ( _insDataIannotatedTree,_insDataIoriginalTree,_insDataIupType) =
                  insData_ _insDataOcat _insDataOflags _insDataOimCast _insDataOouterDownEnv 
              ( _returningIannotatedTree,_returningIoriginalTree) =
                  returning_ _returningOcat _returningOflags _returningOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Into :: T_Annotation  ->
                      Bool ->
                      ([Name]) ->
                      T_Statement  ->
                      T_Statement 
sem_Statement_Into ann_ strict_ into_ stmt_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _stmtOcat :: Catalog
              _stmtOflags :: TypeCheckingFlags
              _stmtOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _stmtIannotatedTree :: Statement 
              _stmtIoriginalTree :: Statement 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 18311 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18221 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Into _annIannotatedTree strict_ into_ _stmtIannotatedTree
<<<<<<< HEAD
                   {-# LINE 18317 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18227 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Into _annIoriginalTree strict_ into_ _stmtIoriginalTree
<<<<<<< HEAD
                   {-# LINE 18323 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18233 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18329 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18239 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18335 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18245 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18341 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18251 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18347 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18257 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18263 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stmtOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18269 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stmtOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18275 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stmtOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18281 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _stmtIannotatedTree,_stmtIoriginalTree) =
                  stmt_ _stmtOcat _stmtOflags _stmtOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_LoopStatement :: T_Annotation  ->
                               (Maybe String) ->
                               T_StatementList  ->
                               T_Statement 
sem_Statement_LoopStatement ann_ lb_ sts_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _stsIannotatedTree :: StatementList 
              _stsIoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LoopStatement _annIannotatedTree lb_ _stsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 18403 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LoopStatement _annIoriginalTree lb_ _stsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 18409 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18415 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18421 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18427 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18343 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18439 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18349 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.LoopStatement.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 18445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18355 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18451 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18361 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18367 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18463 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18373 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Notify :: T_Annotation  ->
                        String ->
                        T_Statement 
sem_Statement_Notify ann_ name_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Notify _annIannotatedTree name_
<<<<<<< HEAD
                   {-# LINE 18489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Notify _annIoriginalTree name_
<<<<<<< HEAD
                   {-# LINE 18495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18423 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18429 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18435 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.Notify.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 18531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18441 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_NullStatement :: T_Annotation  ->
                               T_Statement 
sem_Statement_NullStatement ann_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullStatement _annIannotatedTree
<<<<<<< HEAD
                   {-# LINE 18554 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18464 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullStatement _annIoriginalTree
<<<<<<< HEAD
                   {-# LINE 18560 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18470 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18572 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18482 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18578 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18584 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18590 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.NullStatement.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 18596 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Perform :: T_Annotation  ->
                         T_ScalarExpr  ->
                         T_Statement 
sem_Statement_Perform ann_ expr_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedType :: (Maybe Type)
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Perform _annIannotatedTree _exprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 18629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18539 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Perform _annIoriginalTree _exprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 18635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18545 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18641 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18551 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18647 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18557 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18653 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18563 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18659 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18569 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18665 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.Perform.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 18671 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18677 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.Perform.expr.downEnv"
<<<<<<< HEAD
                   {-# LINE 18683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.Perform.expr.expectedType"
<<<<<<< HEAD
                   {-# LINE 18689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18599 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_QueryStatement :: T_Annotation  ->
                                T_QueryExpr  ->
                                T_Statement 
sem_Statement_QueryStatement ann_ ex_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _exOouterDownEnv :: (Maybe Environment)
              _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _exOcat :: Catalog
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exIannotatedTree :: QueryExpr 
              _exIoriginalTree :: QueryExpr 
              _exIupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 24, column 20)
              _exOouterDownEnv =
                  ({-# LINE 24 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 18734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18644 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 18740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18650 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QueryStatement _annIannotatedTree _exIannotatedTree
<<<<<<< HEAD
                   {-# LINE 18746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18656 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QueryStatement _annIoriginalTree _exIoriginalTree
<<<<<<< HEAD
                   {-# LINE 18752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18662 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18668 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18674 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exIannotatedTree,_exIoriginalTree,_exIupType) =
                  ex_ _exOcat _exOflags _exOimCast _exOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Raise :: T_Annotation  ->
                       RaiseType ->
                       String ->
                       T_ScalarExprList  ->
                       T_Statement 
sem_Statement_Raise ann_ level_ message_ args_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOexpectedTypes :: ([Type])
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _argsIannotatedTree :: ScalarExprList 
              _argsIoriginalTree :: ScalarExprList 
              _argsIupTypes :: ([Maybe Type])
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Raise _annIannotatedTree level_ message_ _argsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 18836 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Raise _annIoriginalTree level_ message_ _argsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 18842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.Raise.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 18878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _argsOdownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.Raise.args.downEnv"
<<<<<<< HEAD
                   {-# LINE 18890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _argsOexpectedTypes =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.Raise.args.expectedTypes"
<<<<<<< HEAD
                   {-# LINE 18896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18908 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOcat _argsOdownEnv _argsOexpectedTypes _argsOflags _argsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Return :: T_Annotation  ->
                        T_MaybeScalarExpr  ->
                        T_Statement 
sem_Statement_Return ann_ value_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _valueOcat :: Catalog
              _valueOdownEnv :: Environment
              _valueOexpectedType :: (Maybe Type)
              _valueOflags :: TypeCheckingFlags
              _valueOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _valueIannotatedTree :: MaybeScalarExpr 
              _valueIoriginalTree :: MaybeScalarExpr 
              _valueIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Return _annIannotatedTree _valueIannotatedTree
<<<<<<< HEAD
                   {-# LINE 18942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18852 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Return _annIoriginalTree _valueIoriginalTree
<<<<<<< HEAD
                   {-# LINE 18948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18858 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 18954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18864 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 18960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18870 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18876 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 18972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18882 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 18978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18888 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.Return.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 18984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18894 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 18990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18900 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _valueOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.Return.value.downEnv"
<<<<<<< HEAD
                   {-# LINE 18996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18906 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _valueOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.Return.value.expectedType"
<<<<<<< HEAD
                   {-# LINE 19002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _valueOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _valueIannotatedTree,_valueIoriginalTree,_valueIupType) =
                  value_ _valueOcat _valueOdownEnv _valueOexpectedType _valueOflags _valueOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_ReturnNext :: T_Annotation  ->
                            T_ScalarExpr  ->
                            T_Statement 
sem_Statement_ReturnNext ann_ expr_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedType :: (Maybe Type)
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnNext _annIannotatedTree _exprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 19049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnNext _annIoriginalTree _exprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 19055 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 19061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18971 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 19067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18977 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 18995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.ReturnNext.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 19091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.ReturnNext.expr.downEnv"
<<<<<<< HEAD
                   {-# LINE 19103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.ReturnNext.expr.expectedType"
<<<<<<< HEAD
                   {-# LINE 19109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_ReturnQuery :: T_Annotation  ->
                             T_QueryExpr  ->
                             T_Statement 
sem_Statement_ReturnQuery ann_ sel_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe Type)
              _selOouterDownEnv :: (Maybe Environment)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _selIannotatedTree :: QueryExpr 
              _selIoriginalTree :: QueryExpr 
              _selIupType :: (Maybe [(Text,Type)])
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnQuery _annIannotatedTree _selIannotatedTree
<<<<<<< HEAD
                   {-# LINE 19154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19064 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnQuery _annIoriginalTree _selIoriginalTree
<<<<<<< HEAD
                   {-# LINE 19160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19070 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 19166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19076 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 19172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.ReturnQuery.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 19196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _selOouterDownEnv =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   error "missing rule: Statement.ReturnQuery.sel.outerDownEnv"
<<<<<<< HEAD
                   {-# LINE 19220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOcat _selOflags _selOimCast _selOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Set :: T_Annotation  ->
                     String ->
                     ([SetValue]) ->
                     T_Statement 
sem_Statement_Set ann_ name_ values_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Set _annIannotatedTree name_ values_
<<<<<<< HEAD
                   {-# LINE 19247 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Set _annIoriginalTree name_ values_
<<<<<<< HEAD
                   {-# LINE 19253 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 19259 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 19265 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19277 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19283 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.Set.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 19289 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Truncate :: T_Annotation  ->
                          ([Name]) ->
                          RestartIdentity ->
                          Cascade ->
                          T_Statement 
sem_Statement_Truncate ann_ tables_ restartIdentity_ cascade_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 19315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Truncate _annIannotatedTree tables_ restartIdentity_ cascade_
<<<<<<< HEAD
                   {-# LINE 19321 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Truncate _annIoriginalTree tables_ restartIdentity_ cascade_
<<<<<<< HEAD
                   {-# LINE 19327 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 19333 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 19339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_Update :: T_Annotation  ->
                        T_Name  ->
                        T_SetClauseList  ->
                        T_TableRefList  ->
                        T_MaybeBoolExpr  ->
                        T_MaybeSelectList  ->
                        T_Statement 
sem_Statement_Update ann_ table_ assigns_ fromList_ whr_ returning_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe Type)
              _tableOtpe :: (Either [TypeError] Type)
              _assignsOcat :: Catalog
              _assignsOflags :: TypeCheckingFlags
              _assignsOimCast :: (Maybe Type)
              _fromListOcat :: Catalog
              _fromListOflags :: TypeCheckingFlags
              _fromListOimCast :: (Maybe Type)
              _whrOcat :: Catalog
              _whrOdownEnv :: Environment
              _whrOflags :: TypeCheckingFlags
              _whrOimCast :: (Maybe Type)
              _returningOcat :: Catalog
              _returningOflags :: TypeCheckingFlags
              _returningOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tableIannotatedTree :: Name 
              _tableIoriginalTree :: Name 
              _assignsIannotatedTree :: SetClauseList 
              _assignsIoriginalTree :: SetClauseList 
              _fromListIannotatedTree :: TableRefList 
              _fromListIoriginalTree :: TableRefList 
              _fromListIupEnv :: Environment
              _whrIannotatedTree :: MaybeBoolExpr 
              _whrIoriginalTree :: MaybeBoolExpr 
              _returningIannotatedTree :: MaybeSelectList 
              _returningIoriginalTree :: MaybeSelectList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 8, column 5)
              _annOtpe =
                  ({-# LINE 8 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 19413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19323 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Update _annIannotatedTree _tableIannotatedTree _assignsIannotatedTree _fromListIannotatedTree _whrIannotatedTree _returningIannotatedTree
<<<<<<< HEAD
                   {-# LINE 19419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19329 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Update _annIoriginalTree _tableIoriginalTree _assignsIoriginalTree _fromListIoriginalTree _whrIoriginalTree _returningIoriginalTree
<<<<<<< HEAD
                   {-# LINE 19425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19335 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 19431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19341 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 19437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19347 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _tableOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.Update.table.tpe"
<<<<<<< HEAD
                   {-# LINE 19479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _assignsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19395 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _assignsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _assignsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fromListOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fromListOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fromListOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _whrOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _whrOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   error "missing rule: Statement.Update.whr.downEnv"
<<<<<<< HEAD
                   {-# LINE 19527 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _whrOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19533 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _whrOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19539 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _returningOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19545 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _returningOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19551 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _returningOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19557 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe 
              ( _assignsIannotatedTree,_assignsIoriginalTree) =
                  assigns_ _assignsOcat _assignsOflags _assignsOimCast 
              ( _fromListIannotatedTree,_fromListIoriginalTree,_fromListIupEnv) =
                  fromList_ _fromListOcat _fromListOflags _fromListOimCast 
              ( _whrIannotatedTree,_whrIoriginalTree) =
                  whr_ _whrOcat _whrOdownEnv _whrOflags _whrOimCast 
              ( _returningIannotatedTree,_returningIoriginalTree) =
                  returning_ _returningOcat _returningOflags _returningOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_Statement_WhileStatement :: T_Annotation  ->
                                (Maybe String) ->
                                T_ScalarExpr  ->
                                T_StatementList  ->
                                T_Statement 
sem_Statement_WhileStatement ann_ lb_ expr_ sts_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement 
              _lhsOoriginalTree :: Statement 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedType :: (Maybe Type)
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe Type)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exprIannotatedTree :: ScalarExpr 
              _exprIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr 
              _exprIupType :: (Maybe Type)
              _stsIannotatedTree :: StatementList 
              _stsIoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WhileStatement _annIannotatedTree lb_ _exprIannotatedTree _stsIannotatedTree
<<<<<<< HEAD
                   {-# LINE 19607 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WhileStatement _annIoriginalTree lb_ _exprIoriginalTree _stsIoriginalTree
<<<<<<< HEAD
                   {-# LINE 19613 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19523 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 19619 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19529 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 19625 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19535 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19631 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19541 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19637 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19643 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: Statement.WhileStatement.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 19649 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19655 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.WhileStatement.expr.downEnv"
<<<<<<< HEAD
                   {-# LINE 19661 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19571 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _exprOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: Statement.WhileStatement.expr.expectedType"
<<<<<<< HEAD
                   {-# LINE 19667 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19577 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19673 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19583 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19589 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19595 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19601 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19607 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOcat _exprOdownEnv _exprOexpectedType _exprOflags _exprOimCast 
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- StatementList -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : Statement 
         child tl             : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type StatementList  = [Statement ]
-- cata
sem_StatementList :: StatementList  ->
                     T_StatementList 
sem_StatementList list  =
    (Prelude.foldr sem_StatementList_Cons sem_StatementList_Nil (Prelude.map sem_Statement list) )
-- semantic domain
type T_StatementList  = Catalog ->
                        TypeCheckingFlags ->
                        (Maybe Type) ->
                        ( StatementList ,StatementList )
data Inh_StatementList  = Inh_StatementList {cat_Inh_StatementList :: Catalog,flags_Inh_StatementList :: TypeCheckingFlags,imCast_Inh_StatementList :: (Maybe Type)}
data Syn_StatementList  = Syn_StatementList {annotatedTree_Syn_StatementList :: StatementList ,originalTree_Syn_StatementList :: StatementList }
wrap_StatementList :: T_StatementList  ->
                      Inh_StatementList  ->
                      Syn_StatementList 
wrap_StatementList sem (Inh_StatementList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_StatementList _lhsOannotatedTree _lhsOoriginalTree ))
sem_StatementList_Cons :: T_Statement  ->
                          T_StatementList  ->
                          T_StatementList 
sem_StatementList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: StatementList 
              _lhsOoriginalTree :: StatementList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: Statement 
              _hdIoriginalTree :: Statement 
              _tlIannotatedTree :: StatementList 
              _tlIoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 19770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 19776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 19782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 19788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 19812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 19818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 19824 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_StatementList_Nil :: T_StatementList 
sem_StatementList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: StatementList 
              _lhsOoriginalTree :: StatementList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 19842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 19848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 19854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 19860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TableRef ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
         upEnv                : Environment
   alternatives:
      alternative FullAlias:
         child ann            : Annotation 
         child tb             : {NameComponent}
         child cols           : {[NameComponent]}
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local annotatedTree : _
            local originalTree : _
      alternative FunTref:
         child ann            : Annotation 
         child fn             : ScalarExpr 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative JoinTref:
         child ann            : Annotation 
         child tref0          : TableRef 
         child nat            : {Natural}
         child joinType       : {JoinType}
         child joinHint       : {Maybe JoinHint}
         child tref1          : TableRef 
         child onExpr         : OnExpr 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative SubTref:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative TableAlias:
         child ann            : Annotation 
         child tb             : {NameComponent}
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local annotatedTree : _
            local originalTree : _
      alternative TableRefParens:
         child ann            : Annotation 
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative Tref:
         child ann            : Annotation 
         child tbl            : Name 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
-}
data TableRef  = FullAlias (Annotation ) (NameComponent) (([NameComponent])) (TableRef ) 
               | FunTref (Annotation ) (ScalarExpr ) 
               | JoinTref (Annotation ) (TableRef ) (Natural) (JoinType) ((Maybe JoinHint)) (TableRef ) (OnExpr ) 
               | SubTref (Annotation ) (QueryExpr ) 
               | TableAlias (Annotation ) (NameComponent) (TableRef ) 
               | TableRefParens (Annotation ) (TableRef ) 
               | Tref (Annotation ) (Name ) 
               deriving ( Data,Eq,Show,Typeable)
-- cata
sem_TableRef :: TableRef  ->
                T_TableRef 
sem_TableRef (FullAlias _ann _tb _cols _tref )  =
    (sem_TableRef_FullAlias (sem_Annotation _ann ) _tb _cols (sem_TableRef _tref ) )
sem_TableRef (FunTref _ann _fn )  =
    (sem_TableRef_FunTref (sem_Annotation _ann ) (sem_ScalarExpr _fn ) )
sem_TableRef (JoinTref _ann _tref0 _nat _joinType _joinHint _tref1 _onExpr )  =
    (sem_TableRef_JoinTref (sem_Annotation _ann ) (sem_TableRef _tref0 ) _nat _joinType _joinHint (sem_TableRef _tref1 ) (sem_OnExpr _onExpr ) )
sem_TableRef (SubTref _ann _sel )  =
    (sem_TableRef_SubTref (sem_Annotation _ann ) (sem_QueryExpr _sel ) )
sem_TableRef (TableAlias _ann _tb _tref )  =
    (sem_TableRef_TableAlias (sem_Annotation _ann ) _tb (sem_TableRef _tref ) )
sem_TableRef (TableRefParens _ann _tref )  =
    (sem_TableRef_TableRefParens (sem_Annotation _ann ) (sem_TableRef _tref ) )
sem_TableRef (Tref _ann _tbl )  =
    (sem_TableRef_Tref (sem_Annotation _ann ) (sem_Name _tbl ) )
-- semantic domain
type T_TableRef  = Catalog ->
                   TypeCheckingFlags ->
                   (Maybe Type) ->
                   ( TableRef ,TableRef ,Environment)
data Inh_TableRef  = Inh_TableRef {cat_Inh_TableRef :: Catalog,flags_Inh_TableRef :: TypeCheckingFlags,imCast_Inh_TableRef :: (Maybe Type)}
data Syn_TableRef  = Syn_TableRef {annotatedTree_Syn_TableRef :: TableRef ,originalTree_Syn_TableRef :: TableRef ,upEnv_Syn_TableRef :: Environment}
wrap_TableRef :: T_TableRef  ->
                 Inh_TableRef  ->
                 Syn_TableRef 
wrap_TableRef sem (Inh_TableRef _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_TableRef _lhsOannotatedTree _lhsOoriginalTree _lhsOupEnv ))
sem_TableRef_FullAlias :: T_Annotation  ->
                          NameComponent ->
                          ([NameComponent]) ->
                          T_TableRef  ->
                          T_TableRef 
sem_TableRef_FullAlias ann_ tb_ cols_ tref_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef 
              _lhsOoriginalTree :: TableRef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckingFlags
              _trefOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _trefIannotatedTree :: TableRef 
              _trefIoriginalTree :: TableRef 
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 31, column 7)
              _annOtpe =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . TrefType)
                   (_eEnv     >>= envExpandStar Nothing)
<<<<<<< HEAD
                   {-# LINE 20006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 34, column 7)
              _lhsOupEnv =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const brokeEnvironment) id _eEnv
<<<<<<< HEAD
                   {-# LINE 20012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 61, column 7)
              _eEnv =
                  ({-# LINE 61 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ createTrefAliasedEnvironment
                           (ncStrT tb_) (Just $ map ncStrT cols_) _trefIupEnv
<<<<<<< HEAD
                   {-# LINE 20019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19929 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 99, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 99 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   case _trefIannotatedTree of
                     FullAlias _ t _ tr -> FullAlias emptyAnnotation
                                             (if tb_ == Nmc "" then t else tb_) cols_                       tr
                     TableAlias _ _ tr -> FullAlias emptyAnnotation tb_ cols_                        tr
                     _ -> _annotatedTree
<<<<<<< HEAD
                   {-# LINE 20029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FullAlias _annIannotatedTree tb_ cols_ _trefIannotatedTree
<<<<<<< HEAD
                   {-# LINE 20035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FullAlias _annIoriginalTree tb_ cols_ _trefIoriginalTree
<<<<<<< HEAD
                   {-# LINE 20041 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 20047 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20053 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19963 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20059 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19969 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20065 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19975 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20071 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19981 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20077 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19987 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20083 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 19993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
sem_TableRef_FunTref :: T_Annotation  ->
                        T_ScalarExpr  ->
                        T_TableRef 
sem_TableRef_FunTref ann_ fn_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef 
              _lhsOoriginalTree :: TableRef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _fnOcat :: Catalog
              _fnOdownEnv :: Environment
              _fnOexpectedType :: (Maybe Type)
              _fnOflags :: TypeCheckingFlags
              _fnOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _fnIannotatedTree :: ScalarExpr 
              _fnIcolExprs :: ([(NameComponent,Maybe Type,ScalarExpr)])
              _fnIoriginalTree :: ScalarExpr 
              _fnIupType :: (Maybe Type)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 31, column 7)
              _annOtpe =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . TrefType)
                   (_eEnv     >>= envExpandStar Nothing)
<<<<<<< HEAD
                   {-# LINE 20121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 34, column 7)
              _lhsOupEnv =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const brokeEnvironment) id _eEnv
<<<<<<< HEAD
                   {-# LINE 20127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 67, column 7)
              _eEnv =
                  ({-# LINE 67 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 20133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20043 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 71, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
<<<<<<< HEAD
                   {-# LINE 20146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 131, column 7)
              _newAlias =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                           Nothing
                   else Nothing
<<<<<<< HEAD
                   {-# LINE 20161 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20071 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FunTref _annIannotatedTree _fnIannotatedTree
<<<<<<< HEAD
                   {-# LINE 20167 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20077 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FunTref _annIoriginalTree _fnIoriginalTree
<<<<<<< HEAD
                   {-# LINE 20173 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20083 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 20179 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20089 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20185 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20095 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20191 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20101 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20107 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20203 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _fnOdownEnv =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: TableRef.FunTref.fn.downEnv"
<<<<<<< HEAD
                   {-# LINE 20209 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _fnOexpectedType =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   error "missing rule: TableRef.FunTref.fn.expectedType"
<<<<<<< HEAD
                   {-# LINE 20215 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20221 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _fnOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20227 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _fnIannotatedTree,_fnIcolExprs,_fnIoriginalTree,_fnIupType) =
                  fn_ _fnOcat _fnOdownEnv _fnOexpectedType _fnOflags _fnOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
sem_TableRef_JoinTref :: T_Annotation  ->
                         T_TableRef  ->
                         Natural ->
                         JoinType ->
                         (Maybe JoinHint) ->
                         T_TableRef  ->
                         T_OnExpr  ->
                         T_TableRef 
sem_TableRef_JoinTref ann_ tref0_ nat_ joinType_ joinHint_ tref1_ onExpr_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _onExprOdownEnv :: Environment
              _lhsOannotatedTree :: TableRef 
              _lhsOoriginalTree :: TableRef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tref0Ocat :: Catalog
              _tref0Oflags :: TypeCheckingFlags
              _tref0OimCast :: (Maybe Type)
              _tref1Ocat :: Catalog
              _tref1Oflags :: TypeCheckingFlags
              _tref1OimCast :: (Maybe Type)
              _onExprOcat :: Catalog
              _onExprOflags :: TypeCheckingFlags
              _onExprOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tref0IannotatedTree :: TableRef 
              _tref0IoriginalTree :: TableRef 
              _tref0IupEnv :: Environment
              _tref1IannotatedTree :: TableRef 
              _tref1IoriginalTree :: TableRef 
              _tref1IupEnv :: Environment
              _onExprIannotatedTree :: OnExpr 
              _onExprIoriginalTree :: OnExpr 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 31, column 7)
              _annOtpe =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . TrefType)
                   (_eEnv     >>= envExpandStar Nothing)
<<<<<<< HEAD
                   {-# LINE 20279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20189 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 34, column 7)
              _lhsOupEnv =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const brokeEnvironment) id _eEnv
<<<<<<< HEAD
                   {-# LINE 20285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20195 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 44, column 7)
              _eEnv =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   createJoinTrefEnvironment _lhsIcat
                     _tref0IupEnv _tref1IupEnv
                     $ case (joinType_,_onExprIoriginalTree) of
                        (x,Nothing) | x /= Cross -> Nothing
                        (_,Just (JoinUsing _ nms)) -> Just nms
                        _ -> Just []
<<<<<<< HEAD
                   {-# LINE 20296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 54, column 7)
              _onExprOdownEnv =
                  ({-# LINE 54 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const brokeEnvironment) id _eEnv
<<<<<<< HEAD
                   {-# LINE 20302 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 71, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
<<<<<<< HEAD
                   {-# LINE 20315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 131, column 7)
              _newAlias =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                           Nothing
                   else Nothing
<<<<<<< HEAD
                   {-# LINE 20330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinTref _annIannotatedTree _tref0IannotatedTree nat_ joinType_ joinHint_ _tref1IannotatedTree _onExprIannotatedTree
<<<<<<< HEAD
                   {-# LINE 20336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinTref _annIoriginalTree _tref0IoriginalTree nat_ joinType_ joinHint_ _tref1IoriginalTree _onExprIoriginalTree
<<<<<<< HEAD
                   {-# LINE 20342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 20348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tref0Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tref0Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tref0OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tref1Ocat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20390 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tref1Oflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tref1OimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _onExprOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _onExprOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _onExprOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tref0IannotatedTree,_tref0IoriginalTree,_tref0IupEnv) =
                  tref0_ _tref0Ocat _tref0Oflags _tref0OimCast 
              ( _tref1IannotatedTree,_tref1IoriginalTree,_tref1IupEnv) =
                  tref1_ _tref1Ocat _tref1Oflags _tref1OimCast 
              ( _onExprIannotatedTree,_onExprIoriginalTree) =
                  onExpr_ _onExprOcat _onExprOdownEnv _onExprOflags _onExprOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
sem_TableRef_SubTref :: T_Annotation  ->
                        T_QueryExpr  ->
                        T_TableRef 
sem_TableRef_SubTref ann_ sel_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _selOouterDownEnv :: (Maybe Environment)
              _annOtpe :: (Either [TypeError] Type)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef 
              _lhsOoriginalTree :: TableRef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _selIannotatedTree :: QueryExpr 
              _selIoriginalTree :: QueryExpr 
              _selIupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 26, column 13)
              _selOouterDownEnv =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 20459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 31, column 7)
              _annOtpe =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . TrefType)
                   (_eEnv     >>= envExpandStar Nothing)
<<<<<<< HEAD
                   {-# LINE 20466 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 34, column 7)
              _lhsOupEnv =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const brokeEnvironment) id _eEnv
<<<<<<< HEAD
                   {-# LINE 20472 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 56, column 7)
              _eEnv =
                  ({-# LINE 56 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   maybe (Left []) id
                   $ fmap envSelectListEnvironment _selIupType
<<<<<<< HEAD
                   {-# LINE 20479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 71, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
<<<<<<< HEAD
                   {-# LINE 20492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 131, column 7)
              _newAlias =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                           Nothing
                   else Nothing
<<<<<<< HEAD
                   {-# LINE 20507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SubTref _annIannotatedTree _selIannotatedTree
<<<<<<< HEAD
                   {-# LINE 20513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20423 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SubTref _annIoriginalTree _selIoriginalTree
<<<<<<< HEAD
                   {-# LINE 20519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20429 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 20525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20435 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20441 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20465 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20471 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOcat _selOflags _selOimCast _selOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
sem_TableRef_TableAlias :: T_Annotation  ->
                           NameComponent ->
                           T_TableRef  ->
                           T_TableRef 
sem_TableRef_TableAlias ann_ tb_ tref_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef 
              _lhsOoriginalTree :: TableRef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckingFlags
              _trefOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _trefIannotatedTree :: TableRef 
              _trefIoriginalTree :: TableRef 
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 31, column 7)
              _annOtpe =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . TrefType)
                   (_eEnv     >>= envExpandStar Nothing)
<<<<<<< HEAD
                   {-# LINE 20597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 34, column 7)
              _lhsOupEnv =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const brokeEnvironment) id _eEnv
<<<<<<< HEAD
                   {-# LINE 20603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 64, column 7)
              _eEnv =
                  ({-# LINE 64 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ createTrefAliasedEnvironment
                           (ncStrT tb_) Nothing _trefIupEnv
<<<<<<< HEAD
                   {-# LINE 20610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 120, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   case _trefIannotatedTree of
                     FullAlias _ _ c tr -> FullAlias emptyAnnotation tb_ c tr
                     TableAlias _ _ tr -> TableAlias emptyAnnotation tb_ tr
                     _ -> _annotatedTree
<<<<<<< HEAD
                   {-# LINE 20619 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20529 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableAlias _annIannotatedTree tb_ _trefIannotatedTree
<<<<<<< HEAD
                   {-# LINE 20625 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20535 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableAlias _annIoriginalTree tb_ _trefIoriginalTree
<<<<<<< HEAD
                   {-# LINE 20631 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20541 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 20637 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20643 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20649 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20655 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20661 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20571 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20667 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20577 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20673 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20583 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
sem_TableRef_TableRefParens :: T_Annotation  ->
                               T_TableRef  ->
                               T_TableRef 
sem_TableRef_TableRefParens ann_ tref_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef 
              _lhsOoriginalTree :: TableRef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckingFlags
              _trefOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _trefIannotatedTree :: TableRef 
              _trefIoriginalTree :: TableRef 
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 31, column 7)
              _annOtpe =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . TrefType)
                   (_eEnv     >>= envExpandStar Nothing)
<<<<<<< HEAD
                   {-# LINE 20708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20618 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 34, column 7)
              _lhsOupEnv =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const brokeEnvironment) id _eEnv
<<<<<<< HEAD
                   {-# LINE 20714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20624 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 59, column 7)
              _eEnv =
                  ({-# LINE 59 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ _trefIupEnv
<<<<<<< HEAD
                   {-# LINE 20720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20630 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 71, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
<<<<<<< HEAD
                   {-# LINE 20733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20643 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 131, column 7)
              _newAlias =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                           Nothing
                   else Nothing
<<<<<<< HEAD
                   {-# LINE 20748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableRefParens _annIannotatedTree _trefIannotatedTree
<<<<<<< HEAD
                   {-# LINE 20754 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableRefParens _annIoriginalTree _trefIoriginalTree
<<<<<<< HEAD
                   {-# LINE 20760 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 20766 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20772 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20778 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20784 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20790 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20796 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20802 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
sem_TableRef_Tref :: T_Annotation  ->
                     T_Name  ->
                     T_TableRef 
sem_TableRef_Tref ann_ tbl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] Type)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _tblOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: TableRef 
              _lhsOoriginalTree :: TableRef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tblOcat :: Catalog
              _tblOflags :: TypeCheckingFlags
              _tblOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tblIannotatedTree :: Name 
              _tblIoriginalTree :: Name 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 31, column 7)
              _annOtpe =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . TrefType)
                   (_eEnv     >>= envExpandStar Nothing)
<<<<<<< HEAD
                   {-# LINE 20837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 34, column 7)
              _lhsOupEnv =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const brokeEnvironment) id _eEnv
<<<<<<< HEAD
                   {-# LINE 20843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 40, column 7)
              _eEnv =
                  ({-# LINE 40 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   envCreateTrefEnvironment _lhsIcat (nameComponents _tblIoriginalTree)
<<<<<<< HEAD
                   {-# LINE 20849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 41, column 7)
              _tblOtpe =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 20855 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20765 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 71, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
<<<<<<< HEAD
                   {-# LINE 20868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20778 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 146, column 7)
              _newAlias =
                  ({-# LINE 146 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     (n,cs,_) <- either (const Nothing) Just
                                   $ catLookupTableAndAttrs _lhsIcat
                                   (nameComponents _tblIoriginalTree)
                     return (T.unpack n, (map (T.unpack . fst) cs))
                   else Nothing
<<<<<<< HEAD
                   {-# LINE 20880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20790 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Tref _annIannotatedTree _tblIannotatedTree
<<<<<<< HEAD
                   {-# LINE 20886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20796 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Tref _annIoriginalTree _tblIoriginalTree
<<<<<<< HEAD
                   {-# LINE 20892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20802 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 20898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20808 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20814 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tblOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 20922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tblOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 20928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tblOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 20934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20844 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tblIannotatedTree,_tblIoriginalTree) =
                  tbl_ _tblOcat _tblOflags _tblOimCast _tblOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
-- TableRefList ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
         upEnv                : Environment
   alternatives:
      alternative Cons:
         child hd             : TableRef 
         child tl             : TableRefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type TableRefList  = [TableRef ]
-- cata
sem_TableRefList :: TableRefList  ->
                    T_TableRefList 
sem_TableRefList list  =
    (Prelude.foldr sem_TableRefList_Cons sem_TableRefList_Nil (Prelude.map sem_TableRef list) )
-- semantic domain
type T_TableRefList  = Catalog ->
                       TypeCheckingFlags ->
                       (Maybe Type) ->
                       ( TableRefList ,TableRefList ,Environment)
data Inh_TableRefList  = Inh_TableRefList {cat_Inh_TableRefList :: Catalog,flags_Inh_TableRefList :: TypeCheckingFlags,imCast_Inh_TableRefList :: (Maybe Type)}
data Syn_TableRefList  = Syn_TableRefList {annotatedTree_Syn_TableRefList :: TableRefList ,originalTree_Syn_TableRefList :: TableRefList ,upEnv_Syn_TableRefList :: Environment}
wrap_TableRefList :: T_TableRefList  ->
                     Inh_TableRefList  ->
                     Syn_TableRefList 
wrap_TableRefList sem (Inh_TableRefList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_TableRefList _lhsOannotatedTree _lhsOoriginalTree _lhsOupEnv ))
sem_TableRefList_Cons :: T_TableRef  ->
                         T_TableRefList  ->
                         T_TableRefList 
sem_TableRefList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupEnv :: Environment
              _lhsOannotatedTree :: TableRefList 
              _lhsOoriginalTree :: TableRefList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: TableRef 
              _hdIoriginalTree :: TableRef 
              _hdIupEnv :: Environment
              _tlIannotatedTree :: TableRefList 
              _tlIoriginalTree :: TableRefList 
              _tlIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 20, column 7)
              _lhsOupEnv =
                  ({-# LINE 20 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if isEmptyEnv _tlIupEnv
                   then _hdIupEnv
                   else
                          either (error . show) id $
                          createJoinTrefEnvironment _lhsIcat _hdIupEnv _tlIupEnv $ Just []
<<<<<<< HEAD
                   {-# LINE 21013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20923 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 21019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20929 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 21025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20935 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20941 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 21037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20947 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21043 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21055 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20971 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20977 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 20983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree,_hdIupEnv) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupEnv) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
sem_TableRefList_Nil :: T_TableRefList 
sem_TableRefList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupEnv :: Environment
              _lhsOannotatedTree :: TableRefList 
              _lhsOoriginalTree :: TableRefList 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 18, column 9)
              _lhsOupEnv =
                  ({-# LINE 18 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   emptyEnvironment
<<<<<<< HEAD
                   {-# LINE 21092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 21098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 21104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 21116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
-- TypeAttributeDef --------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative TypeAttDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data TypeAttributeDef  = TypeAttDef (Annotation ) (NameComponent) (TypeName ) 
                       deriving ( Data,Eq,Show,Typeable)
-- cata
sem_TypeAttributeDef :: TypeAttributeDef  ->
                        T_TypeAttributeDef 
sem_TypeAttributeDef (TypeAttDef _ann _name _typ )  =
    (sem_TypeAttributeDef_TypeAttDef (sem_Annotation _ann ) _name (sem_TypeName _typ ) )
-- semantic domain
type T_TypeAttributeDef  = Catalog ->
                           TypeCheckingFlags ->
                           (Maybe Type) ->
                           ( TypeAttributeDef ,TypeAttributeDef )
data Inh_TypeAttributeDef  = Inh_TypeAttributeDef {cat_Inh_TypeAttributeDef :: Catalog,flags_Inh_TypeAttributeDef :: TypeCheckingFlags,imCast_Inh_TypeAttributeDef :: (Maybe Type)}
data Syn_TypeAttributeDef  = Syn_TypeAttributeDef {annotatedTree_Syn_TypeAttributeDef :: TypeAttributeDef ,originalTree_Syn_TypeAttributeDef :: TypeAttributeDef }
wrap_TypeAttributeDef :: T_TypeAttributeDef  ->
                         Inh_TypeAttributeDef  ->
                         Syn_TypeAttributeDef 
wrap_TypeAttributeDef sem (Inh_TypeAttributeDef _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_TypeAttributeDef _lhsOannotatedTree _lhsOoriginalTree ))
sem_TypeAttributeDef_TypeAttDef :: T_Annotation  ->
                                   NameComponent ->
                                   T_TypeName  ->
                                   T_TypeAttributeDef 
sem_TypeAttributeDef_TypeAttDef ann_ name_ typ_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeAttributeDef 
              _lhsOoriginalTree :: TypeAttributeDef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _typIannotatedTree :: TypeName 
              _typInamedType :: (Maybe Type)
              _typIoriginalTree :: TypeName 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypeAttDef _annIannotatedTree name_ _typIannotatedTree
<<<<<<< HEAD
                   {-# LINE 21184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypeAttDef _annIoriginalTree name_ _typIoriginalTree
<<<<<<< HEAD
                   {-# LINE 21190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 21202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: TypeAttributeDef.TypeAttDef.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 21226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TypeAttributeDefList ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : TypeAttributeDef 
         child tl             : TypeAttributeDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type TypeAttributeDefList  = [TypeAttributeDef ]
-- cata
sem_TypeAttributeDefList :: TypeAttributeDefList  ->
                            T_TypeAttributeDefList 
sem_TypeAttributeDefList list  =
    (Prelude.foldr sem_TypeAttributeDefList_Cons sem_TypeAttributeDefList_Nil (Prelude.map sem_TypeAttributeDef list) )
-- semantic domain
type T_TypeAttributeDefList  = Catalog ->
                               TypeCheckingFlags ->
                               (Maybe Type) ->
                               ( TypeAttributeDefList ,TypeAttributeDefList )
data Inh_TypeAttributeDefList  = Inh_TypeAttributeDefList {cat_Inh_TypeAttributeDefList :: Catalog,flags_Inh_TypeAttributeDefList :: TypeCheckingFlags,imCast_Inh_TypeAttributeDefList :: (Maybe Type)}
data Syn_TypeAttributeDefList  = Syn_TypeAttributeDefList {annotatedTree_Syn_TypeAttributeDefList :: TypeAttributeDefList ,originalTree_Syn_TypeAttributeDefList :: TypeAttributeDefList }
wrap_TypeAttributeDefList :: T_TypeAttributeDefList  ->
                             Inh_TypeAttributeDefList  ->
                             Syn_TypeAttributeDefList 
wrap_TypeAttributeDefList sem (Inh_TypeAttributeDefList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_TypeAttributeDefList _lhsOannotatedTree _lhsOoriginalTree ))
sem_TypeAttributeDefList_Cons :: T_TypeAttributeDef  ->
                                 T_TypeAttributeDefList  ->
                                 T_TypeAttributeDefList 
sem_TypeAttributeDefList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeAttributeDefList 
              _lhsOoriginalTree :: TypeAttributeDefList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: TypeAttributeDef 
              _hdIoriginalTree :: TypeAttributeDef 
              _tlIannotatedTree :: TypeAttributeDefList 
              _tlIoriginalTree :: TypeAttributeDefList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 21315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 21321 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21327 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 21333 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_TypeAttributeDefList_Nil :: T_TypeAttributeDefList 
sem_TypeAttributeDefList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeAttributeDefList 
              _lhsOoriginalTree :: TypeAttributeDefList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 21387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 21393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 21405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TypeName ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         namedType            : Maybe Type
         originalTree         : SELF 
   alternatives:
      alternative ArrayTypeName:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local tpe         : {Either [TypeError] Type}
            local annotatedTree : _
            local originalTree : _
      alternative Prec2TypeName:
         child ann            : Annotation 
         child tn             : Name 
         child prec           : {Integer}
         child prec1          : {Integer}
         visit 0:
            local tpe         : {Either [TypeError] Type}
            local annotatedTree : _
            local originalTree : _
      alternative PrecTypeName:
         child ann            : Annotation 
         child tn             : Name 
         child prec           : {Integer}
         visit 0:
            local tpe         : {Either [TypeError] Type}
            local annotatedTree : _
            local originalTree : _
      alternative SetOfTypeName:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local tpe         : {Either [TypeError] Type}
            local annotatedTree : _
            local originalTree : _
      alternative SimpleTypeName:
         child ann            : Annotation 
         child tn             : Name 
         visit 0:
            local tpe         : {Either [TypeError] Type}
            local annotatedTree : _
            local originalTree : _
-}
data TypeName  = ArrayTypeName (Annotation ) (TypeName ) 
               | Prec2TypeName (Annotation ) (Name ) (Integer) (Integer) 
               | PrecTypeName (Annotation ) (Name ) (Integer) 
               | SetOfTypeName (Annotation ) (TypeName ) 
               | SimpleTypeName (Annotation ) (Name ) 
               deriving ( Data,Eq,Show,Typeable)
-- cata
sem_TypeName :: TypeName  ->
                T_TypeName 
sem_TypeName (ArrayTypeName _ann _typ )  =
    (sem_TypeName_ArrayTypeName (sem_Annotation _ann ) (sem_TypeName _typ ) )
sem_TypeName (Prec2TypeName _ann _tn _prec _prec1 )  =
    (sem_TypeName_Prec2TypeName (sem_Annotation _ann ) (sem_Name _tn ) _prec _prec1 )
sem_TypeName (PrecTypeName _ann _tn _prec )  =
    (sem_TypeName_PrecTypeName (sem_Annotation _ann ) (sem_Name _tn ) _prec )
sem_TypeName (SetOfTypeName _ann _typ )  =
    (sem_TypeName_SetOfTypeName (sem_Annotation _ann ) (sem_TypeName _typ ) )
sem_TypeName (SimpleTypeName _ann _tn )  =
    (sem_TypeName_SimpleTypeName (sem_Annotation _ann ) (sem_Name _tn ) )
-- semantic domain
type T_TypeName  = Catalog ->
                   TypeCheckingFlags ->
                   (Maybe Type) ->
                   ( TypeName ,(Maybe Type),TypeName )
data Inh_TypeName  = Inh_TypeName {cat_Inh_TypeName :: Catalog,flags_Inh_TypeName :: TypeCheckingFlags,imCast_Inh_TypeName :: (Maybe Type)}
data Syn_TypeName  = Syn_TypeName {annotatedTree_Syn_TypeName :: TypeName ,namedType_Syn_TypeName :: (Maybe Type),originalTree_Syn_TypeName :: TypeName }
wrap_TypeName :: T_TypeName  ->
                 Inh_TypeName  ->
                 Syn_TypeName 
wrap_TypeName sem (Inh_TypeName _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_TypeName _lhsOannotatedTree _lhsOnamedType _lhsOoriginalTree ))
sem_TypeName_ArrayTypeName :: T_Annotation  ->
                              T_TypeName  ->
                              T_TypeName 
sem_TypeName_ArrayTypeName ann_ typ_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: TypeName 
              _lhsOoriginalTree :: TypeName 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _typIannotatedTree :: TypeName 
              _typInamedType :: (Maybe Type)
              _typIoriginalTree :: TypeName 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 21518 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21428 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
<<<<<<< HEAD
                   {-# LINE 21524 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21434 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 58, column 9)
              _tpe =
                  ({-# LINE 58 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   maybe (Left []) Right _typInamedType
                   >>=  Right . ArrayType
<<<<<<< HEAD
                   {-# LINE 21531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21441 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ArrayTypeName _annIannotatedTree _typIannotatedTree
<<<<<<< HEAD
                   {-# LINE 21537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ArrayTypeName _annIoriginalTree _typIoriginalTree
<<<<<<< HEAD
                   {-# LINE 21543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 21555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21465 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21471 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21477 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21483 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast 
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
sem_TypeName_Prec2TypeName :: T_Annotation  ->
                              T_Name  ->
                              Integer ->
                              Integer ->
                              T_TypeName 
sem_TypeName_Prec2TypeName ann_ tn_ prec_ prec1_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _tnOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: TypeName 
              _lhsOoriginalTree :: TypeName 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tnIannotatedTree :: Name 
              _tnIoriginalTree :: Name 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 21627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
<<<<<<< HEAD
                   {-# LINE 21633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 39, column 10)
              _tnOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 21639 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 66, column 9)
              _tpe =
                  ({-# LINE 66 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   catLookupType _lhsIcat (nameComponents _tnIoriginalTree)
<<<<<<< HEAD
                   {-# LINE 21645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Prec2TypeName _annIannotatedTree _tnIannotatedTree prec_ prec1_
<<<<<<< HEAD
                   {-# LINE 21651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Prec2TypeName _annIoriginalTree _tnIoriginalTree prec_ prec1_
<<<<<<< HEAD
                   {-# LINE 21657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 21669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21693 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21699 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21705 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tnIannotatedTree,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast _tnOtpe 
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
sem_TypeName_PrecTypeName :: T_Annotation  ->
                             T_Name  ->
                             Integer ->
                             T_TypeName 
sem_TypeName_PrecTypeName ann_ tn_ prec_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _tnOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: TypeName 
              _lhsOoriginalTree :: TypeName 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tnIannotatedTree :: Name 
              _tnIoriginalTree :: Name 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 21740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21650 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
<<<<<<< HEAD
                   {-# LINE 21746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21656 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 39, column 10)
              _tnOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 21752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21662 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 64, column 9)
              _tpe =
                  ({-# LINE 64 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   catLookupType _lhsIcat (nameComponents _tnIoriginalTree)
<<<<<<< HEAD
                   {-# LINE 21758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21668 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrecTypeName _annIannotatedTree _tnIannotatedTree prec_
<<<<<<< HEAD
                   {-# LINE 21764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21674 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrecTypeName _annIoriginalTree _tnIoriginalTree prec_
<<<<<<< HEAD
                   {-# LINE 21770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 21782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tnIannotatedTree,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast _tnOtpe 
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
sem_TypeName_SetOfTypeName :: T_Annotation  ->
                              T_TypeName  ->
                              T_TypeName 
sem_TypeName_SetOfTypeName ann_ typ_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: TypeName 
              _lhsOoriginalTree :: TypeName 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _typIannotatedTree :: TypeName 
              _typInamedType :: (Maybe Type)
              _typIoriginalTree :: TypeName 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 21852 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
<<<<<<< HEAD
                   {-# LINE 21858 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21768 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 61, column 9)
              _tpe =
                  ({-# LINE 61 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   maybe (Left []) Right _typInamedType
                   >>=  Right . Pseudo . SetOfType
<<<<<<< HEAD
                   {-# LINE 21865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetOfTypeName _annIannotatedTree _typIannotatedTree
<<<<<<< HEAD
                   {-# LINE 21871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetOfTypeName _annIoriginalTree _typIoriginalTree
<<<<<<< HEAD
                   {-# LINE 21877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 21889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21901 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21907 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 21913 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 21919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 21925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast 
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
sem_TypeName_SimpleTypeName :: T_Annotation  ->
                               T_Name  ->
                               T_TypeName 
sem_TypeName_SimpleTypeName ann_ tn_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _tnOtpe :: (Either [TypeError] Type)
              _tpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: TypeName 
              _lhsOoriginalTree :: TypeName 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _tnIannotatedTree :: Name 
              _tnIoriginalTree :: Name 
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
<<<<<<< HEAD
                   {-# LINE 21959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
<<<<<<< HEAD
                   {-# LINE 21965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 39, column 10)
              _tnOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 21971 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 50, column 10)
              _tpe =
                  ({-# LINE 50 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   catLookupType _lhsIcat (nameComponents _tnIoriginalTree)
<<<<<<< HEAD
                   {-# LINE 21977 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SimpleTypeName _annIannotatedTree _tnIannotatedTree
<<<<<<< HEAD
                   {-# LINE 21983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SimpleTypeName _annIoriginalTree _tnIoriginalTree
<<<<<<< HEAD
                   {-# LINE 21989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21899 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 21995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21905 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21911 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21917 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21923 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21929 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21935 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21941 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 21947 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _tnIannotatedTree,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast _tnOtpe 
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
-- TypeNameList ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : TypeName 
         child tl             : TypeNameList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type TypeNameList  = [TypeName ]
-- cata
sem_TypeNameList :: TypeNameList  ->
                    T_TypeNameList 
sem_TypeNameList list  =
    (Prelude.foldr sem_TypeNameList_Cons sem_TypeNameList_Nil (Prelude.map sem_TypeName list) )
-- semantic domain
type T_TypeNameList  = Catalog ->
                       TypeCheckingFlags ->
                       (Maybe Type) ->
                       ( TypeNameList ,TypeNameList )
data Inh_TypeNameList  = Inh_TypeNameList {cat_Inh_TypeNameList :: Catalog,flags_Inh_TypeNameList :: TypeCheckingFlags,imCast_Inh_TypeNameList :: (Maybe Type)}
data Syn_TypeNameList  = Syn_TypeNameList {annotatedTree_Syn_TypeNameList :: TypeNameList ,originalTree_Syn_TypeNameList :: TypeNameList }
wrap_TypeNameList :: T_TypeNameList  ->
                     Inh_TypeNameList  ->
                     Syn_TypeNameList 
wrap_TypeNameList sem (Inh_TypeNameList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_TypeNameList _lhsOannotatedTree _lhsOoriginalTree ))
sem_TypeNameList_Cons :: T_TypeName  ->
                         T_TypeNameList  ->
                         T_TypeNameList 
sem_TypeNameList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeNameList 
              _lhsOoriginalTree :: TypeNameList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: TypeName 
              _hdInamedType :: (Maybe Type)
              _hdIoriginalTree :: TypeName 
              _tlIannotatedTree :: TypeNameList 
              _tlIoriginalTree :: TypeNameList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 22109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 22115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22043 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22055 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdInamedType,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_TypeNameList_Nil :: T_TypeNameList 
sem_TypeNameList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeNameList 
              _lhsOoriginalTree :: TypeNameList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 22181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 22187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- VarDef ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative ParamAlias:
         child ann            : Annotation 
         child name           : {NameComponent}
         child i              : {Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative VarAlias:
         child ann            : Annotation 
         child name           : {NameComponent}
         child aliased        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative VarDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         child value          : {Maybe ScalarExpr}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data VarDef  = ParamAlias (Annotation ) (NameComponent) (Integer) 
             | VarAlias (Annotation ) (NameComponent) (Name ) 
             | VarDef (Annotation ) (NameComponent) (TypeName ) ((Maybe ScalarExpr)) 
             deriving ( Data,Eq,Show,Typeable)
-- cata
sem_VarDef :: VarDef  ->
              T_VarDef 
sem_VarDef (ParamAlias _ann _name _i )  =
    (sem_VarDef_ParamAlias (sem_Annotation _ann ) _name _i )
sem_VarDef (VarAlias _ann _name _aliased )  =
    (sem_VarDef_VarAlias (sem_Annotation _ann ) _name (sem_Name _aliased ) )
sem_VarDef (VarDef _ann _name _typ _value )  =
    (sem_VarDef_VarDef (sem_Annotation _ann ) _name (sem_TypeName _typ ) _value )
-- semantic domain
type T_VarDef  = Catalog ->
                 TypeCheckingFlags ->
                 (Maybe Type) ->
                 ( VarDef ,VarDef )
data Inh_VarDef  = Inh_VarDef {cat_Inh_VarDef :: Catalog,flags_Inh_VarDef :: TypeCheckingFlags,imCast_Inh_VarDef :: (Maybe Type)}
data Syn_VarDef  = Syn_VarDef {annotatedTree_Syn_VarDef :: VarDef ,originalTree_Syn_VarDef :: VarDef }
wrap_VarDef :: T_VarDef  ->
               Inh_VarDef  ->
               Syn_VarDef 
wrap_VarDef sem (Inh_VarDef _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_VarDef _lhsOannotatedTree _lhsOoriginalTree ))
sem_VarDef_ParamAlias :: T_Annotation  ->
                         NameComponent ->
                         Integer ->
                         T_VarDef 
sem_VarDef_ParamAlias ann_ name_ i_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: VarDef 
              _lhsOoriginalTree :: VarDef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamAlias _annIannotatedTree name_ i_
<<<<<<< HEAD
                   {-# LINE 22282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamAlias _annIoriginalTree name_ i_
<<<<<<< HEAD
                   {-# LINE 22288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: VarDef.ParamAlias.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 22324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_VarDef_VarAlias :: T_Annotation  ->
                       NameComponent ->
                       T_Name  ->
                       T_VarDef 
sem_VarDef_VarAlias ann_ name_ aliased_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: VarDef 
              _lhsOoriginalTree :: VarDef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _aliasedOcat :: Catalog
              _aliasedOflags :: TypeCheckingFlags
              _aliasedOimCast :: (Maybe Type)
              _aliasedOtpe :: (Either [TypeError] Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _aliasedIannotatedTree :: Name 
              _aliasedIoriginalTree :: Name 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarAlias _annIannotatedTree name_ _aliasedIannotatedTree
<<<<<<< HEAD
                   {-# LINE 22355 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22265 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarAlias _annIoriginalTree name_ _aliasedIoriginalTree
<<<<<<< HEAD
                   {-# LINE 22361 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22367 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22277 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22373 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22283 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22379 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22289 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22385 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22295 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22391 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: VarDef.VarAlias.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 22397 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _aliasedOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22403 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _aliasedOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22409 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _aliasedOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22415 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _aliasedOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: VarDef.VarAlias.aliased.tpe"
<<<<<<< HEAD
                   {-# LINE 22421 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _aliasedIannotatedTree,_aliasedIoriginalTree) =
                  aliased_ _aliasedOcat _aliasedOflags _aliasedOimCast _aliasedOtpe 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_VarDef_VarDef :: T_Annotation  ->
                     NameComponent ->
                     T_TypeName  ->
                     (Maybe ScalarExpr) ->
                     T_VarDef 
sem_VarDef_VarDef ann_ name_ typ_ value_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: VarDef 
              _lhsOoriginalTree :: VarDef 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _annOtpe :: (Either [TypeError] Type)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _typIannotatedTree :: TypeName 
              _typInamedType :: (Maybe Type)
              _typIoriginalTree :: TypeName 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarDef _annIannotatedTree name_ _typIannotatedTree value_
<<<<<<< HEAD
                   {-# LINE 22455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarDef _annIoriginalTree name_ _typIoriginalTree value_
<<<<<<< HEAD
                   {-# LINE 22461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22395 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (chain)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   error "missing rule: VarDef.VarDef.ann.tpe"
<<<<<<< HEAD
                   {-# LINE 22497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- VarDefList --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : VarDef 
         child tl             : VarDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type VarDefList  = [VarDef ]
-- cata
sem_VarDefList :: VarDefList  ->
                  T_VarDefList 
sem_VarDefList list  =
    (Prelude.foldr sem_VarDefList_Cons sem_VarDefList_Nil (Prelude.map sem_VarDef list) )
-- semantic domain
type T_VarDefList  = Catalog ->
                     TypeCheckingFlags ->
                     (Maybe Type) ->
                     ( VarDefList ,VarDefList )
data Inh_VarDefList  = Inh_VarDefList {cat_Inh_VarDefList :: Catalog,flags_Inh_VarDefList :: TypeCheckingFlags,imCast_Inh_VarDefList :: (Maybe Type)}
data Syn_VarDefList  = Syn_VarDefList {annotatedTree_Syn_VarDefList :: VarDefList ,originalTree_Syn_VarDefList :: VarDefList }
wrap_VarDefList :: T_VarDefList  ->
                   Inh_VarDefList  ->
                   Syn_VarDefList 
wrap_VarDefList sem (Inh_VarDefList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_VarDefList _lhsOannotatedTree _lhsOoriginalTree ))
sem_VarDefList_Cons :: T_VarDef  ->
                       T_VarDefList  ->
                       T_VarDefList 
sem_VarDefList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: VarDefList 
              _lhsOoriginalTree :: VarDefList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: VarDef 
              _hdIoriginalTree :: VarDef 
              _tlIannotatedTree :: VarDefList 
              _tlIoriginalTree :: VarDefList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 22586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 22592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_VarDefList_Nil :: T_VarDefList 
sem_VarDefList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: VarDefList 
              _lhsOoriginalTree :: VarDefList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 22658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 22664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- WithQuery ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative WithQuery:
         child ann            : Annotation 
         child name           : {NameComponent}
         child colAliases     : {Maybe [NameComponent]}
         child ex             : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data WithQuery  = WithQuery (Annotation ) (NameComponent) ((Maybe [NameComponent])) (QueryExpr ) 
                deriving ( Data,Eq,Show,Typeable)
-- cata
sem_WithQuery :: WithQuery  ->
                 T_WithQuery 
sem_WithQuery (WithQuery _ann _name _colAliases _ex )  =
    (sem_WithQuery_WithQuery (sem_Annotation _ann ) _name _colAliases (sem_QueryExpr _ex ) )
-- semantic domain
type T_WithQuery  = Catalog ->
                    TypeCheckingFlags ->
                    (Maybe Type) ->
                    ( WithQuery ,WithQuery )
data Inh_WithQuery  = Inh_WithQuery {cat_Inh_WithQuery :: Catalog,flags_Inh_WithQuery :: TypeCheckingFlags,imCast_Inh_WithQuery :: (Maybe Type)}
data Syn_WithQuery  = Syn_WithQuery {annotatedTree_Syn_WithQuery :: WithQuery ,originalTree_Syn_WithQuery :: WithQuery }
wrap_WithQuery :: T_WithQuery  ->
                  Inh_WithQuery  ->
                  Syn_WithQuery 
wrap_WithQuery sem (Inh_WithQuery _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_WithQuery _lhsOannotatedTree _lhsOoriginalTree ))
sem_WithQuery_WithQuery :: T_Annotation  ->
                           NameComponent ->
                           (Maybe [NameComponent]) ->
                           T_QueryExpr  ->
                           T_WithQuery 
sem_WithQuery_WithQuery ann_ name_ colAliases_ ex_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _exOouterDownEnv :: (Maybe Environment)
              _annOtpe :: (Either [TypeError] Type)
              _lhsOannotatedTree :: WithQuery 
              _lhsOoriginalTree :: WithQuery 
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe Type)
              _exOcat :: Catalog
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe Type)
              _annIannotatedTree :: Annotation 
              _annIoriginalTree :: Annotation 
              _exIannotatedTree :: QueryExpr 
              _exIoriginalTree :: QueryExpr 
              _exIupType :: (Maybe [(Text,Type)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 28, column 15)
              _exOouterDownEnv =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
<<<<<<< HEAD
                   {-# LINE 22747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 33, column 15)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
<<<<<<< HEAD
                   {-# LINE 22753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQuery _annIannotatedTree name_ colAliases_ _exIannotatedTree
<<<<<<< HEAD
                   {-# LINE 22759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQuery _annIoriginalTree name_ colAliases_ _exIoriginalTree
<<<<<<< HEAD
                   {-# LINE 22765 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22771 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22777 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22783 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22693 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22789 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22699 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22705 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22711 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22717 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22723 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe 
              ( _exIannotatedTree,_exIoriginalTree,_exIupType) =
                  ex_ _exOcat _exOflags _exOimCast _exOouterDownEnv 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- WithQueryList -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe Type
      synthesized attributes:
         annotatedTree        : SELF 
         originalTree         : SELF 
   alternatives:
      alternative Cons:
         child hd             : WithQuery 
         child tl             : WithQueryList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type WithQueryList  = [WithQuery ]
-- cata
sem_WithQueryList :: WithQueryList  ->
                     T_WithQueryList 
sem_WithQueryList list  =
    (Prelude.foldr sem_WithQueryList_Cons sem_WithQueryList_Nil (Prelude.map sem_WithQuery list) )
-- semantic domain
type T_WithQueryList  = Catalog ->
                        TypeCheckingFlags ->
                        (Maybe Type) ->
                        ( WithQueryList ,WithQueryList )
data Inh_WithQueryList  = Inh_WithQueryList {cat_Inh_WithQueryList :: Catalog,flags_Inh_WithQueryList :: TypeCheckingFlags,imCast_Inh_WithQueryList :: (Maybe Type)}
data Syn_WithQueryList  = Syn_WithQueryList {annotatedTree_Syn_WithQueryList :: WithQueryList ,originalTree_Syn_WithQueryList :: WithQueryList }
wrap_WithQueryList :: T_WithQueryList  ->
                      Inh_WithQueryList  ->
                      Syn_WithQueryList 
wrap_WithQueryList sem (Inh_WithQueryList _lhsIcat _lhsIflags _lhsIimCast )  =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast 
     in  (Syn_WithQueryList _lhsOannotatedTree _lhsOoriginalTree ))
sem_WithQueryList_Cons :: T_WithQuery  ->
                          T_WithQueryList  ->
                          T_WithQueryList 
sem_WithQueryList_Cons hd_ tl_  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: WithQueryList 
              _lhsOoriginalTree :: WithQueryList 
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe Type)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe Type)
              _hdIannotatedTree :: WithQuery 
              _hdIoriginalTree :: WithQuery 
              _tlIannotatedTree :: WithQueryList 
              _tlIoriginalTree :: WithQueryList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
<<<<<<< HEAD
                   {-# LINE 22884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
<<<<<<< HEAD
                   {-# LINE 22890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22908 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22914 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22824 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22920 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22830 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
<<<<<<< HEAD
                   {-# LINE 22926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22836 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
<<<<<<< HEAD
                   {-# LINE 22932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
<<<<<<< HEAD
                   {-# LINE 22938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast 
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast 
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
sem_WithQueryList_Nil :: T_WithQueryList 
sem_WithQueryList_Nil  =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: WithQueryList 
              _lhsOoriginalTree :: WithQueryList 
              -- self rule
              _annotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 22956 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
<<<<<<< HEAD
                   {-# LINE 22962 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
<<<<<<< HEAD
                   {-# LINE 22968 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
<<<<<<< HEAD
                   {-# LINE 22974 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
=======
                   {-# LINE 22884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
>>>>>>> arnon
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
