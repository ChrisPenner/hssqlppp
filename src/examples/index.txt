Examples
========

All this code is currently available in the cabal source package,
recommended that you get the source:

~~~~~{.sh}
cabal unpack hssqlppp
~~~~~

To build one of the executables, rather than use cabal you could try something like:

~~~~~{.sh}
ghc -XDeriveDataTypeable -DPOSTGRES -hide-package hssqlppp -cpp -pgmPcpphs -optP--cpp -idevel:src:examples/chaos:examples/extensions/:examples/util/:tests/ --make examples/util/HsSqlPppUtil.lhs
~~~~~

Rough examples of parsing, type checking and quasi quoting generated
from the test files:

* [Parsing examples](../../ParserTests.html)
* [Type-checking examples](../../TypeCheckTests.html)
* [Quasiquotation examples](../../QuasiQuoteTests.html)

Command line demo of parsing and type checking:
[HsSqlPppUtil.lhs](util/HsSqlPppUtil.lhs.html)

[Wrappers](wrappers/index.txt.html) - demonstration of typesafe database
access from haskell - broken at the moment.

[Extensions](extensions/index.txt.html) - examples of using the
library to implement custom sql syntax, mainly uses quasi quotation.

[Chaos2010](chaos/index.txt.html) example database (for an unfinished
game) which uses the above extensions plus a few custom ones, shows
how to transform and load sql into postgresql.

Files:

* [util/DatabaseLoader.lhs](util/DatabaseLoader.lhs.html)
* [util/HsSqlPppUtil.lhs](util/HsSqlPppUtil.lhs.html)
* [util/Database/HsSqlPpp/Utils/C2HS.hs](util/Database/HsSqlPpp/Utils/C2HS.hs.html)
* [util/Database/HsSqlPpp/Utils/DBUtils.lhs](util/Database/HsSqlPpp/Utils/DBUtils.lhs.html)
* [util/Database/HsSqlPpp/Utils/DatabaseLoader.lhs](util/Database/HsSqlPpp/Utils/DatabaseLoader.lhs.html)
* [util/Database/HsSqlPpp/Utils/PPExpr.lhs](util/Database/HsSqlPpp/Utils/PPExpr.lhs.html)
* [util/Database/HsSqlPpp/Utils/PQ.chs](util/Database/HsSqlPpp/Utils/PQ.chs.html)
* [util/Database/HsSqlPpp/Utils/PQH.lhs](util/Database/HsSqlPpp/Utils/PQH.lhs.html)
