{-


This file contains the ast nodes, and the api functions to pass an ast
and get back type information.

It uses the Utrecht University Attribute Grammar system:

* http://www.cs.uu.nl/wiki/bin/view/HUT/AttributeGrammarSystem
* http://www.haskell.org/haskellwiki/The_Monad.Reader/Issue4/Why_Attribute_Grammars_Matter

The attr and sem definitions are in TypeChecking.ag, which is included
into this file.

These ast nodes are both used as the result of successful parsing, and
as the input to the type checker (and the output from the type
checker), and the pretty printer.

= compiling

use

uuagc  -dcfwsp --cycle --genlinepragmas AstInternal.ag

to generate a new AstInternal.hs from this file (cycle will check for
cycles - it's bad if you get any of these, and genlinepragmas mean
that you'll be able to view the original source ag positions when
there are errors or warnings compiling the generated hs file, which
you want much more often than not).

Depending on the alignment of the planets, you might need to use

uuagc  -dcfwsp AstInternal.ag

At the moment, genlinepragmas seems to break when you use where with
uuagc > 0.9.19.

(install uuagc with
cabal install uuagc
)

-}

{- | test
-}
MODULE {Database.HsSqlPpp.AstInternals.AstInternal}
{
    -- {-# LANGUAGE DeriveDataTypeable,RankNTypes,ScopedTypeVariables #-}
    --from the ag files:
    --ast nodes
    Statement (..)
   ,QueryExpr (..)
   ,WithQueryList
   ,WithQuery(..)
   ,FnBody (..)
   --,SetClause (..)
   ,TableRef (..)
   ,TableAlias(..)
   ,JoinExpr (..)
   ,JoinType (..)
   ,SelectList (..)
   ,SelectItem (..)
   ,CopySource (..)
   ,AttributeDef (..)
   ,RowConstraint (..)
   ,AlterTableAction(..)
   ,Constraint (..)
   ,TypeAttributeDef (..)
   ,ParamDef (..)
   ,VarDef (..)
   ,RaiseType (..)
   ,CombineType (..)
   ,Volatility (..)
   ,Language (..)
   ,TypeName (..)
   ,DropType (..)
   ,Cascade (..)
   ,Direction (..)
   ,Distinct (..)
   ,Natural (..)
   ,IfExists (..)
   ,Replace(..)
   ,RestartIdentity (..)
   ,ScalarExpr (..)
   ,DQIdentifier(..)
   ,IntervalField(..)
   ,ExtractField(..)
   ,FrameClause(..)
   ,InList (..)
   ,LiftFlavour(..)
   ,TriggerWhen(..)
   ,TriggerEvent(..)
   ,TriggerFire(..)
   ,StatementList
   ,ScalarExprListStatementListPairList
   ,ScalarExprListStatementListPair
   ,ScalarExprList
   ,ParamDefList
   ,AttributeDefList
   ,ConstraintList
   ,TypeAttributeDefList
   ,TypeNameList
   ,StringTypeNameListPair
   ,StringTypeNameListPairList
   ,ScalarExprStatementListPairList
   --,SetClauseList
   ,CaseScalarExprListScalarExprPairList
   ,MaybeScalarExpr
   ,TableRefList
   ,ScalarExprListList
   ,SelectItemList
   ,OnExpr
   ,RowConstraintList
   ,VarDefList
   ,ScalarExprStatementListPair
   ,CaseScalarExprListScalarExprPair
   ,ScalarExprDirectionPair
   ,ScalarExprDirectionPairList
   ,MaybeBoolExpr
   ,MaybeSelectList
   ,SetValue(..)
   ,AlterTableActionList
   -- typechecking
   ,typeCheckStatements
   ,typeCheckParameterizedStatement
   ,typeCheckScalarExpr
   ,fixUpIdentifiers
}

{
import Data.Maybe
import Data.List
import Control.Applicative
import Data.Data
import Data.Char
import Control.Monad.State

import Data.Generics.PlateData
import Debug.Trace


import Database.HsSqlPpp.AstInternals.TypeType
import Database.HsSqlPpp.AstInternals.TypeChecking.TypeConversion
import Database.HsSqlPpp.AstInternals.AstAnnotation
import Database.HsSqlPpp.AstInternals.Catalog.CatalogInternal
import Database.HsSqlPpp.AstInternals.TypeChecking.LocalBindings
import Database.HsSqlPpp.Utils.Utils
import Database.HsSqlPpp.AstInternals.TypeChecking.ErrorUtils

}

{-
================================================================================

SQL top level statements

everything is chucked in here: dml, ddl, plpgsql statements

-}

DATA Statement

--queries

    | QueryStatement ann:Annotation ex:QueryExpr

-- dml

    --table targetcolumns insertdata(values or select statement) returning
    | Insert ann:Annotation
             table : DQIdentifier
             targetCols : {[String]}
             insData : QueryExpr
             returning : MaybeSelectList
    --tablename setitems where returning
    | Update ann:Annotation
             table : DQIdentifier
             assigns : ScalarExprList --SetClauseList
             fromList : TableRefList
             whr : MaybeBoolExpr
             returning : MaybeSelectList
    --tablename, where, returning
    | Delete ann:Annotation
             table : DQIdentifier
             using : TableRefList
             whr : MaybeBoolExpr
             returning : MaybeSelectList
    --tablename column names, from
    | Copy ann:Annotation
           table : String
           targetCols : {[String]}
           source : CopySource
    --represents inline data for copy statement
    | CopyData ann:Annotation insData : String
    | Truncate ann:Annotation
               tables: {[String]}
               restartIdentity : RestartIdentity
               cascade : Cascade

-- ddl

    | CreateTable ann:Annotation
                  name : String
                  atts : AttributeDefList
                  cons : ConstraintList
    | AlterTable ann:Annotation
                 name : String
                 actions : AlterTableActionList
    | CreateSequence ann:Annotation
                     name:String
                     incr:Integer
                     min:Integer
                     max:Integer
                     start:Integer
                     cache:Integer
    | AlterSequence ann:Annotation
                    name:String
                    ownedBy: ScalarExpr
    | CreateTableAs ann:Annotation
                    name : String
                    expr : QueryExpr
    | CreateView ann:Annotation
                 name : String
                 expr : QueryExpr
    | CreateType ann:Annotation
                 name : String
                 atts : TypeAttributeDefList
    -- language name args rettype bodyquoteused body vol
    | CreateFunction ann:Annotation
                     name : String
                     params : ParamDefList
                     rettype : TypeName
                     rep : Replace
                     lang : Language
                     body : FnBody
                     vol : Volatility
    -- name type checkexpression
    | CreateDomain ann:Annotation
                   name : String
                   typ : TypeName
                   checkName: String
                   check : MaybeBoolExpr
    | CreateLanguage ann:Annotation
                     name:String
    | CreateTrigger ann:Annotation
                    name:String
                    wh : TriggerWhen
                    events: {[TriggerEvent]}
                    tbl : String
                    firing : TriggerFire
                    fnName : String
                    fnArgs : ScalarExprList
    -- ifexists (name,argtypes)* cascadeorrestrict
    | DropFunction ann:Annotation
                   ifE : IfExists
                   sigs : StringTypeNameListPairList
                   cascade : Cascade
    -- ifexists names cascadeorrestrict
    | DropSomething ann:Annotation
                    dropType : DropType
                    ifE : IfExists
                    names : {[String]}
                    cascade : Cascade
    | Assignment ann:Annotation
                 target : ScalarExpr
                 value : ScalarExpr
    | Return ann:Annotation
             value : MaybeScalarExpr
    | ReturnNext ann:Annotation
                 expr : ScalarExpr
    | ReturnQuery ann:Annotation
                  sel : QueryExpr
    | Raise ann:Annotation
            level : RaiseType
            message : String
            args : ScalarExprList
    | NullStatement ann:Annotation
    | Perform ann:Annotation
              expr : ScalarExpr
    | Execute ann:Annotation
              expr : ScalarExpr
    | ExecuteInto ann:Annotation
                  expr : ScalarExpr
                  targets : {[String]}
    | ForQueryStatement ann:Annotation
                        lb : {Maybe String}
                        var : ScalarExpr
                        sel : QueryExpr
                        sts : StatementList
    | ForIntegerStatement ann:Annotation
                          lb : {Maybe String}
                          var : ScalarExpr
                          from : ScalarExpr
                          to : ScalarExpr
                          sts : StatementList
    | LoopStatement ann:Annotation
                    lb : {Maybe String}
                    sts : StatementList
    | WhileStatement ann:Annotation
                     lb : {Maybe String}
                     expr : ScalarExpr
                     sts : StatementList
    | ContinueStatement ann:Annotation lb:{Maybe String}
    | ExitStatement ann:Annotation lb:{Maybe String}
    --variable, list of when parts, else part
    | CaseStatementSimple ann:Annotation
                    val : ScalarExpr
                    cases : ScalarExprListStatementListPairList
                    els : StatementList
    | CaseStatement ann:Annotation
                    cases : ScalarExprListStatementListPairList
                    els : StatementList
    --list is
    --first if (condition, statements):elseifs(condition, statements)
    --last bit is else statements
    | If ann:Annotation
         cases : ScalarExprStatementListPairList
         els : StatementList
    | Block ann:Annotation lb:{Maybe String} vars:VarDefList sts : StatementList

--misc

    | Set ann:Annotation name:String values:{[SetValue]}
    | Notify ann:Annotation name:String

-- =============================================================================

--Statement components

{

-- used for possibly dot qualified identifiers in e.g. table name
-- references
-- todo: start using this everywhere, lots of places which
-- use scalarexpr or string should be using this
}

DATA DQIdentifier | DQIdentifier ann:Annotation is:{[String]}



-- maybe this should be called relation valued expression?
DATA QueryExpr
    | Select ann:Annotation
             selDistinct : Distinct
             selSelectList : SelectList
             selTref : TableRefList
             selWhere : MaybeBoolExpr
             selGroupBy : ScalarExprList
             selHaving : MaybeBoolExpr
             selOrderBy : ScalarExprDirectionPairList
             selLimit : MaybeScalarExpr
             selOffset : MaybeScalarExpr
    | CombineSelect ann:Annotation
                    ctype : CombineType
                    sel1 : QueryExpr
                    sel2 : QueryExpr
    | Values ann:Annotation
             vll:ScalarExprListList
    | WithSelect ann : Annotation
                 withs : WithQueryList
                 ex : QueryExpr

TYPE WithQueryList = [WithQuery]
DATA WithQuery | WithQuery ann : Annotation
                           name : String
                           ex : QueryExpr

DATA FnBody | SqlFnBody ann:Annotation sts : StatementList
            | PlpgsqlFnBody ann:Annotation blk : Statement

DATA TableRef | Tref ann:Annotation
                     tbl:ScalarExpr
                     alias : TableAlias
              | JoinTref ann:Annotation
                         tbl : TableRef
                         nat : Natural
                         joinType : JoinType
                         tbl1 : TableRef
                         onExpr : OnExpr
                         alias : TableAlias
              | SubTref ann:Annotation
                        sel : QueryExpr
                        alias : TableAlias
              | FunTref ann:Annotation
                        fn:ScalarExpr
                        alias : TableAlias
{
data TableAlias = NoAlias
                | TableAlias String --alias:String
                | FullAlias String [String] -- alias:String cols:{[String]}
                  deriving (Show,Eq,Typeable,Data)
}

DATA JoinExpr | JoinOn ann:Annotation expr:ScalarExpr
              | JoinUsing ann:Annotation x:{[String]}

{
data JoinType = Inner | LeftOuter| RightOuter | FullOuter | Cross
                deriving (Show,Eq,Typeable,Data)
}

-- select columns, into columns

DATA SelectList | SelectList ann:Annotation items:SelectItemList into:ScalarExprList

DATA SelectItem | SelExp ann:Annotation ex:ScalarExpr
                | SelectItem ann:Annotation ex:ScalarExpr name:String

{
data CopySource = CopyFilename String
                | Stdin
                  deriving (Show,Eq,Typeable,Data)
}
--name type default null constraint

DATA AttributeDef | AttributeDef ann:Annotation
                                 name : String
                                 typ : TypeName
                                 def: MaybeScalarExpr
                                 cons : RowConstraintList

--Constraints which appear attached to an individual field

DATA RowConstraint | NullConstraint ann:Annotation name:String
                   | NotNullConstraint ann:Annotation name:String
                   | RowCheckConstraint ann:Annotation name:String expr:ScalarExpr
                   | RowUniqueConstraint ann:Annotation name:String
                   | RowPrimaryKeyConstraint ann:Annotation name:String
                   | RowReferenceConstraint ann:Annotation name:String
                                            table : String
                                            att : (Maybe String)
                                            onUpdate : Cascade
                                            onDelete : Cascade

--constraints which appear on a separate row in the create table

DATA Constraint | UniqueConstraint ann:Annotation name:String x:{[String]}
                | PrimaryKeyConstraint ann:Annotation name:String x:{[String]}
                | CheckConstraint ann:Annotation name:String expr:ScalarExpr
                  -- sourcecols targettable targetcols ondelete onupdate
                | ReferenceConstraint ann:Annotation
                                      name:String
                                      atts : {[String]}
                                      table : String
                                      tableAtts : {[String]}
                                      onUpdate : Cascade
                                      onDelete : Cascade

DATA TypeAttributeDef | TypeAttDef ann:Annotation
                                   name : String
                                   typ : TypeName

DATA AlterTableAction | AlterColumnDefault ann:Annotation
                                           nm : String
                                           def : ScalarExpr
                      | AddConstraint ann: Annotation
                                      con: Constraint
{
data SetValue
    = SetStr Annotation String
    | SetId Annotation String
    | SetNum Annotation Double
      deriving (Show,Eq,Typeable,Data)


data TriggerWhen = TriggerBefore | TriggerAfter
                   deriving (Show,Eq,Typeable,Data)
data TriggerEvent = TInsert| TUpdate | TDelete
                    deriving (Show,Eq,Typeable,Data)
data TriggerFire = EachRow | EachStatement
                   deriving (Show,Eq,Typeable,Data)
}

DATA ParamDef | ParamDef ann:Annotation name:String typ:TypeName
              | ParamDefTp ann:Annotation typ:TypeName

DATA VarDef | VarDef ann:Annotation
                     name : String
                     typ : TypeName
                     value : (Maybe ScalarExpr)
            | ParamAlias ann:Annotation
                         name : String
                         i : Integer
            | VarAlias ann:Annotation
                       name : String
                       aliased : String
{
data RaiseType = RNotice | RException | RError
                 deriving (Show,Eq,Typeable,Data)

data CombineType = Except | Union | Intersect | UnionAll
                   deriving (Show,Eq,Typeable,Data)

data Volatility = Volatile | Stable | Immutable
                  deriving (Show,Eq,Typeable,Data)

data Language = Sql | Plpgsql
                deriving (Show,Eq,Typeable,Data)
}

DATA TypeName | SimpleTypeName ann:Annotation tn:String
              | PrecTypeName ann:Annotation tn:String prec:Integer
              | Prec2TypeName ann:Annotation tn:String prec:Integer prec1:Integer
              | ArrayTypeName ann:Annotation typ:TypeName
              | SetOfTypeName ann:Annotation typ:TypeName
{
data DropType = Table
              | Domain
              | View
              | Type
                deriving (Show,Eq,Typeable,Data)

data Cascade = Cascade | Restrict
               deriving (Show,Eq,Typeable,Data)

data Direction = Asc | Desc
                 deriving (Show,Eq,Typeable,Data)

data Distinct = Distinct | Dupes
                deriving (Show,Eq,Typeable,Data)

data Natural = Natural | Unnatural
               deriving (Show,Eq,Typeable,Data)

data IfExists = Require | IfExists
                deriving (Show,Eq,Typeable,Data)

data Replace = Replace | NoReplace
               deriving (Show,Eq,Typeable,Data)

data RestartIdentity = RestartIdentity | ContinueIdentity
                       deriving (Show,Eq,Typeable,Data)

}
{-
================================================================================

ScalarExprs

Similarly to the statement type, all expressions are chucked into one
even though there are many restrictions on which expressions can
appear in different places.  Maybe this should be called scalar
expression?

-}
DATA ScalarExpr | IntegerLit ann:Annotation i:Integer
                | FloatLit ann:Annotation d:Double
                | StringLit ann:Annotation
                            value : String
                | TypedStringLit ann:Annotation
                                 tn : TypeName
                                 value : String
                | Interval ann:Annotation
                           value : String
                           field : IntervalField
                           prec : {Maybe Int}
                | Extract ann:Annotation
                          field : ExtractField
                          e : ScalarExpr
                | NullLit ann:Annotation
                | BooleanLit ann:Annotation b:Bool
                | PositionalArg ann:Annotation p:Integer
                | Placeholder ann:Annotation -- represents a '?'
                | Cast ann:Annotation
                       expr:ScalarExpr
                       tn:TypeName
                | Identifier ann:Annotation
                             i:String
                | QIdentifier ann:Annotation
                              qual:ScalarExpr
                              i:String
                -- bit hacky, preserve parens when they contain just an identifier
                -- or positional arg, so we can pretty print this since it is needed
                -- in some places for the pg parser
                {- | PIdentifier ann:Annotation
                              ex:ScalarExpr-}
                | Case ann:Annotation
                       cases : CaseScalarExprListScalarExprPairList
                       els : MaybeScalarExpr
                | CaseSimple ann:Annotation
                             value : ScalarExpr
                             cases : CaseScalarExprListScalarExprPairList
                             els : MaybeScalarExpr
                | Exists ann:Annotation
                         sel : QueryExpr
                | FunCall ann:Annotation
                          funName:String
                          args:ScalarExprList
                | InPredicate ann:Annotation
                              expr:ScalarExpr
                              i:Bool
                              list:InList
                | WindowFn ann:Annotation
                           fn : ScalarExpr
                           partitionBy : ScalarExprList
                           orderBy : ScalarExprList
                           dir : Direction
                           frm : FrameClause
                | ScalarSubQuery ann:Annotation -- scalar meaning scalar context not scalar valued...
                                 sel : QueryExpr
                | LiftOperator ann:Annotation
                               oper:String
                               flav:LiftFlavour
                               args:ScalarExprList
{
data LiftFlavour = LiftAny | LiftAll
                   deriving (Show,Eq,Typeable,Data)

data IntervalField = IntervalYear
                   | IntervalMonth
                   | IntervalDay
                   | IntervalHour
                   | IntervalMinute
                   | IntervalSecond
                   | IntervalYearToMonth
                   | IntervalDayToHour
                   | IntervalDayToMinute
                   | IntervalDayToSecond
                   | IntervalHourToMinute
                   | IntervalHourToSecond
                   | IntervalMinuteToSecond
                     deriving (Show,Eq,Typeable,Data)

data ExtractField = ExtractCentury
                  | ExtractDay
                  | ExtractDecade
                  | ExtractDow
                  | ExtractDoy
                  | ExtractEpoch
                  | ExtractHour
                  | ExtractIsodow
                  | ExtractIsoyear
                  | ExtractMicroseconds
                  | ExtractMillennium
                  | ExtractMilliseconds
                  | ExtractMinute
                  | ExtractMonth
                  | ExtractQuarter
                  | ExtractSecond
                  | ExtractTimezone
                  | ExtractTimezoneHour
                  | ExtractTimezoneMinute
                  | ExtractWeek
                  | ExtractYear
                    deriving (Show,Eq,Typeable,Data)

}

--todo: use liftoperator to implement inlist?
DATA InList | InList ann:Annotation exprs : ScalarExprList
            | InSelect ann:Annotation sel : QueryExpr

{
data FrameClause = FrameUnboundedPreceding
                 | FrameUnboundedFull
                 | FrameRowsUnboundedPreceding
                   deriving (Show,Eq,Typeable,Data)
}
{-

list of expression flavours from postgresql with the equivalents in this ast
pg                                here
--                                ----
constant/literal                  integerlit, floatlit, unknownstringlit, nulllit, boollit
column reference                  identifier
positional parameter reference    positionalarg
subscripted expression            funcall
field selection expression        identifier
operator invocation               funcall
function call                     funcall
aggregate expression              funcall
window function call              windowfn
type cast                         cast
scalar subquery                   scalarsubquery
array constructor                 funcall
row constructor                   funall

Anything that is represented in the ast as some sort of name plus a
list of expressions as arguments is treated as the same type of node:
FunCall.

This includes
symbol operators
regular function calls
keyword operators e.g. and, like (ones which can be parsed as normal
  syntactic operators)
unusual syntax operators, e.g. between
unusual syntax function calls e.g. substring(x from 5 for 3)
arrayctors e.g. array[3,5,6]
rowctors e.g. ROW (2,4,6)
array subscripting

list of keyword operators (regular prefix, infix and postfix):
and, or, not
is null, is not null, isnull, notnull
is distinct from, is not distinct from
is true, is not true,is false, is not false, is unknown, is not unknown
like, not like, ilike, not ilike
similar to, not similar to
in, not in (don't include these here since the argument isn't always an expr)

unusual syntax operators and fn calls
between, not between, between symmetric
overlay, substring, trim
any, some, all

Most of unusual syntax forms and keywords operators are not yet
supported, so this is mainly a todo list.

Keyword operators are encoded with the function name as a ! followed
by a string
e.g.
operator 'and' -> FunCall "!and" ...
see keywordOperatorTypes value in AstUtils.lhs for the list of
currently supported keyword operators.

-}

-- some list nodes, not sure if all of these are needed as separately
-- named node types

TYPE OnExpr = MAYBE JoinExpr
TYPE MaybeSelectList = MAYBE SelectList

TYPE TableRefList = [TableRef]
TYPE MaybeScalarExpr = MAYBE ScalarExpr
TYPE MaybeBoolExpr = MAYBE ScalarExpr

TYPE ScalarExprList = [ScalarExpr]
TYPE ScalarExprListList = [ScalarExprList]

-- TYPE SetClauseList = [SetClause]
TYPE AttributeDefList = [AttributeDef]
TYPE ConstraintList = [Constraint]
TYPE TypeAttributeDefList = [TypeAttributeDef]
TYPE ParamDefList = [ParamDef]
TYPE TypeNameList = [TypeName]
TYPE StringTypeNameListPair = (String, TypeNameList)
TYPE StringTypeNameListPairList = [StringTypeNameListPair]
TYPE ScalarExprListStatementListPair = (ScalarExprList,StatementList)
TYPE ScalarExprListStatementListPairList = [ScalarExprListStatementListPair]
TYPE ScalarExprStatementListPair = (ScalarExpr, StatementList)
TYPE ScalarExprStatementListPairList = [ScalarExprStatementListPair]
TYPE VarDefList = [VarDef]
TYPE SelectItemList = [SelectItem]
TYPE RowConstraintList = [RowConstraint]
TYPE CaseScalarExprListScalarExprPair = (ScalarExprList,ScalarExpr)
TYPE CaseScalarExprListScalarExprPairList = [CaseScalarExprListScalarExprPair]
TYPE StatementList = [Statement]
TYPE ScalarExprDirectionPair = (ScalarExpr,Direction)
TYPE ScalarExprDirectionPairList = [ScalarExprDirectionPair]
TYPE AlterTableActionList = [AlterTableAction]
-- Add a root data type so we can put initial values for inherited
-- attributes in the section which defines and uses those attributes
-- rather than in the sem_ calls

DATA Root | Root statements:StatementList
DERIVING Root: Show

-- use an expression root also to support type checking,
-- etc., individual expressions

DATA ScalarExprRoot | ScalarExprRoot expr:ScalarExpr
DERIVING ScalarExprRoot: Show

{-
================================================================================

=some basic bookkeeping

attributes which every node has
-}

SET AllNodes = Statement QueryExpr FnBody TableRef
               JoinExpr
               SelectList SelectItem AttributeDef RowConstraint
               TypeAttributeDef ParamDef VarDef Constraint
               TypeName
               ScalarExpr InList MaybeScalarExpr MaybeBoolExpr
               ScalarExprList ScalarExprListList
               AttributeDefList ConstraintList TypeAttributeDefList
               ParamDefList TypeNameList StringTypeNameListPair
               StringTypeNameListPairList
               StatementList ScalarExprListStatementListPair
               ScalarExprListStatementListPairList ScalarExprStatementListPair
               ScalarExprStatementListPairList VarDefList SelectItemList
               RowConstraintList CaseScalarExprListScalarExprPair
               CaseScalarExprListScalarExprPairList
               TableRefList TableRef OnExpr MaybeSelectList
               AlterTableAction
               ScalarExprDirectionPair
               ScalarExprDirectionPairList AlterTableActionList
               WithQueryList WithQuery DQIdentifier


DERIVING AllNodes: Show,Eq,Typeable,Data


INCLUDE "TypeChecking/TypeChecking.ag"

{-

================================================================================

used to use record syntax to try to insulate code from field changes,
and not have to write out loads of nothings and [] for simple selects,
but don't know how to create haskell named records from uuagc DATA
things

makeSelect :: Statement
makeSelect = Select Dupes (SelectList [SelExp (Identifier "*")] [])
                   Nothing Nothing [] Nothing [] Asc Nothing Nothing


================================================================================

= annotation functions

-}
{
{-
-- | Type check multiple asts, allowing type checking references in
--   later files to definitions in earlier files. This is probably
--   more straightforward if you parse the files then concatenate the
--   statementlists together before type checking rather than using
--   this function
typeCheckMany :: Catalog -> [StatementList] -> [StatementList]
typeCheckMany cat sts =
    annInt cat sts []
    where
      annInt e (s:ss) ress =
          let (e1,res) = typeCheck e s
          in annInt e1 ss (res:ress)
      annInt _ [] ress = reverse ress
-}

-- | Takes an ast, checks against catalog passed, and adds
--   annotations, including types, type errors, and statement info.
--   Returns the updated catalog as well as the annotated ast.
typeCheckStatements :: Catalog -> StatementList -> (Catalog,StatementList)
typeCheckStatements cat sts =
    let t = sem_Root (Root $ fixUpIdentifiers cat sts)
        ta = wrap_Root t Inh_Root {cat_Inh_Root = cat
                                  ,lib_Inh_Root = emptyBindings
                                  ,idenv_Inh_Root = emptyIDEnv}
        tl = annotatedTree_Syn_Root ta
        cat1 = producedCat_Syn_Root ta
    in case tl of
         Root r -> (cat1,r)

-- | Unfinished version of type check which can type check an
-- individual statement with ? or positional arg placeholders in
-- it. Will error if the statement isn't select, update, insert or
-- delete. For use in type checking embedded parameterized
-- statements. Does all typechecking and annotation that the regular
-- typecheck does.
typeCheckParameterizedStatement :: Catalog -> Statement -> Either String Statement
typeCheckParameterizedStatement cat st =
    case st of
      QueryStatement _ _ -> tc
      Insert _ _ _ _ _ -> tc
      Update _ _ _ _ _ _ -> tc
      Delete _ _ _ _ _ -> tc
      _ -> Left "requires select, update, insert or delete statement"
    where
      tc = let t = sem_Root (Root $ fixUpIdentifiers cat [st])
               ta = wrap_Root t Inh_Root {cat_Inh_Root = cat
                                         ,lib_Inh_Root = emptyBindings
                                         ,idenv_Inh_Root = emptyIDEnv}
               tl = annotatedTree_Syn_Root ta
               --cat1 = producedCat_Syn_Root ta
           in case tl of
                Root [st1] -> Right st1
                _ -> error "impossible happened in typeCheckPS!"


-- | Testing utility, mainly used to check an expression for type errors
-- or to get its type.
typeCheckScalarExpr :: Catalog -> ScalarExpr -> ScalarExpr
typeCheckScalarExpr cat ex =
    let t = sem_ScalarExprRoot (ScalarExprRoot ex)
        rt = (annotatedTree_Syn_ScalarExprRoot
              (wrap_ScalarExprRoot t Inh_ScalarExprRoot {cat_Inh_ScalarExprRoot = cat
                                                        ,lib_Inh_ScalarExprRoot = emptyBindings
                                                        ,idenv_Inh_ScalarExprRoot = emptyIDEnv}))
    in case rt of
         ScalarExprRoot e -> e

}

INCLUDE "TypeChecking/FixUpIdentifiers.ag"

{-

Future plans:

Investigate how much mileage can get out of making these nodes the
parse tree nodes, and using a separate ast. Hinges on how much extra
value can get from making the types more restrictive for the ast nodes
compared to the parse tree. Starting to think this won't be worth it.

Would like to turn this back into regular Haskell file, maybe could
use AspectAG instead of uuagc to make this happen?


-}
