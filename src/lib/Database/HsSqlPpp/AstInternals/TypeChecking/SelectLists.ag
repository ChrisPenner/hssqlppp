{-


This file contains the code that handles the select list part of a
select expression.

TODO: stop wrapping string,type lists in unnamedcompositetypes, pointless

-}

-- this is in the wrong file
--ATTR SelectExpression [||libUpdates : {[LocalBindingsUpdate]}]

ATTR MaybeSelectList [||listType : {[(String,Maybe Type)]}]

ATTR SelectItemList SelectList [||listType : {[(String,Maybe Type)]}]

{
{-data SiType = SiType (String,Maybe Type)
            | SiStarType [(String,Maybe Type)]-}
}

ATTR SelectItem [||itemType : {(String,Maybe Type)}]

ATTR SelectList [||libUpdates : {[LocalBindingsUpdate]}]

-- ATTR SelectItem [||columnName : String]


SEM SelectItem
    | SelExp
        loc.annotatedTree = SelExp @ann @ex.annotatedTree
    | SelectItem
        loc.annotatedTree = SelectItem @ann @ex.annotatedTree @name


SEM MaybeSelectList
    | Just lhs.listType = @just.listType
    | Nothing lhs.listType = []

SEM SelectItemList
    | Cons lhs.listType = @hd.itemType : @tl.listType
    | Nil lhs.listType = []


{-

a function returning setof can only be used in a select item list (i
think?), where it creates a kind of join so
(a,b,setof c,d) where c returns (c1,c2,...)
expands to
(a,b,c1,d)
(a,b,c2,d)
(a,b,...,d)
so the type of that column is the type wrapped with setof

-}
SEM SelectItem
    | SelExp
        lhs.itemType = ("", Nothing)
    | SelectItem
        lhs.itemType = (@name, unwrapSetof `fmap` @ex.uType)

{
unwrapSetofs :: [(String,Type)] -> [(String,Type)]
unwrapSetofs = map (\(n,t) -> (n, unwrapSetof t))

unwrapSetof :: Type -> Type
unwrapSetof (SetOfType u) = u
unwrapSetof v = v

}


SEM SelectList
    | SelectList
        lhs.listType = @items.listType
        loc.intoFroms : {E ([(String,Type)],[(String,Type)])}
        loc.intoFroms =
          -- get the name and type of the assigning to identifiers
          -- and the type of the assigning from vars
          returnWhen (@into.originalTree == []) ([],[]) $ do
          -- special case when the intoTypes is a single composite type: missing
          it <- lmt intoTypes
          let ft = fromMaybe [] $ liftList @items.listType
          return (it,ft)
          where
            intoTypes :: Maybe [(String,Type)]
            intoTypes = do
                        ts <- sequence @into.uType
                        let ns = map getName @into.originalTree
                        return $ zip ns ts
        loc.tpe =
            returnWhen (@into.originalTree == []) () $ do
            (it,ft) <- @loc.intoFroms
            checkAssignmentsValid @lhs.cat (map snd ft) (map snd it)

        lhs.libUpdates =
            maybe [] id $ do
            _ <- etmt @loc.tpe
            (it,ft) <- etmt @loc.intoFroms
            -- not complete, we only cope with situation when
            -- assigning to a single record type on its own
            return $ case it of
              [(n,PgRecord _)] -> [LBIds "set record actual fields from select into"
                                         Nothing
                                         [(n,PgRecord $ Just $ CompositeType ft)]]
              _ -> []

{-
somewhere this has gone wrong.
we need @items.listType to be maybe [(String,Maybe Type)]
not [(String,Type)]
this is only so we can give better error messages
it doesn't make any difference when it type checks

we need the outer maybe to say the types feeding in have gone
completely wrong, so don't add any more errors

we need the maybes on the types to keep the columns lined up, so that
e.g. if we have

select t1,typerror,t3 into a,b,c ...

we don't get weird type errors as it tries to assign to the wrong
vars,

-}


        lhs.annotatedTree = addTypeErrors (tes @loc.tpe) $
                            SelectList @ann
                                       @items.annotatedTree
                                       @into.annotatedTree

--[(@var,@loc.selType)]
