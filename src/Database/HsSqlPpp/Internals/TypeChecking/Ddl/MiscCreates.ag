{-


This file contains the ddl checking, apart from create function and
create table which have their own files.

= create view

pretty simple, just forwards the select expression type

-}

SEM Statement
    | CreateView
        loc.tpe = Right $ Pseudo Void
        loc.backTree = CreateView @ann @name.originalTree @colNames @expr.annotatedTree
        loc.catUpdates =
            maybe [] (\a -> [CatCreateView (getTName @name.originalTree) a]) @expr.uType
        loc.statementType = Nothing

{-
================================================================================

= create type

might move this to create table since they have a fair bit in common

main shortcomings are the names and types aren't checked

-}

ATTR TypeAttributeDef [||attrName : String
                         namedType : {Maybe Type}]

SEM TypeAttributeDef
    | TypeAttDef
        lhs.attrName = ncStr @name
        lhs.namedType = @typ.namedType

ATTR TypeAttributeDefList [||attrs : {[(String, Maybe Type)]}]

SEM TypeAttributeDefList
    | Cons lhs.attrs = (@hd.attrName, @hd.namedType) : @tl.attrs
    | Nil lhs.attrs = []

SEM Statement
    | CreateType
        loc.tpe = Right $ Pseudo Void
        loc.attrs = mapMaybe okAt @atts.attrs
                    where
                      okAt (s, Just t) = Just (s,t)
                      okAt (_,Nothing) = Nothing
        loc.backTree = CreateType @ann @name.originalTree @atts.annotatedTree
        loc.statementType = Nothing
        loc.catUpdates = [CatCreateComposite (getTName @name.originalTree) @loc.attrs]

{-

= create domain

-}

SEM Statement
    | CreateDomain
        loc.tpe = Right $ Pseudo Void
        loc.backTree = CreateDomain @ann @name.originalTree @typ.annotatedTree @constraintName @check.annotatedTree
        loc.statementType = Nothing
        loc.catUpdates = maybe [] (\t -> [CatCreateDomain (DomainType (getTName @name.originalTree)) t]) @typ.namedType
        --allow refering to value as 'value' in check expression
        check.lib = either (const @lhs.lib) id $ do
                    nt <- lmt @typ.namedType
                    lbUpdate @lhs.cat
                      (LBIds "domain check value" Nothing [("value", nt)])
                      @lhs.lib

SEM Statement
    | CreateLanguage
        loc.tpe = Right $ Pseudo Void
        loc.backTree = CreateLanguage @ann @name
        loc.statementType = Nothing
        loc.catUpdates = [CatCreateFunction FunName "plpgsql_call_handler" [] (Pseudo LanguageHandler) False
                         ,CatCreateFunction FunName "plpgsql_validator" [ScalarType "oid"] (Pseudo Void) False]
