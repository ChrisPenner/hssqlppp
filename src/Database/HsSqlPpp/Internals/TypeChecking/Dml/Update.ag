{-

================================================================================

= update

check the set clause assignments are ok, and inject ids into the where part

-}
{
makeTrefLib :: Catalog
            -> SQIdentifier
            -> Maybe ([(String,Type)],[(String,Type)])
            -> E LocalBindings
makeTrefLib cat si tbUType = Right $ createLocalBindings $ do
             let n = getTName si
             -- public and pg internal fields
             (pu,pr) <- tbUType
             return [(n,map (second Just) pu)
                    ,(n,map (second Just) pr)]

}
SEM Statement
    | Update
        loc.tpe = Right $ Pseudo Void
        -- todo: add tests and code to check the assign targets are columns
        -- or rows of columns
        --assigns.attrs = @loc.attrs

        loc.statementType =
              do
              pt <- sequence $ getPlaceholderTypes @assigns.annotatedTree
                               ++ getPlaceholderTypes @whr.annotatedTree
              return (pt,fromMaybe [] $ liftList @returning.listType)

        loc.backTree = Update @ann
                              @table.tbAnnotatedTree
                              @assigns.annotatedTree
                              @fromList.annotatedTree
                              @whr.annotatedTree
                              @returning.annotatedTree
        loc.catUpdates = []

-- local identifier bindings: pass the table attribute names and types
-- into the where expression, and the set clause expressions

        loc.lib =
             either (const @lhs.lib) id $ do
               makeTrefLib @lhs.cat @table.annotatedTree @table.tbUType
        whr.lib = @loc.lib
        assigns.lib = @loc.lib
        returning.lib = @loc.lib

-- typecheck the targets and assignments in the set clauses

ATTR SetClauseList SetClause [tbName:String||]
SEM Statement
    | Update
        assigns.tbName = getTName @table.annotatedTree

SEM SetClause
    | SetClause
        loc.targType : {E Type}
        loc.targType = case lookupLocalBinding @lhs.lib @lhs.tbName @setTarget of
                              Right Nothing -> Left []
                              Right (Just t) -> Right t
                              Left e -> Left e
        loc.e : {E ()}
        loc.e = do
                tt <- @loc.targType
                exType <- lmt @ex.uType
                checkAssignmentValid @lhs.cat exType tt
        ex.expectedType = etmt @loc.targType
        loc.backTree = SetClause @ann @setTarget @ex.annotatedTree
    | MultiSetClause
        loc.targType : {E Type}
        loc.targType =
            do
            let etargTypes :: [E (Maybe Type)]
                etargTypes = map (lookupLocalBinding @lhs.lib @lhs.tbName) @setTargets
            concatLefts etargTypes
            targTypes <- lmt $ sequence $ rights etargTypes
            return $ AnonymousRecordType targTypes
        loc.e = do
                tt <- @loc.targType
                exType <- lmt @ex.uType
                checkAssignmentValid @lhs.cat exType tt
        ex.expectedType = etmt @loc.targType
        loc.backTree = MultiSetClause @ann @setTargets @ex.annotatedTree

SEM SetClause
    | SetClause MultiSetClause
        lhs.annotatedTree =
            updateAnnotation
                (\a -> a {errs = errs a ++ tes @loc.e})
                @loc.backTree
