{-

This code resolves and disambiguates the identifiers (and a few other
bits and pieces).
e.g. select a,b from t -> select t.a, t.b from t;

Apart from adding range qualifiers to all identifiers in select lists,
it also:


adds range qualifiers to identifiers in: where, group by, having,
  order by
expands * at top level in select lists
adds explicit column names in select lists (select x as x...)
adds explicit table alias to all trefs, subqueries
makes sure every table alias is unique across the entire query.

provides type errors:
unrecognised id
unrecognised qualifier
ambiguous reference

saves the original bits and pieces to provide better error messages

[error checking not currently implemented, saving original bits not
currently implemented]

If e.g. order by 3,1 like syntax is needed, then this can be fixed up
here also.

We need the the sources of identifiers from the catalog: tables,
views, functions.

Identifiers are qualified straightforwardly in:

select lists
wheres
group bys
havings
order bys

All of the above use the same environment which comes out of the top
level trefs in a statement.

Identifiers in on expressions in joins need to be fixed up also, they
use an environment which is local to that join.

Identifiers in a using join aren't changed, since they refer to either
table.

How exactly is the environment updated?

Vanilla tref, subtref and trefun all set the exact environment.

For joins: the two environments are combined (this goes into the
onexpr). If there is a table name alias, then the aliases are
replaced. If there are column aliases as well, then the whole lot gets
replaced with these.

===================================================

= environment: data type, read api, update api

-}

{

data IDEnv = IDEnv [(String, [String])]
             deriving Show
emptyIDEnv :: IDEnv
emptyIDEnv = IDEnv []

qualifyID :: IDEnv -> String -> Maybe (String,String)
qualifyID (IDEnv env) i =
  q env i
  where
    q [] _ = Nothing
    q ((t,cs):es) i' =
       if i' `elem` cs
       then Just (t,i')
       else q es i'

makeIDEnv :: String -- range qualifier
          -> [String] -- attribute names
          -> IDEnv
makeIDEnv t c = IDEnv [(t,c)]

makeIDEnvP :: [(String,[String])] -> IDEnv
makeIDEnvP x  = IDEnv x

unimplementedIDEnv :: IDEnv
unimplementedIDEnv = IDEnv []

joinIDEnvs :: IDEnv -> IDEnv -> IDEnv
joinIDEnvs (IDEnv a) (IDEnv b) = IDEnv $ a ++ b

expandStar :: IDEnv -> Maybe String --qualifier
           -> [(String,String)]
expandStar (IDEnv es) Nothing =
  flip concatMap es $ \(t,cs) -> map (t,) cs
expandStar (IDEnv es) (Just t) =
  maybe [(t,"*")] (map (t,)) $ lookup t es


}

{-

= Creating environments

environments are created in trefs, and also select lists (to support
subtref).

-}


ATTR SelectList
         [
         |
         | cidenv : IDEnv
         ]

SEM SelectList
    | SelectList lhs.cidenv =
        makeIDEnv "" $ flip map @items.fixedUpIdentifiersTree
                         $ \(SelectItem _ _ n) -> n


SEM ScalarExpr
    | Identifier
        lhs.fixedUpIdentifiersTree =
            case qualifyID @lhs.idenv @i of
              Nothing -> Identifier @ann @i
              Just (t,i) -> QIdentifier @ann (Identifier @ann t) i

    | QIdentifier
        lhs.fixedUpIdentifiersTree =
          QIdentifier @ann @qual.originalTree @i

SEM SelectItemList
    | Cons lhs.fixedUpIdentifiersTree = @hd.seIdTree ++ @tl.fixedUpIdentifiersTree
    | Nil lhs.fixedUpIdentifiersTree = []

ATTR SelectItem [
                |
                | seIdTree : {[SelectItem]}
                ]

SEM SelectItem
    | SelExp lhs.seIdTree
        = case @ex.fixedUpIdentifiersTree of
            Identifier a "*" -> let s = expandStar @lhs.idenv Nothing
                                    in if null s
                                       then [addSIAlias $ SelExp @ann @ex.fixedUpIdentifiersTree]
                                       else makeSelExps @ann a a s
            QIdentifier a0 (Identifier a1 q) "*" ->
               let s = expandStar @lhs.idenv $ Just q
               in if null s
                  then [addSIAlias $ SelExp @ann @ex.fixedUpIdentifiersTree]
                  else makeSelExps @ann a0 a1 s
            _ -> [addSIAlias $ SelExp @ann @ex.fixedUpIdentifiersTree]

    | SelectItem lhs.seIdTree
        = [SelectItem @ann @ex.fixedUpIdentifiersTree @name]

{

makeSelExps :: Annotation -> Annotation -> Annotation -> [(String,String)] -> [SelectItem]
makeSelExps sea a0 a1 is =
  flip map is $ \(q,c) -> addSIAlias $ SelExp sea $ QIdentifier a0 (Identifier a1 q) c

addSIAlias :: SelectItem -> SelectItem
addSIAlias s@(SelectItem _ _ _) = s
addSIAlias (SelExp ann ex) = SelectItem ann ex $ getColName ex
  where
    getColName (Identifier _ i) = i
    getColName (QIdentifier _ _ i) = i
    getColName (FunCall _ f _) | not (isOperatorName f) = f
    getColName (Cast _ _ (SimpleTypeName _ tn)) = tn
    getColName (WindowFn _ (FunCall _ f _) _ _ _ _) = f
    getColName _ = "?column?"

}

SEM QueryExpr
    | Select
        lhs.fixedUpIdentifiersTree =
          Select @ann
                 @selDistinct
                 @selSelectList.fixedUpIdentifiersTree
                 @selTref.fixedUpIdentifiersTree
                 @selWhere.fixedUpIdentifiersTree
                 @selGroupBy.fixedUpIdentifiersTree
                 @selHaving.fixedUpIdentifiersTree
                 @selOrderBy.fixedUpIdentifiersTree
                 @selLimit.fixedUpIdentifiersTree
                 @selOffset.fixedUpIdentifiersTree

{-
some rules for order by:

can reference the same columns going into the select list in
expressions
can reference an output column by a single number
can reference an output column by its alias (overrides same named
column into select list)

this needs fixing

-}

{-

= Passing environments around

Passing up:
* through nested trefs
* from trefs to selects
* from select lists -> select -> wrapping subtref
-}

ATTR QueryExpr --  WithQuery WithQueryList
         [
         |
         | cidenv : IDEnv
         ]

SEM QueryExpr
    | Select lhs.cidenv = @selSelectList.cidenv
    | CombineQueryExpr lhs.cidenv = @sel1.cidenv
    | Values lhs.cidenv = unimplementedIDEnv
    | WithQueryExpr lhs.cidenv = @ex.cidenv

{-SEM QueryExpr
    | WithSelect ex.idenv = showIt "****withsidenv****" @withs.cidenv

SEM WithQueryList
    | Cons lhs.cidenv = joinIDEnvs @hd.cidenv @tl.cidenv
    | Nil lhs.cidenv = emptyIDEnv

SEM WithQuery
    | WithQuery lhs.cidenv = let IDEnv x = @ex.cidenv
                             in IDEnv $ flip map x $ \(_,cs) -> (@name,cs)
-}


{-

== Passing down

* from jointref to onexpr
* from select to (select list, where, group by, having, order by
* through scalar expression trees

-}

ATTR Root AllNodes ScalarExprRoot
         [ idenv : IDEnv
         |
         |
         ]

-- this is where the environment from the top level tref in a query
-- expression is sent back down into the select list, where, etc.

SEM QueryExpr
    | Select -- source the ids from the tref and the surrounding env
             -- this is to support correlated subqueries
             -- can only access correlated ids in where or having
             loc.trefEnv = makeIDEnvP @selTref.trefIDs
             loc.includeCorrelations = joinIDEnvs @lhs.idenv @loc.trefEnv
             selSelectList.idenv = @loc.trefEnv
             selWhere.idenv = @loc.includeCorrelations
             selGroupBy.idenv = @loc.trefEnv
             selHaving.idenv = @loc.includeCorrelations
             selOrderBy.idenv = @loc.trefEnv

{-

= Accessing environments

IDEnv is used to fix up identifiers in scalar expressions.

For adding qualifiers, all the identifiers in a scalar expression are
updated the same.

The roots are:
Select.selSelectList -> SelectItemList -> (SelEx,SelectItem).ex
Select.selWhere MaybeBoolExpression
Select.selGroupBy -> ExpressionList
Select.selHaving -> MaybeBoolExpression
Select.setOrdereBy -> ExpressionDirectionPairList
JoinedTref.onExpr

-}

{



}
{-

don't want to fiddle with all the identifiers in an ast, only those in
the correct positions. So fixedUpIdentifiersTree defaults to not
changing anything, and in the places it should switch to adjusting the
identifiers, newFixedUpIdentifiersTree is used instead

-}
ATTR Root ScalarExprRoot AllNodes [
                   |
                   | fixedUpIdentifiersTree : SELF
                     --newFixedUpIdentifiersTree : SELF -- this is used to adjust identifiers by qualifying them where neccessary
                   ]

{
-- | transform the tree by converting * to explicit lists of columns and adding qualifiers to all column references
fixUpIdentifiers :: Catalog -> [Statement] -> [Statement]
fixUpIdentifiers cat sts =
    let t = sem_Root (Root sts)
        ta = wrap_Root t Inh_Root {cat_Inh_Root = cat
                                  ,lib_Inh_Root = emptyBindings
                                  ,idenv_Inh_Root = emptyIDEnv}
        tl = fixedUpIdentifiersTree_Syn_Root ta
    in case tl of
         Root r -> countHack r

fixUpIdentifiersSE :: Catalog -> ScalarExpr -> ScalarExpr
fixUpIdentifiersSE cat sts =
    let t = sem_ScalarExprRoot (ScalarExprRoot sts)
        ta = wrap_ScalarExprRoot t Inh_ScalarExprRoot {cat_Inh_ScalarExprRoot = cat
                                  ,lib_Inh_ScalarExprRoot = emptyBindings
                                  ,idenv_Inh_ScalarExprRoot = emptyIDEnv}
        tl = fixedUpIdentifiersTree_Syn_ScalarExprRoot ta
    in case tl of
         ScalarExprRoot r -> countHack r

fixUpIdentifiersQE :: Catalog -> QueryExpr -> QueryExpr
fixUpIdentifiersQE cat qe =
    let [QueryStatement _ qe'] = fixUpIdentifiers cat [QueryStatement emptyAnnotation qe]
    in countHack qe'

-- small hack to convert count(*) into count(True). Should be fixed when
-- a more general approach to aggregates is written

countHack :: Data a => a -> a
countHack = transformBi $ \x -> case x of
              FunCall a "count" [Identifier ia "*"] ->
                FunCall a "count" [BooleanLit ia True]
              x1 -> x1

}


{-
===============================================

tref ids and aliases

-}

ATTR TableRef TableRefList [|| trefIDs : {[(String,[String])]}]

SEM TableRefList
    | Cons lhs.trefIDs = @hd.trefIDs ++ @tl.trefIDs
    | Nil lhs.trefIDs = []

SEM TableRef
    | Tref (lhs.trefIDs,lhs.fixedUpIdentifiersTree) =
        let tn = getTName @tbl.fixedUpIdentifiersTree
            ids = case catCompositePublicAttrs @lhs.cat relationComposites tn of
                     Right attrs -> [(tn, map fst attrs)]
                     Left _ -> [(tn,[])]
            (trs,al) = doAlias @alias.annotatedTree ids
        in (trs,Tref @ann @tbl.fixedUpIdentifiersTree al)

    | SubTref (lhs.trefIDs,lhs.fixedUpIdentifiersTree) =
        let IDEnv x = @sel.cidenv
            (trs,al) = doAlias @alias.annotatedTree x
        in (trs, SubTref @ann @sel.fixedUpIdentifiersTree al)

    | FunTref (lhs.trefIDs,lhs.fixedUpIdentifiersTree) =
        let (FunCall _ f _) = @fn.fixedUpIdentifiersTree
            (trs,al) = doAlias @alias.annotatedTree [(f,[f])] -- needs fixing for table returning functions
        in (trs,FunTref @ann @fn.fixedUpIdentifiersTree al)

    | JoinTref
        lhs.trefIDs = @loc.trefIDs
        onExpr.idenv = IDEnv @loc.trefIDs
{-
got two lists of trefids from the two tables in the join
[(qualified,[ids])]
step one:
get the join ids:
if natural, then this is the intersection of the ids from the first and second
not going to worry about error checking for now

step two:
to create the qualification lookups and star expansions:
want the join keys with the qualifiers from the first table
then the non join keys from the first table
then the non join keys from the second table

-}

        (loc.trefIDs,lhs.fixedUpIdentifiersTree) =
          let -- create a list of unqualified join id names
              jids = case (@nat,@onExpr.fixedUpIdentifiersTree) of
                       (Natural,_) -> intersect (concatMap snd @tbl.trefIDs)
                                                (concatMap snd @tbl1.trefIDs)
                       (_,Just (JoinUsing _ fs)) -> fs
                       _ -> []
              -- qualify these ids using the qualifiers from the first table
              qjids = filter (not . null . snd)
                      $ flip map @tbl.trefIDs
                      $ \(a,b) -> (a, filter (`elem` jids) b)
              -- get the non join ids from the first table
              -- want to filter out empty lists e.g for semi joins
              njtblids = filter (not . null . snd)
                         $ flip map @tbl.trefIDs
                         $ \(a,b) -> (a, filter (`notElem` jids) b)
              -- non join ids for second table
              njtbl1ids = filter (not . null . snd)
                          $ flip map @tbl1.trefIDs
                          $ \(a,b) -> (a, filter (`notElem` jids) b)
              (trs,al) = doAlias @alias.annotatedTree $ qjids ++ njtblids ++ njtbl1ids
          in (trs, JoinTref @ann @tbl.fixedUpIdentifiersTree
                            @nat @joinType @tbl1.fixedUpIdentifiersTree
                            @onExpr.fixedUpIdentifiersTree al)
{
doAlias :: TableAlias -> [(String,[String])] -> ([(String,[String])],TableAlias)
doAlias (NoAlias a) [] = ([],NoAlias a)
doAlias (NoAlias a) cs@((t,_):ts) = if all (==t) $ map fst ts
                                then (cs,FullAlias a t $ concatMap snd cs)
                                else (cs,NoAlias a)
doAlias (TableAlias a t) cs = let cs' = concatMap snd cs
                              in ([(t, cs')], FullAlias a t cs')
doAlias f@(FullAlias _ t cs) _ = ([(t,cs)], f)
}
