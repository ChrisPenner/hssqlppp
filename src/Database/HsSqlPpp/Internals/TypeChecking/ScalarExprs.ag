{-

type checking scalar exprs

annotations to get are the type and type errors, and the implicit cast
The implicit cast is determined by the parent node and comes through
in an attribute

the implicit cast says if an implicit cast is used, what type is being
cast to.

not applicable: parameterizedstatementtype, catalog update

plus also store the matched functionprototype for functions. Is this
to help with getting the type of ? placeholders, and for inserting

-}

sem ScalarExpr
    | NumberLit StringLit NullLit BooleanLit TypedStringLit Interval
      Extract PositionalArg Placeholder Cast Star QStar Identifier
      QIdentifier Case CaseSimple Exists App AggregateApp
      WindowApp InPredicate LiftApp ScalarSubQuery --AntiScalarExpr
        ann.tpe = @loc.tpe
{-
each ctor has its own typechecking code

this sets loc.tpe with either the succesfully determined type, or the
type errors. The typechecking is shortcircuited so that if a node
needs the type of another node which is unable to type check, then no
additional type errors are produced, this is represented in the
annotation for the type as Nothing, and in loc.tpe as Left []

-}



sem ScalarExpr
    | BooleanLit
        loc.tpe = Right $ typeBool


-- temp
sem ScalarExpr
    | NumberLit StringLit NullLit TypedStringLit Interval
      Extract PositionalArg Placeholder Cast Star QStar Identifier
      QIdentifier Case CaseSimple Exists App AggregateApp
      WindowApp InPredicate LiftApp ScalarSubQuery AntiScalarExpr
        loc.tpe = Left []
