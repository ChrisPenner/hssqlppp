{-

type checking scalar exprs

annotations to get are the type and type errors, and the implicit cast
The implicit cast is determined by the parent node and comes through
in an attribute

the implicit cast says if an implicit cast is used, what type is being
cast to.

not applicable: parameterizedstatementtype, catalog update

plus also store the matched functionprototype for functions. Is this
to help with getting the type of ? placeholders, and for inserting

-}

sem ScalarExpr
    | NumberLit StringLit NullLit BooleanLit TypedStringLit Interval
      Extract PositionalArg Placeholder Cast Star QStar Identifier
      QIdentifier Case CaseSimple Exists App AggregateApp
      WindowApp InPredicate LiftApp ScalarSubQuery --AntiScalarExpr
        ann.tpe = @loc.tpe
        lhs.upType = either (const Nothing) Just @loc.tpe

attr ScalarExpr
  inh downEnv :: Environment -- the environment from the parent
  syn upType :: {Maybe Type} -- the type of this node made available to the parent node


-- collect the uptypes for a list of scalarexprs

attr ScalarExprList
  inh downEnv :: Environment
  syn upTypes :: {[Maybe Type]}

sem ScalarExprList
    | Cons lhs.upTypes = @hd.upType : @tl.upTypes
    | Nil lhs.upTypes = []


{-
each ctor has its own typechecking code

this sets loc.tpe with either the succesfully determined type, or the
type errors. The typechecking is shortcircuited so that if a node
needs the type of another node which is unable to type check, then no
additional type errors are produced, this is represented in the
annotation for the type as Nothing, and in loc.tpe as Left []

not sure it's worth the indirection of writing to loc.tpe then to
ann.tpe

-}

{-

------------------------------------------------

simple literals

-}

sem ScalarExpr
    | BooleanLit
        loc.tpe = Right typeBool

    | NumberLit
        -- numbers - a bit hacky, maybe should follow haskell
        -- and represent as integers and rationals instead of strings
        -- here just sets as int if there is no decimal place
        -- probably the support for different syntax for numbers
        -- needs to improve a lot then this won't be possible any
        -- more (e.g. 10e-5)
        loc.tpe = Right $ if all (`elem` @loc.digChars) @d
                          then typeInt
                          else typeNumeric
        loc.digChars = concatMap show [(0::Int)..9]

    | StringLit
        -- string lit type comes from the context
        loc.tpe = Right UnknownType
    -- I think a null has the same type resolution as an unknown string lit
    | NullLit
         loc.tpe = Right UnknownType

{-

----------------------------------
simplish ctors

-}

    | TypedStringLit Cast
         loc.tpe = maybe (Left []) Right @tn.namedType
    | Interval
         loc.tpe = Right $ ScalarType "interval"
    | Extract
         loc.tpe = -- check the argument is a date
                   do
                   x <- maybe (Left []) Right @e.upType
                   if x == typeDate
                     then Right typeFloat8
                     else Left [NoMatchingOperator "extract" [x]]
    | Placeholder
         loc.tpe = Right UnknownType
{-

---------------------------------------
identifier

-}
    | Identifier
         loc.tpe = envLookupIdentifier [@i] @lhs.downEnv



{-

---------------------------------------

op calls, fn calls, etc.

-}

    | App
         loc.tpe = do
                   -- get the types of the arguments
                   -- then lookup in TypeConversion.matchApp
                   tys <- mapM (maybe (Left []) Right) @args.upTypes
                   let Name _ ns = @funName.originalTree
                   (_,rt) <- matchApp @lhs.cat ns tys
                   return rt

{-

fallback for unimplemented ctors

-}

-- temp
sem ScalarExpr
    | PositionalArg Star QStar
      QIdentifier Case CaseSimple Exists AggregateApp
      WindowApp InPredicate LiftApp ScalarSubQuery AntiScalarExpr
        loc.tpe = Left []
