
-- upenv is the environment produced by the tablerefs

attr TableRefList
     syn upEnv :: Environment

attr TableRef
     syn upEnv :: Environment

-- combine a tref list using cross joins

sem TableRefList
  | Nil lhs.upEnv = emptyEnvironment
  | Cons
      lhs.upEnv = if isEmptyEnv @tl.upEnv
                  then @hd.upEnv
                  else --problem: where to put the error?
                         either (error . show) id $
                         createJoinTrefEnvironment @lhs.cat @hd.upEnv @tl.upEnv $ Just []


-- boilerplate: pass any error from the env to the annotation
-- pass any successful env in the upEnv
sem TableRef
  | Tref JoinTref SubTref FunTref
      loc.eEnv :: {Either [TypeError] Environment}
      -- pass any errors to the annotation
      ann.tpe = either Left (const $ Left []) @loc.eEnv
      -- todo: what to do here?
      lhs.upEnv = either (const emptyEnvironment) id @loc.eEnv

-- actual environment creation - this is the interesting bit in this file
sem TableRef
  | Tref
      -- if the referenced table doesn't exist, want to attach the error
      -- only to the name node. So this code should be fixed to get a Maybe [NameComponent]
      -- attribute from the @tbl or something
      loc.eEnv = envCreateTrefEnvironment @lhs.cat (nameComponents @tbl.originalTree)
      tbl.tpe = Left []

  | JoinTref
      loc.eEnv = createJoinTrefEnvironment @lhs.cat
                   @tbl0.upEnv @tbl1.upEnv
                   $ case (@joinType,@onExpr.originalTree) of
                      -- natural join
                      (x,Nothing) | x /= Cross -> Nothing
                      -- using join
                      (_,Just (JoinUsing _ nms)) -> Just nms
                      -- cross join
                      _ -> Just []
      --onExpr.downEnv2 = either emptyEnvironment id @loc.eEnv
      onExpr.downEnv = emptyEnvironment
  | SubTref
      loc.eEnv = maybe (Left []) id
                 $ fmap envSelectListEnvironment @sel.upType


-- temp until code written
sem TableRef
  | FunTref
      loc.eEnv = Left []

sem TableAlias
    | NoAlias TableAlias FullAlias
        ann.tpe = Left []

attr OnExpr
  inh downEnv :: Environment

