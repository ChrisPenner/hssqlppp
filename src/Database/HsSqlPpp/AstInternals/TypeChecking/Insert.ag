{-
================================================================================

= insert

check the insert data is the correct type. Doesn't cope with columns
with default values at the moment.

-}

SEM Statement
    | Insert
        loc.tpe = either Left (const $ Right $ Pseudo Void) @loc.columnTypes
        loc.statementType = Just (catMaybes $ getPlaceholderTypes @insData.annotatedTree
                                 ,@returning.listType)
        -- column types is the name,type list for the columns
        -- mentioned in the select expression being inserted
        loc.columnTypes : {Either [TypeError] [(String,Type)]}
        loc.columnTypes =
          do
          atts <- lmt (allAtts <$> @table.tbUType)
          expAtts <- lmt @insData.uType
          let eNames = map fst expAtts
          tAtts <- case @targetCols of
                        [] -> return atts
                        _ -> mapM (lkpA atts) @targetCols
          checkAssignmentsValid @lhs.cat (map snd expAtts) (map snd tAtts)
          return tAtts
          where
            lkpA :: [(String,Type)] -> String -> E (String,Type)
            lkpA m n = maybe (Left [UnrecognisedIdentifier n])
                             (\t -> Right (n,t))
                             $ lookup n m

        loc.backTree = Insert @ann @table.tbAnnotatedTree
                              @targetCols
                              @insData.annotatedTree
                              @returning.annotatedTree
        loc.catUpdates = []
        insData.expectedTypes = maybe [] id $ do
                                ts <- etmt $ @loc.columnTypes
                                return $ map (Just . snd) ts

        returning.lib =
            either (const @lhs.lib) id $ do
              atts <- lmt (allAtts <$> @table.tbUType)
              lbUpdate @lhs.cat (LBIds "insert target table" (Just $ getName @table.annotatedTree) atts) @lhs.lib
