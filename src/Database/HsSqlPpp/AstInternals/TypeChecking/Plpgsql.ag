{-
Copyright 2009 Jake Wheat

This file contains the checking code for a few plpgsql statements.


-}

--todo: check return type consistent with function return type
SEM Statement
    | Return
        loc.tpe = maybe (Right $ Pseudo Void) Right @value.uType
        loc.backTree = Return @ann @value.annotatedTree
        loc.catUpdates = []
        loc.statementType = Nothing


SEM Statement
    | Assignment
        loc.tpe =
            do
            fromType <- lmt @value.uType
            toType <- unwrapLookup <$> lbLookupID @lhs.lib (getName @target.annotatedTree)
            checkAssignmentValid @lhs.cat fromType toType
            return $ Pseudo Void
        loc.backTree = Assignment @ann @target.annotatedTree @value.annotatedTree
        loc.catUpdates = []
        loc.statementType = Nothing

SEM Statement
    | ForIntegerStatement
        loc.varTypeE = unwrapLookup <$> lbLookupID @lhs.lib (getName @var.annotatedTree)
        loc.tpe =
          do
          fromType <- lmt @from.uType
          toType <- lmt @to.uType
          errorWhen (fromType /= toType) [FromToTypesNotSame fromType toType]
          case @loc.varTypeE of
            Right t -> checkAssignmentValid @lhs.cat fromType t
            Left _ -> return ()
          return $ Pseudo Void
        sts.lib =
            case @loc.varTypeE of
              Left [UnrecognisedIdentifier _] ->
                  -- create implicitly declared variable
                  either (const @lhs.lib) id $ do
                  ft <- lmt @from.uType
                  lbUpdate @lhs.cat
                    (LBIds "local for loop variable" Nothing [((getName @var.annotatedTree),ft)]) @lhs.lib
              _ -> @lhs.lib

        loc.backTree = ForIntegerStatement @ann @lb @var.annotatedTree @from.annotatedTree @to.annotatedTree @sts.annotatedTree
        loc.catUpdates = []
        loc.statementType = Nothing


SEM Statement
    | ForSelectStatement
        --loc.selType = getTypeAnnotation @sel.annotatedTree
        loc.tpe =
          do
          st <- CompositeType <$> lmt @sel.uType
          toType <- unwrapLookup <$> lbLookupID @lhs.lib (getName @var.annotatedTree)
          checkAssignmentValid @lhs.cat st toType
          return $ Pseudo Void
        --just handles assigning to a record type for now
        --one thing that isn't quite right is that the record variable
        --holds the last row in it after the for statement, which isn't
        --supported here
        sts.lib =
            either (const @lhs.lib) id $ do
            _ <- @loc.tpe
            st <- CompositeType <$> lmt @sel.uType
            lbUpdate @lhs.cat (LBIds "for loop record type" Nothing [(getName @var.annotatedTree,st)]) @lhs.lib

        loc.backTree = ForSelectStatement @ann @lb @var.annotatedTree @sel.annotatedTree @sts.annotatedTree
        loc.catUpdates = []
        loc.statementType = Nothing

