{-


This file contains the checking code for a few plpgsql statements.


-}

--todo: check return type consistent with function return type
SEM Statement
    | Return
        loc.tpe = maybe (Right $ Pseudo Void) Right @value.uType
        loc.backTree = Return @ann @value.annotatedTree
        loc.catUpdates = []
        loc.statementType = Nothing


SEM Statement
    | Assignment
        loc.tpe =
            do
            fromType <- lmt @value.uType
            toType <- lmt @target.uType --unwrapLookup <$> lbLookupID @lhs.lib (getName @target.annotatedTree)
            checkAssignmentValid @lhs.cat fromType toType
            return $ Pseudo Void
        loc.backTree = Assignment @ann @target.annotatedTree @value.annotatedTree
        loc.catUpdates = []
        loc.statementType = Nothing

SEM Statement
    | ForIntegerStatement
        loc.tpe =
          do
          fromType <- lmt @from.uType
          toType <- lmt @to.uType
          errorWhen (fromType /= toType) [FromToTypesNotSame fromType toType]
          case @var.uType of
            Just t -> checkAssignmentValid @lhs.cat fromType t
            Nothing -> return ()
          return $ Pseudo Void
        loc.implicitVar = case @var.annotatedTree of -- pretty hacky
                              Identifier a i | errs a == [UnrecognisedIdentifier i] -> True
                              _ -> False
        sts.lib =
            if @loc.implicitVar
            then either (const @lhs.lib) id $ do
                 ft <- lmt @from.uType
                 lbUpdate @lhs.cat
                    (LBIds "local for loop variable" Nothing [((getName @var.annotatedTree),ft)]) @lhs.lib
            else @lhs.lib

        loc.backTree =
            let i = if @loc.implicitVar
                    then let (Identifier a i) = @var.annotatedTree
                         in Identifier a { errs = []} i
                    else @var.annotatedTree
            in ForIntegerStatement @ann @lb i @from.annotatedTree @to.annotatedTree @sts.annotatedTree
        loc.catUpdates = []
        loc.statementType = Nothing


SEM Statement
    | ForSelectStatement
        loc.tpe =
          do
          st <- lmt (CompositeType <$> @sel.uType)
          toType <- lmt @var.uType
          checkAssignmentValid @lhs.cat st toType
          return $ Pseudo Void
        --just handles assigning to a record type for now
        --one thing that isn't quite right is that the record variable
        --holds the last row in it after the for statement, which isn't
        --supported here
        sts.lib =
            either (const @lhs.lib) id $ do
            _ <- @loc.tpe
            st <- lmt (CompositeType <$> @sel.uType)
            lbUpdate @lhs.cat (LBIds "for loop record type" Nothing [(getName @var.annotatedTree,st)]) @lhs.lib

        loc.backTree = ForSelectStatement @ann @lb @var.annotatedTree @sel.annotatedTree @sts.annotatedTree
        loc.catUpdates = []
        loc.statementType = Nothing

