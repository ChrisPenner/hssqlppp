{-
Copyright 2009 Jake Wheat

This file contains the code for typechecking create table statements
(and also create table as statements). It's pretty limited at the
moment, the bits that work are:

gathers enough information to add the table attributes types to the
catalog

typechecks row check constraints properly, but table check constraints
and all other constraints are not checked at all.

doesn't check for duplicate attribute names. doesn't check if the
types are valid for a table (e.g. disallow setof types)

We produce a valid catalog update if the types of the attributes
check ok, any errors in the constraints aren't leaked.

-}


ATTR AttributeDef [||attrName : String
                     namedType : {Maybe Type}]

ATTR AttributeDefList [||attrs : {[(String, Maybe Type)]}]


SEM Statement
    | CreateTable
        loc.tpe = Right $ Pseudo Void
        loc.catUpdates =
            [CatCreateTable @name @loc.attrs defaultSystemColumns]
        loc.attrs : {[(String,Type)]}
        loc.attrs = mapMaybe okAt @atts.attrs
                    where
                      okAt (s, Just t) = Just (s,t)
                      okAt (_,Nothing) = Nothing

        loc.statementType = Nothing
        loc.backTree = CreateTable @ann
                                   @name
                                   @atts.annotatedTree
                                   @cons.annotatedTree
        cons.lib = case lbUpdate @lhs.cat
                          (LBIds "attributedefs" Nothing @loc.attrs)
                          @lhs.lib of
                      Left x -> error $ "statement-createtable-cons.lib " ++ show x
                      Right e -> e

{
defaultSystemColumns :: [(String,Type)]
defaultSystemColumns = [("tableoid", ScalarType "oid")
                       ,("cmax", ScalarType "cid")
                       ,("xmax", ScalarType "xid")
                       ,("cmin", ScalarType "cid")
                       ,("xmin", ScalarType "xid")
                       ,("ctid", ScalarType "tid")]
}


SEM Statement
    | CreateTableAs
        loc.tpe = CompositeType <$> lmt @expr.uType
        loc.catUpdates =
           either (const []) id $ do
           ats <- @loc.attrs
           return [CatCreateTable @name ats defaultSystemColumns]

        loc.attrs : {Either [TypeError] [(String,Type)]}
        loc.attrs = lmt @expr.uType

        loc.backTree = CreateTableAs @ann @name @expr.annotatedTree
        loc.statementType = Nothing

{-
attribute name and type gathering
-}


SEM AttributeDef
    | AttributeDef
        lhs.attrName = map toLower @name
        lhs.namedType = @typ.namedType


SEM AttributeDefList
    | Cons lhs.attrs = (@hd.attrName, @hd.namedType) : @tl.attrs
    | Nil lhs.attrs = []

{-
row check constraint:
inject the column name and type into the column constraints
-}

SEM AttributeDef
    | AttributeDef
        cons.lib = either (const @lhs.lib) id $ do
                   t <- lmt @typ.namedType
                   lbUpdate @lhs.cat
                            (LBIds "attribute def" Nothing
                                   [(@name, t)]) @lhs.lib


