{-
Copyright 2009 Jake Wheat

This file contains the general code for statements and statement
lists, and includes the ag files for various flavours of statement.

The attributes and sem statements in this file are for chaining the
cat updates as we progress through a statement list, and for producing
the resultant cat after we've checked a whole ast, this can be used
e.g. to type check multiple files in a row which depend on eachother.

-}

-- cat updates syn attr is used by each statement to report
-- what changes it makes to the catalog, we use this to update
-- the cat to feed into the next statement

ATTR Statement [||catUpdates : {[CatalogUpdate]}
                  libUpdates : {[LocalBindingsUpdate]}]


ATTR StatementList [catUpdates : {[CatalogUpdate]}
                    libUpdates : {[LocalBindingsUpdate]}||]


--producedcat is used to pass the final updated cat out
ATTR StatementList Root [|| producedCat : Catalog
                            producedLib : LocalBindings]

ATTR Statement [inProducedCat: Catalog||]

{-

Not sure if there is a better way of doing this: what we want to do is
to pass in a starting catalog to a list of statements, then add the
catalog updates from each statement in order before passing the
catalog onto the next statement, and then return the final catalog out
the list again.

to pass it from statement to statement, updating as we go, first take
the catalog from the statement list and pass it into the head of the
list. This head then produces an updated catalog which we pass to the
tail. This tail is another list of statements so we just repeat until
we get to the end. Then we pass the catalog that made it to the end
back up the statement list

-}
SEM StatementList
    | Cons Nil
        --newcat is the catalog passed into the head statement
        --updated with any catalog changes that that statement has made
        loc.newCat = fromRight @lhs.cat $ updateCatalog @lhs.cat @lhs.catUpdates
        loc.newLib = fromRight @lhs.lib $ foldM (flip $ lbUpdate @lhs.cat) @lhs.lib @lhs.libUpdates
    | Cons
        hd.cat = @loc.newCat
        tl.cat = @loc.newCat
        hd.lib = @loc.newLib
        tl.lib = @loc.newLib
        --produced cat is used to chain the final updated catalog from the last
        --element of the list and pass it back up the list so in can be pushed up
        -- to the root element and sent out from there
        lhs.producedCat = @tl.producedCat
        lhs.producedLib = @tl.producedLib
        --this is probably a bit inefficient: it creates a new catalog from scratch
        --on each statement instead of chaining on the last updated cat
        tl.catUpdates = @hd.catUpdates
        tl.libUpdates = @hd.libUpdates
    | Nil
        lhs.producedCat = @loc.newCat
        lhs.producedLib = @loc.newLib

SEM Statement
    | SelectStatement Insert Update Delete CreateView CreateDomain CreateLanguage
      CreateFunction CreateType CreateTable CreateTableAs Return Assignment
      ForSelectStatement ForIntegerStatement DropFunction
        loc.tpe : {Either [TypeError] Type}
        loc.statementType : {Maybe StatementType}
        lhs.annotatedTree =
            updateAnnotation
                (\a -> a {stType = @loc.statementType
                         ,catUpd = @loc.catUpdates}) $
            setTypeAddErrors @loc.tpe @loc.backTree
        loc.catUpdates : {[CatalogUpdate]}
        lhs.catUpdates = @loc.catUpdates
        lhs.libUpdates = @loc.libUpdates
    | Insert Update Delete CreateView CreateDomain
      CreateFunction CreateType CreateTable CreateTableAs Return
      Assignment ForSelectStatement ForIntegerStatement Set CreateLanguage
      Notify CreateSequence AlterSequence DropFunction
        loc.libUpdates = []

SEM StatementList
    | Cons hd.inProducedCat = @tl.producedCat


SEM Root
    | Root statements.catUpdates = []
           statements.libUpdates = []

SEM Statement
    | CaseStatement CaseStatementSimple ContinueStatement Copy CopyData
      DropSomething Execute ExecuteInto
      If NullStatement ExitStatement Perform Raise ReturnNext ReturnQuery Truncate
      WhileStatement Set Notify CreateSequence LoopStatement
      AlterSequence AlterTable CreateTrigger Label
        lhs.catUpdates = []
        lhs.libUpdates = []

SEM ExpressionListStatementListPair
    | Tuple
        x2.catUpdates = []
        x2.libUpdates = []
SEM ExpressionStatementListPair
    | Tuple
        x2.catUpdates = []
        x2.libUpdates = []
SEM FnBody
    | PlpgsqlFnBody SqlFnBody
        sts.catUpdates = []
        sts.libUpdates = []
SEM Statement
    | CaseStatement CaseStatementSimple If
        els.catUpdates = []
        els.libUpdates = []
SEM Statement
    | ForIntegerStatement ForSelectStatement WhileStatement LoopStatement
        sts.catUpdates = []
        sts.libUpdates = []



INCLUDE "TypeChecking/SelectStatement.ag"
INCLUDE "TypeChecking/Insert.ag"
INCLUDE "TypeChecking/Update.ag"
INCLUDE "TypeChecking/Delete.ag"
INCLUDE "TypeChecking/CreateTable.ag"
INCLUDE "TypeChecking/MiscCreates.ag"
INCLUDE "TypeChecking/CreateFunction.ag"
INCLUDE "TypeChecking/Triggers.ag"
INCLUDE "TypeChecking/Drops.ag"
INCLUDE "TypeChecking/Plpgsql.ag"

