{-


triggers

only supporting what I use at the moment

functions returning trigger
introduce OLD and NEW records which need a new type, and match against
any composite, contain any field. - this will allow the function
returning trigger to type check sort of correctly (it won't fail
things which should pass).

[Could do slightly better whilst checking these functions (e.g. detect
inconsistencies in the way old and new are used), but don't need to do
this here to catch errors, since we catch them when they are attached
to a table.

also: returns trigger means that the function should return old, new
or null, could catch this in the function, but using it will catch
this so skip for now.]

Then, when adding a trigger, recheck the function with the exact
composite types substituted in for the return type, old and new. This
should catch any remaining errors with the function.

Might need to alter annotations to allow a single type error to have
multiple messages with multiple source positions

Roughly, the catalog entry will be:
triggername, events, tablename, statement|row,procedure_name

Summary:
change typechecking functions which return trigger to add magic old
and new records
to type check a create trigger, check the table exists, the procedure exists,
  and recheck the procedure with the table's composite type as new,
  old and return type

1) get function with old, new, return trigger passing typecheck
2) add triggers to catalog, get catupdates from typechecking create trigger
3) read trigger info from pg catalog
4) errors: missing table, missing function
5) recheck used function with table composite type in place of old and new - success and error checks

-}
