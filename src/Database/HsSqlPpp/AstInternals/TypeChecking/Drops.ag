{-


This file contains the code for drop statements, only does drop function at the moment

-}

SEM Statement
    | DropFunction
        loc.tpe = Right $ Pseudo Void
        loc.backTree = DropFunction @ann @ifE @sigs.annotatedTree @cascade
        loc.catUpdates =
            either (const []) id $
            Right $ map mcu $ mapMaybe goodSig @sigs.fnSigs
            where
              mcu :: (String,[Type]) -> CatalogUpdate
              mcu (nm,args) = CatDropFunction ifE nm args
              ifE = @ifE == IfExists
              goodSig :: (String,[Maybe Type]) -> Maybe (String,[Type])
              goodSig (s, ts) = do
                            ts1 <- sequence ts
                            return (s,ts1)
        loc.statementType = Nothing

ATTR StringTypeNameListPairList [||fnSigs:{[(String,[Maybe Type])]}]
SEM StringTypeNameListPairList
    | Cons lhs.fnSigs = @hd.fnSig : @tl.fnSigs
    | Nil lhs.fnSigs = []

ATTR StringTypeNameListPair [||fnSig:{(String,[Maybe Type])}]
SEM StringTypeNameListPair
    | Tuple lhs.fnSig = (@x1, @x2.namedTypes)

ATTR TypeNameList [||namedTypes:{[Maybe Type]}]

SEM TypeNameList
    | Cons lhs.namedTypes = @hd.namedType : @tl.namedTypes
    | Nil lhs.namedTypes = []
